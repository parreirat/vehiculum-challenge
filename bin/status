#!/usr/bin/env ruby

# Runs our .gemspec, among others, allowing 'lib' to be appended onto $LOAD_PATH
require "bundler/setup"

require "thor"
require "awesome_print"

require "pry"
require "pry-byebug"
require "pry-doc"

require "status"

class StatusCLI < Thor

  desc "pull [--no-output] [webpages=all]",
       "queries services once and saves into data store"
  method_option :webpages, type: :array, default: Status::Page.implemented_pages.collect(&:provider)
  method_option :output  , type: :boolean, default: true
  def pull
    # threads = []
    options[:webpages].each do |provider|
      # It hurts to do this, no rails String#constantize.
      klass = Kernel.const_get("Status::Pages::#{provider.to_s.capitalize}")
    	# threads << Thread.new do
        page = klass.new
        puts "Pooling #{provider}...".yellow if options[:output]
        is_up = page.is_up?(true)
        if options[:output]
        status = ""
          if is_up
            status = "Up!".to_s.green
          else
            status = "Down!".to_s.red
          end
        puts "Pooling #{provider} complete: #{status}".yellow
        end
  	  # end
    end
    # Wait for all of our threads.
    # threads.each(&:join)
  end

  # @parreirat NOTE - Some yield magic somewhere around here?
	# Optional param webpages: all, subset (default: all)
	desc "live [--pool_interval=5] [--no-output] [webpages=all]",
       "queries services continuously with pool_interval seconds and saves store"
  method_option :webpages, type: :array,
                default: Status::Page.implemented_pages.collect(&:provider)
  method_option :pool_interval, type: :numeric, default: 1
  method_option :output, type: :boolean, default: true
	def live
    # @parreirat NOTE - Should rescue Timeout::Error and SocketError.
    begin
      puts "\n---===# Press ctrl+c to quit! #===---\n".yellow
      loop do
        # threads = []
        # lock = Concurrent::ReadWriteLock.new
        options[:webpages].each do |provider|
          # It hurts to do this, no rails String#constantize.
          klass = Kernel.const_get("Status::Pages::#{provider.to_s.capitalize}")
          # threads << Thread.new do
            page = klass.new
            puts "Pooling #{provider}...".yellow if options[:output]
            is_up = page.is_up?(true)
            if options[:output]
              status = ""
              if is_up
                status = "Up!".to_s.green
              else
                status = "Down!".to_s.red
              end
              puts "Pooling #{provider} complete: #{status}".yellow
            end
          # end
        end
        # Wait for all of our threads.
        # threads.each(&:join)
        message = "All requests done and waiting #{options[:pool_interval]}"
        message += " seconds before pooling again..."
        puts message.yellow  if options[:output]
        sleep(options[:pool_interval])
      end
    rescue Interrupt
      puts "\n---===# status live has terminated! #===---\n".green
    end
	end

  desc "history [--format=standard_table]",
       "prints all the data currently saved"
  method_option :format, type: :string, default: "standard_table"
	def history
    data_store = Status::DataStore.new
    history = Status::History.new(data_store)
    history.print(options[:format])
	end

  desc "backup [--file=backup_data_store.csv]",
       "saves current status data to a file"
  method_option :file, type: :string, default: "backup_data_store.csv"
	def backup
    data_store = Status::DataStore.new
    data_store.save_data_store(options[:file])
	end

  method_option :file, type: :string, default: "backup_data_store.csv"
  method_option :merge, type: :boolean, default: :true
	desc "restore [--file=backup_data_store.csv] [--merge=true]",
       "adds data from a file into current status data"
	def restore
    if options[:merge]
      data_store = Status::DataStore.new
      data_store.load_data_store(options[:file])
      puts "Merged data from '#{options[:file]}' into data store.".green
    else
      data_store = Status::DataStore.new(false)
      data_store.load_data_store(options[:file])
      puts "Replaced data store with data from '#{options[:file]}'.".green
    end
	end

  # @parreirat NOTE - Not required but is useful.
  desc "reset", "deletes the data store"
  def reset
    # Pass in false: we do not want to load default data store
    Status::DataStore.new(false).wipe_data_store
    puts "Wiped data store!".green
  end

	# desc "stats", "summarizes the current data and prints it"
	# def stats
	# end

end

StatusCLI.start(ARGV)