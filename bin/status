#!/usr/bin/env ruby

# Runs our .gemspec, among others, allowing 'lib' to be appended onto $LOAD_PATH
require "bundler/setup"

require "thor"
require "awesome_print"

require "pry"
require "pry-byebug"
require "pry-doc"

require "status"

class StatusCLI < Thor

  desc "pull [--no-output]", "queries services once and saves into data store"
  method_option :webpages, type: :array, default: Status::Page.implemented_pages
  method_option :output  , type: :boolean, default: true
  def pull
    # @parreirat NOTE - Need top-level orchestrator class... not calling
    #   these internals directly!
  	Thread.new {
      page = Status::Pages::Bitbucket.new
      puts "Pooling #{page.provider}...".yellow if options[:output]
      is_up = page.is_up?(true)
      if options[:output]
      status = ""
        if is_up
          status = "Up!".to_s.green
        else
          status = "Down!".to_s.red
        end
      puts "Pooling #{page.provider} complete: #{status}".yellow
      end
	  }.join
  end

  # @parreirat NOTE - Some yield magic somewhere around here?
	# Optional param webpages: all, subset (default: all)
	desc "live [--pool_interval=5] [--no-output] ", "queries services continuously with pool_interval seconds interval and saves into store"
  method_option :pool_interval, type: :numeric, default: 5
  method_option :output, type: :boolean, default: true
	def live
    # @parreirat NOTE - Should rescue Timeout::Error and SocketError.
    begin
      puts "\n---===# Press ctrl+c to quit! #===---\n".yellow
      loop do
        Thread.new {
          page = Status::Pages::Bitbucket.new
          puts "Pooling #{page.provider}...".yellow if options[:output]
          is_up = page.is_up?(true)
          if options[:output]
            status = ""
            if is_up
              status = "Up!".to_s.green
            else
              status = "Down!".to_s.red
            end
            puts "Pooling #{page.provider} complete: #{status}".yellow
          end
        }.join
        puts "Waiting #{options[:pool_interval]} seconds before pooling again...".yellow  if options[:output]
        sleep(options[:pool_interval])
      end
    rescue Interrupt
      puts "\n---===# status live has terminated! #===---\n".green
    end
	end

  method_option :format, type: :string, default: "standard_table"
	desc "history [--format=standard_table]","prints all the data currently saved"
	def history
    data_store = Status::DataStore.new
    history = Status::History.new(data_store)
    history.print(options[:format])
	end

	desc "backup","saves current status data to a file"
	def backup
	end

	desc "restore","adds data from a file into current status data"
	def restore
	end

	desc "stats","summarizes the current data and prints it"
	def stats
	end

end

StatusCLI.start(ARGV)