#!/usr/bin/env ruby

# Runs our .gemspec, among others, allowing 'lib' to be appended onto $LOAD_PATH
require "bundler/setup"

require "thor"
require "awesome_print"

require "pry"
require "pry-byebug"

require "status"

class StatusCLI < Thor

  # Optional param output: false, true (default: true)
  # Optional param webpages: all, subset (default: all)
	# @parreirat TODO - Before I forget: Use Threads to pool all services
  desc "pull output=false webpages=all", "queries services once and saves into store"
  def pull(output = true, webpages = :all)
  	Thread.new {
  		if Status::Pages::Bitbucket.new.is_up?
	  		puts "Bitbucket is up!"
	  	else
	  		puts "Bitbucket is down!"
	  	end
	  }.join
  end

	# Optional param webpages: all, subset (default: all)
	desc "live pool_interval=5 webpages=all", "queries services continuously with pool_interval seconds interval and saves into store"
	def live(webpages = :all)
	end

	desc "history","prints all the data currently saved in a table fashion"
	def history
	end

	# Mandatory param, backup file path. (default: Dir.pwd/status_log.csv)
	desc "backup file_path='./status_log.csv'","saves current status data to a file"
	def backup(file_path = "status_log.csv")
	end

	# Mandatory param, backup file path. (default: Dir.pwd/status_log.csv)
	desc "restore file_path='./status_log.csv'","adds data from a file into current status data"
	def restore(file_path = "status_log.csv")
	end

	desc "stats","summarizes the current data and displays it in a table fashion"
	def stats
	end

end

StatusCLI.start(ARGV)