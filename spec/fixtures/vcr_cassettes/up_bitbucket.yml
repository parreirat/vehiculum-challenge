---
http_interactions:
- request:
    method: get
    uri: https://status.bitbucket.org/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - status.bitbucket.org
  response:
    status:
      code: 200
      message: OK
    headers:
      Vary:
      - Accept,Accept-Encoding,Fastly-SSL,Origin
      Cache-Control:
      - max-age=0, private, must-revalidate
      X-Cache:
      - HIT
      Content-Type:
      - text/html; charset=utf-8
      Strict-Transport-Security:
      - max-age=259200
      X-Request-Id:
      - 3837d959-6d10-4aa6-9be3-506275e03dc6
      Date:
      - Sun, 24 Jun 2018 15:52:06 GMT
      X-Xss-Protection:
      - 1; mode=block
      X-Runtime:
      - '0.156560'
      Transfer-Encoding:
      - chunked
      Access-Control-Allow-Origin:
      - "*"
      Accept-Ranges:
      - bytes
      X-Content-Type-Options:
      - nosniff
      Etag:
      - W/"gz[73cc87d49b047013bf09f3b3b24939f7]"
      X-Statuspage-Skip-Logging:
      - 'true'
      Connection:
      - keep-alive
      X-Statuspage-Version:
      - feb9ddb
      Age:
      - '47'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KICA8aGVhZD4KICAgIDxtZXRhIGh0dHAtZXF1aXY9IlgtVUEtQ29tcGF0aWJsZSIgY29udGVudD0iSUU9ZWRnZSI+CiAgICA8IS0tIGZvcmNlIElFIGJyb3dzZXJzIGluIGNvbXBhdGliaWxpdHkgbW9kZSB0byB1c2UgdGhlaXIgbW9zdCBhZ2dyZXNzaXZlIHJlbmRlcmluZyBlbmdpbmUgLS0+CgogICAgPG1ldGEgY2hhcnNldD0idXRmLTgiPgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+d2luZG93Lk5SRVVNfHwoTlJFVU09e30pO05SRVVNLmluZm89eyJiZWFjb24iOiJiYW0ubnItZGF0YS5uZXQiLCJlcnJvckJlYWNvbiI6ImJhbS5uci1kYXRhLm5ldCIsImxpY2Vuc2VLZXkiOiJiYzEyZDBjYTdjIiwiYXBwbGljYXRpb25JRCI6IjE4ODcwNTIsNTU4NzA3NSIsInRyYW5zYWN0aW9uTmFtZSI6IklsZ01SVUZYV0ZoV0VFNUNRd0JERjBJY1MwQlZSeGNTSGw0UFV3ZEoiLCJxdWV1ZVRpbWUiOjAsImFwcGxpY2F0aW9uVGltZSI6MTU4LCJhZ2VudCI6IiJ9PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij53aW5kb3cuTlJFVU18fChOUkVVTT17fSksX19ucl9yZXF1aXJlPWZ1bmN0aW9uKGUsdCxuKXtmdW5jdGlvbiByKG4pe2lmKCF0W25dKXt2YXIgbz10W25dPXtleHBvcnRzOnt9fTtlW25dWzBdLmNhbGwoby5leHBvcnRzLGZ1bmN0aW9uKHQpe3ZhciBvPWVbbl1bMV1bdF07cmV0dXJuIHIob3x8dCl9LG8sby5leHBvcnRzKX1yZXR1cm4gdFtuXS5leHBvcnRzfWlmKCJmdW5jdGlvbiI9PXR5cGVvZiBfX25yX3JlcXVpcmUpcmV0dXJuIF9fbnJfcmVxdWlyZTtmb3IodmFyIG89MDtvPG4ubGVuZ3RoO28rKylyKG5bb10pO3JldHVybiByfSh7MTpbZnVuY3Rpb24oZSx0LG4pe2Z1bmN0aW9uIHIoKXt9ZnVuY3Rpb24gbyhlLHQsbil7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIGkoZSxbZi5ub3coKV0uY29uY2F0KHUoYXJndW1lbnRzKSksdD9udWxsOnRoaXMsbiksdD92b2lkIDA6dGhpc319dmFyIGk9ZSgiaGFuZGxlIiksYT1lKDIpLHU9ZSgzKSxjPWUoImVlIikuZ2V0KCJ0cmFjZXIiKSxmPWUoImxvYWRlciIpLHM9TlJFVU07InVuZGVmaW5lZCI9PXR5cGVvZiB3aW5kb3cubmV3cmVsaWMmJihuZXdyZWxpYz1zKTt2YXIgcD1bInNldFBhZ2VWaWV3TmFtZSIsInNldEN1c3RvbUF0dHJpYnV0ZSIsInNldEVycm9ySGFuZGxlciIsImZpbmlzaGVkIiwiYWRkVG9UcmFjZSIsImlubGluZUhpdCIsImFkZFJlbGVhc2UiXSxkPSJhcGktIixsPWQrIml4bi0iO2EocCxmdW5jdGlvbihlLHQpe3NbdF09byhkK3QsITAsImFwaSIpfSkscy5hZGRQYWdlQWN0aW9uPW8oZCsiYWRkUGFnZUFjdGlvbiIsITApLHMuc2V0Q3VycmVudFJvdXRlTmFtZT1vKGQrInJvdXRlTmFtZSIsITApLHQuZXhwb3J0cz1uZXdyZWxpYyxzLmludGVyYWN0aW9uPWZ1bmN0aW9uKCl7cmV0dXJuKG5ldyByKS5nZXQoKX07dmFyIG09ci5wcm90b3R5cGU9e2NyZWF0ZVRyYWNlcjpmdW5jdGlvbihlLHQpe3ZhciBuPXt9LHI9dGhpcyxvPSJmdW5jdGlvbiI9PXR5cGVvZiB0O3JldHVybiBpKGwrInRyYWNlciIsW2Yubm93KCksZSxuXSxyKSxmdW5jdGlvbigpe2lmKGMuZW1pdCgobz8iIjoibm8tIikrImZuLXN0YXJ0IixbZi5ub3coKSxyLG9dLG4pLG8pdHJ5e3JldHVybiB0LmFwcGx5KHRoaXMsYXJndW1lbnRzKX1jYXRjaChlKXt0aHJvdyBjLmVtaXQoImZuLWVyciIsW2FyZ3VtZW50cyx0aGlzLGVdLG4pLGV9ZmluYWxseXtjLmVtaXQoImZuLWVuZCIsW2Yubm93KCldLG4pfX19fTthKCJzZXROYW1lLHNldEF0dHJpYnV0ZSxzYXZlLGlnbm9yZSxvbkVuZCxnZXRDb250ZXh0LGVuZCxnZXQiLnNwbGl0KCIsIiksZnVuY3Rpb24oZSx0KXttW3RdPW8obCt0KX0pLG5ld3JlbGljLm5vdGljZUVycm9yPWZ1bmN0aW9uKGUpeyJzdHJpbmciPT10eXBlb2YgZSYmKGU9bmV3IEVycm9yKGUpKSxpKCJlcnIiLFtlLGYubm93KCldKX19LHt9XSwyOltmdW5jdGlvbihlLHQsbil7ZnVuY3Rpb24gcihlLHQpe3ZhciBuPVtdLHI9IiIsaT0wO2ZvcihyIGluIGUpby5jYWxsKGUscikmJihuW2ldPXQocixlW3JdKSxpKz0xKTtyZXR1cm4gbn12YXIgbz1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O3QuZXhwb3J0cz1yfSx7fV0sMzpbZnVuY3Rpb24oZSx0LG4pe2Z1bmN0aW9uIHIoZSx0LG4pe3R8fCh0PTApLCJ1bmRlZmluZWQiPT10eXBlb2YgbiYmKG49ZT9lLmxlbmd0aDowKTtmb3IodmFyIHI9LTEsbz1uLXR8fDAsaT1BcnJheShvPDA/MDpvKTsrK3I8bzspaVtyXT1lW3Qrcl07cmV0dXJuIGl9dC5leHBvcnRzPXJ9LHt9XSw0OltmdW5jdGlvbihlLHQsbil7dC5leHBvcnRzPXtleGlzdHM6InVuZGVmaW5lZCIhPXR5cGVvZiB3aW5kb3cucGVyZm9ybWFuY2UmJndpbmRvdy5wZXJmb3JtYW5jZS50aW1pbmcmJiJ1bmRlZmluZWQiIT10eXBlb2Ygd2luZG93LnBlcmZvcm1hbmNlLnRpbWluZy5uYXZpZ2F0aW9uU3RhcnR9fSx7fV0sZWU6W2Z1bmN0aW9uKGUsdCxuKXtmdW5jdGlvbiByKCl7fWZ1bmN0aW9uIG8oZSl7ZnVuY3Rpb24gdChlKXtyZXR1cm4gZSYmZSBpbnN0YW5jZW9mIHI/ZTplP2MoZSx1LGkpOmkoKX1mdW5jdGlvbiBuKG4scixvLGkpe2lmKCFkLmFib3J0ZWR8fGkpe2UmJmUobixyLG8pO2Zvcih2YXIgYT10KG8pLHU9bShuKSxjPXUubGVuZ3RoLGY9MDtmPGM7ZisrKXVbZl0uYXBwbHkoYSxyKTt2YXIgcD1zW3lbbl1dO3JldHVybiBwJiZwLnB1c2goW2IsbixyLGFdKSxhfX1mdW5jdGlvbiBsKGUsdCl7dltlXT1tKGUpLmNvbmNhdCh0KX1mdW5jdGlvbiBtKGUpe3JldHVybiB2W2VdfHxbXX1mdW5jdGlvbiB3KGUpe3JldHVybiBwW2VdPXBbZV18fG8obil9ZnVuY3Rpb24gZyhlLHQpe2YoZSxmdW5jdGlvbihlLG4pe3Q9dHx8ImZlYXR1cmUiLHlbbl09dCx0IGluIHN8fChzW3RdPVtdKX0pfXZhciB2PXt9LHk9e30sYj17b246bCxlbWl0Om4sZ2V0OncsbGlzdGVuZXJzOm0sY29udGV4dDp0LGJ1ZmZlcjpnLGFib3J0OmEsYWJvcnRlZDohMX07cmV0dXJuIGJ9ZnVuY3Rpb24gaSgpe3JldHVybiBuZXcgcn1mdW5jdGlvbiBhKCl7KHMuYXBpfHxzLmZlYXR1cmUpJiYoZC5hYm9ydGVkPSEwLHM9ZC5iYWNrbG9nPXt9KX12YXIgdT0ibnJAY29udGV4dCIsYz1lKCJnb3MiKSxmPWUoMikscz17fSxwPXt9LGQ9dC5leHBvcnRzPW8oKTtkLmJhY2tsb2c9c30se31dLGdvczpbZnVuY3Rpb24oZSx0LG4pe2Z1bmN0aW9uIHIoZSx0LG4pe2lmKG8uY2FsbChlLHQpKXJldHVybiBlW3RdO3ZhciByPW4oKTtpZihPYmplY3QuZGVmaW5lUHJvcGVydHkmJk9iamVjdC5rZXlzKXRyeXtyZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsdCx7dmFsdWU6cix3cml0YWJsZTohMCxlbnVtZXJhYmxlOiExfSkscn1jYXRjaChpKXt9cmV0dXJuIGVbdF09cixyfXZhciBvPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7dC5leHBvcnRzPXJ9LHt9XSxoYW5kbGU6W2Z1bmN0aW9uKGUsdCxuKXtmdW5jdGlvbiByKGUsdCxuLHIpe28uYnVmZmVyKFtlXSxyKSxvLmVtaXQoZSx0LG4pfXZhciBvPWUoImVlIikuZ2V0KCJoYW5kbGUiKTt0LmV4cG9ydHM9cixyLmVlPW99LHt9XSxpZDpbZnVuY3Rpb24oZSx0LG4pe2Z1bmN0aW9uIHIoZSl7dmFyIHQ9dHlwZW9mIGU7cmV0dXJuIWV8fCJvYmplY3QiIT09dCYmImZ1bmN0aW9uIiE9PXQ/LTE6ZT09PXdpbmRvdz8wOmEoZSxpLGZ1bmN0aW9uKCl7cmV0dXJuIG8rK30pfXZhciBvPTEsaT0ibnJAaWQiLGE9ZSgiZ29zIik7dC5leHBvcnRzPXJ9LHt9XSxsb2FkZXI6W2Z1bmN0aW9uKGUsdCxuKXtmdW5jdGlvbiByKCl7aWYoIXgrKyl7dmFyIGU9aC5pbmZvPU5SRVVNLmluZm8sdD1kLmdldEVsZW1lbnRzQnlUYWdOYW1lKCJzY3JpcHQiKVswXTtpZihzZXRUaW1lb3V0KHMuYWJvcnQsM2U0KSwhKGUmJmUubGljZW5zZUtleSYmZS5hcHBsaWNhdGlvbklEJiZ0KSlyZXR1cm4gcy5hYm9ydCgpO2YoeSxmdW5jdGlvbih0LG4pe2VbdF18fChlW3RdPW4pfSksYygibWFyayIsWyJvbmxvYWQiLGEoKStoLm9mZnNldF0sbnVsbCwiYXBpIik7dmFyIG49ZC5jcmVhdGVFbGVtZW50KCJzY3JpcHQiKTtuLnNyYz0iaHR0cHM6Ly8iK2UuYWdlbnQsdC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShuLHQpfX1mdW5jdGlvbiBvKCl7ImNvbXBsZXRlIj09PWQucmVhZHlTdGF0ZSYmaSgpfWZ1bmN0aW9uIGkoKXtjKCJtYXJrIixbImRvbUNvbnRlbnQiLGEoKStoLm9mZnNldF0sbnVsbCwiYXBpIil9ZnVuY3Rpb24gYSgpe3JldHVybiBFLmV4aXN0cyYmcGVyZm9ybWFuY2Uubm93P01hdGgucm91bmQocGVyZm9ybWFuY2Uubm93KCkpOih1PU1hdGgubWF4KChuZXcgRGF0ZSkuZ2V0VGltZSgpLHUpKS1oLm9mZnNldH12YXIgdT0obmV3IERhdGUpLmdldFRpbWUoKSxjPWUoImhhbmRsZSIpLGY9ZSgyKSxzPWUoImVlIikscD13aW5kb3csZD1wLmRvY3VtZW50LGw9ImFkZEV2ZW50TGlzdGVuZXIiLG09ImF0dGFjaEV2ZW50Iix3PXAuWE1MSHR0cFJlcXVlc3QsZz13JiZ3LnByb3RvdHlwZTtOUkVVTS5vPXtTVDpzZXRUaW1lb3V0LFNJOnAuc2V0SW1tZWRpYXRlLENUOmNsZWFyVGltZW91dCxYSFI6dyxSRVE6cC5SZXF1ZXN0LEVWOnAuRXZlbnQsUFI6cC5Qcm9taXNlLE1POnAuTXV0YXRpb25PYnNlcnZlcn07dmFyIHY9IiIrbG9jYXRpb24seT17YmVhY29uOiJiYW0ubnItZGF0YS5uZXQiLGVycm9yQmVhY29uOiJiYW0ubnItZGF0YS5uZXQiLGFnZW50OiJqcy1hZ2VudC5uZXdyZWxpYy5jb20vbnItMTA3MS5taW4uanMifSxiPXcmJmcmJmdbbF0mJiEvQ3JpT1MvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCksaD10LmV4cG9ydHM9e29mZnNldDp1LG5vdzphLG9yaWdpbjp2LGZlYXR1cmVzOnt9LHhocldyYXBwYWJsZTpifTtlKDEpLGRbbF0/KGRbbF0oIkRPTUNvbnRlbnRMb2FkZWQiLGksITEpLHBbbF0oImxvYWQiLHIsITEpKTooZFttXSgib25yZWFkeXN0YXRlY2hhbmdlIixvKSxwW21dKCJvbmxvYWQiLHIpKSxjKCJtYXJrIixbImZpcnN0Ynl0ZSIsdV0sbnVsbCwiYXBpIik7dmFyIHg9MCxFPWUoNCl9LHt9XX0se30sWyJsb2FkZXIiXSk7PC9zY3JpcHQ+CiAgICA8dGl0bGU+QXRsYXNzaWFuIEJpdGJ1Y2tldCBTdGF0dXM8L3RpdGxlPgogICAgPG1ldGEgbmFtZT0iZGVzY3JpcHRpb24iIGNvbnRlbnQ9IldlbGNvbWUgdG8gQXRsYXNzaWFuIEJpdGJ1Y2tldCYjMzk7cyBob21lIGZvciByZWFsLXRpbWUgYW5kIGhpc3RvcmljYWwgZGF0YSBvbiBzeXN0ZW0gcGVyZm9ybWFuY2UuIj4KCiAgICA8IS0tIE1vYmlsZSB2aWV3cG9ydCBvcHRpbWl6YXRpb24gaDVicC5jb20vYWQgLS0+CiAgICA8bWV0YSBuYW1lPSJIYW5kaGVsZEZyaWVuZGx5IiBjb250ZW50PSJUcnVlIj4KICAgIDxtZXRhIG5hbWU9Ik1vYmlsZU9wdGltaXplZCIgY29udGVudD0iMzIwIj4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wLCBtaW5pbXVtLXNjYWxlPTEuMCwgbWF4aW11bS1zY2FsZT0xLjAiPgoKICAgIDwhLS0gVGltZSB0aGlzIHBhZ2Ugd2FzIHJlbmRlcmVkIC0gaHR0cDovL3B1cmwub3JnL2RjL3Rlcm1zL2lzc3VlZCAtLT4KICAgIDxtZXRhIG5hbWU9Imlzc3VlZCIgY29udGVudD0iMTUyOTg1NTUyNiI+CgogICAgPCEtLSBNb2JpbGUgSUUgYWxsb3dzIHVzIHRvIGFjdGl2YXRlIENsZWFyVHlwZSB0ZWNobm9sb2d5IGZvciBzbW9vdGhpbmcgZm9udHMgZm9yIGVhc3kgcmVhZGluZyAtLT4KICAgIDxtZXRhIGh0dHAtZXF1aXY9ImNsZWFydHlwZSIgY29udGVudD0ib24iPgoKICAgIDwhLS0gTGUgZm9udHMgLS0+CjxzdHlsZT4KICBAZm9udC1mYWNlIHsKICAgIGZvbnQtZmFtaWx5OiAncHJveGltYS1ub3ZhJzsKICAgIHNyYzogdXJsKCdodHRwczovL2RrYTU3NW9mbTRhbzAuY2xvdWRmcm9udC5uZXQvYXNzZXRzL1Byb3hpbWFOb3ZhTGlnaHQtZjBiMmY3YzEyYjZiODdjNjVjMDJkM2MxNzM4MDQ3ZWE2N2E3NjA3ZmQ3NjcwNTZkOGEyOTY0Y2M2YTIzOTNmNy5lb3Q/aG9zdD1zdGF0dXMuYml0YnVja2V0Lm9yZycpOwogICAgc3JjOiB1cmwoJ2h0dHBzOi8vZGthNTc1b2ZtNGFvMC5jbG91ZGZyb250Lm5ldC9hc3NldHMvUHJveGltYU5vdmFMaWdodC1mMGIyZjdjMTJiNmI4N2M2NWMwMmQzYzE3MzgwNDdlYTY3YTc2MDdmZDc2NzA1NmQ4YTI5NjRjYzZhMjM5M2Y3LmVvdD9ob3N0PXN0YXR1cy5iaXRidWNrZXQub3JnI2llZml4JykgZm9ybWF0KCdlbWJlZGRlZC1vcGVudHlwZScpLAogICAgICAgICB1cmwoJ2h0dHBzOi8vZGthNTc1b2ZtNGFvMC5jbG91ZGZyb250Lm5ldC9hc3NldHMvUHJveGltYU5vdmFMaWdodC1lNjQyZmZlODIwMDVjNjIwODYzMjUzOGE1NTdlN2Y1ZGNjYjgzNWMwMzAzYjA2ZjE3ZjU1Y2NmNTY3OTA3MjQxLndvZmY/aG9zdD1zdGF0dXMuYml0YnVja2V0Lm9yZycpIGZvcm1hdCgnd29mZicpLAogICAgICAgICB1cmwoJ2h0dHBzOi8vZGthNTc1b2ZtNGFvMC5jbG91ZGZyb250Lm5ldC9hc3NldHMvUHJveGltYU5vdmFMaWdodC0wZjA5NGRhOWIzMDFkMDMyOTJmOTdkYjU1NDQxNDJhMTZmOWYyZGRmNTBhZjkxZDQ0NzUzZDkzMTBjMTk0YzVmLnR0Zj9ob3N0PXN0YXR1cy5iaXRidWNrZXQub3JnJykgZm9ybWF0KCd0cnVldHlwZScpOwogICAgZm9udC13ZWlnaHQ6MzAwOwogICAgZm9udC1zdHlsZTpub3JtYWw7CiAgfQogICAKICBAZm9udC1mYWNlIHsKICAgIGZvbnQtZmFtaWx5OiAncHJveGltYS1ub3ZhJzsKICAgIHNyYzogdXJsKCdodHRwczovL2RrYTU3NW9mbTRhbzAuY2xvdWRmcm9udC5uZXQvYXNzZXRzL1Byb3hpbWFOb3ZhUmVndWxhci0zNjZkMTc3NjlkODY0YWE3MmYyN2RlZmFkZGY1OTFlNDYwYTFkZTQ5ODRiYjI0ZGFjZWE1N2E5ZmMxZDE0ODc4LmVvdD9ob3N0PXN0YXR1cy5iaXRidWNrZXQub3JnJyk7CiAgICBzcmM6IHVybCgnaHR0cHM6Ly9ka2E1NzVvZm00YW8wLmNsb3VkZnJvbnQubmV0L2Fzc2V0cy9Qcm94aW1hTm92YVJlZ3VsYXItMzY2ZDE3NzY5ZDg2NGFhNzJmMjdkZWZhZGRmNTkxZTQ2MGExZGU0OTg0YmIyNGRhY2VhNTdhOWZjMWQxNDg3OC5lb3Q/aG9zdD1zdGF0dXMuYml0YnVja2V0Lm9yZyNpZWZpeCcpIGZvcm1hdCgnZW1iZWRkZWQtb3BlbnR5cGUnKSwKICAgICAgICAgdXJsKCdodHRwczovL2RrYTU3NW9mbTRhbzAuY2xvdWRmcm9udC5uZXQvYXNzZXRzL1Byb3hpbWFOb3ZhUmVndWxhci0yZWU0YzQ0OWE5ZWQ3MTZmMWQ4ODIwN2JkMTA5NGUyMWI2OWUyODE4YjVjZDM2YjI4YWQ4MDlkYzE5MjRlYzU0LndvZmY/aG9zdD1zdGF0dXMuYml0YnVja2V0Lm9yZycpIGZvcm1hdCgnd29mZicpLAogICAgICAgICB1cmwoJ2h0dHBzOi8vZGthNTc1b2ZtNGFvMC5jbG91ZGZyb250Lm5ldC9hc3NldHMvUHJveGltYU5vdmFSZWd1bGFyLWE0MGE0NjllZGJkMjdiNjViODQ1YjgwMDBkNDc0NDVhMTdkZWY4YmE2NzdmNGViODM2YWQxODA4Zjc0OTUxNzMudHRmP2hvc3Q9c3RhdHVzLmJpdGJ1Y2tldC5vcmcnKSBmb3JtYXQoJ3RydWV0eXBlJyk7CiAgICBmb250LXdlaWdodDo0MDA7CiAgICBmb250LXN0eWxlOm5vcm1hbDsKICB9CiAgIAogIEBmb250LWZhY2UgewogICAgZm9udC1mYW1pbHk6ICdwcm94aW1hLW5vdmEnOwogICAgc3JjOiB1cmwoJ2h0dHBzOi8vZGthNTc1b2ZtNGFvMC5jbG91ZGZyb250Lm5ldC9hc3NldHMvUHJveGltYU5vdmFSZWd1bGFySXQtMGJmODNhODUwYjQ1ZTRjY2RhMTViZDA0NjkxZTNjNDdhZTg0ZmVjMzU4ODM2M2I1MzYxOGJkMjc1YTk4Y2JiNy5lb3Q/aG9zdD1zdGF0dXMuYml0YnVja2V0Lm9yZycpOwogICAgc3JjOiB1cmwoJ2h0dHBzOi8vZGthNTc1b2ZtNGFvMC5jbG91ZGZyb250Lm5ldC9hc3NldHMvUHJveGltYU5vdmFSZWd1bGFySXQtMGJmODNhODUwYjQ1ZTRjY2RhMTViZDA0NjkxZTNjNDdhZTg0ZmVjMzU4ODM2M2I1MzYxOGJkMjc1YTk4Y2JiNy5lb3Q/aG9zdD1zdGF0dXMuYml0YnVja2V0Lm9yZyNpZWZpeCcpIGZvcm1hdCgnZW1iZWRkZWQtb3BlbnR5cGUnKSwKICAgICAgICAgdXJsKCdodHRwczovL2RrYTU3NW9mbTRhbzAuY2xvdWRmcm9udC5uZXQvYXNzZXRzL1Byb3hpbWFOb3ZhUmVndWxhckl0LTBjMzk0ZWM3YTExMWFhNzkyOGVhNDcwZWMwYTY3YzQ0ZWJkYWEwZjkzZDFjMzM0MWFiYjY5NjU2Y2MyNmNiZGQud29mZj9ob3N0PXN0YXR1cy5iaXRidWNrZXQub3JnJykgZm9ybWF0KCd3b2ZmJyksCiAgICAgICAgIHVybCgnaHR0cHM6Ly9ka2E1NzVvZm00YW8wLmNsb3VkZnJvbnQubmV0L2Fzc2V0cy9Qcm94aW1hTm92YVJlZ3VsYXJJdC05ZTQzODU5ZjgwMTVhNGQ0N2Q5ZWFmN2JhZmU4ZDFlMjZlMzI5ODc5NWNlMWY0Y2RiMGJlMDQ3OWI4YTQ2MDVlLnR0Zj9ob3N0PXN0YXR1cy5iaXRidWNrZXQub3JnJykgZm9ybWF0KCd0cnVldHlwZScpOwogICAgZm9udC13ZWlnaHQ6NDAwOwogICAgZm9udC1zdHlsZTppdGFsaWM7CiAgfQogICAKICBAZm9udC1mYWNlIHsKICAgIGZvbnQtZmFtaWx5OiAncHJveGltYS1ub3ZhJzsKICAgIHNyYzogdXJsKCdodHRwczovL2RrYTU3NW9mbTRhbzAuY2xvdWRmcm9udC5uZXQvYXNzZXRzL1Byb3hpbWFOb3ZhU2VtaWJvbGQtMDk1NjY5MTczMDcyNTFkMjIwMjFhM2Y5MWZjNjQ2ZjNlNDVmOGQwOTUyMDliY2QyY2RlZDhhMTk3OWYwNmU1NC5lb3Q/aG9zdD1zdGF0dXMuYml0YnVja2V0Lm9yZycpOwogICAgc3JjOiB1cmwoJ2h0dHBzOi8vZGthNTc1b2ZtNGFvMC5jbG91ZGZyb250Lm5ldC9hc3NldHMvUHJveGltYU5vdmFTZW1pYm9sZC0wOTU2NjkxNzMwNzI1MWQyMjAyMWEzZjkxZmM2NDZmM2U0NWY4ZDA5NTIwOWJjZDJjZGVkOGExOTc5ZjA2ZTU0LmVvdD9ob3N0PXN0YXR1cy5iaXRidWNrZXQub3JnI2llZml4JykgZm9ybWF0KCdlbWJlZGRlZC1vcGVudHlwZScpLAogICAgICAgICB1cmwoJ2h0dHBzOi8vZGthNTc1b2ZtNGFvMC5jbG91ZGZyb250Lm5ldC9hc3NldHMvUHJveGltYU5vdmFTZW1pYm9sZC04NjcyNGZiMjE1MjYxM2Q3MzViYTQ3YzNmNDdhOWFkMjQyNGI4OThiZWE0YmVjZTIxM2RhY2VlNDAzNDRmOTY2LndvZmY/aG9zdD1zdGF0dXMuYml0YnVja2V0Lm9yZycpIGZvcm1hdCgnd29mZicpLAogICAgICAgICB1cmwoJ2h0dHBzOi8vZGthNTc1b2ZtNGFvMC5jbG91ZGZyb250Lm5ldC9hc3NldHMvUHJveGltYU5vdmFTZW1pYm9sZC1jZjNlNGViN2ZiZGY2ZmI4M2U1MjZjYzJhMDE0MWU1NWIwMTA5N2U2ZTFhYmZkNGNiZGMzZWRhNzVkMTgzZjc0LnR0Zj9ob3N0PXN0YXR1cy5iaXRidWNrZXQub3JnJykgZm9ybWF0KCd0cnVldHlwZScpOwogICAgZm9udC13ZWlnaHQ6NTAwOwogICAgZm9udC1zdHlsZTpub3JtYWw7CiAgfQogICAKICBAZm9udC1mYWNlIHsKICAgIGZvbnQtZmFtaWx5OiAncHJveGltYS1ub3ZhJzsKICAgIHNyYzogdXJsKCdodHRwczovL2RrYTU3NW9mbTRhbzAuY2xvdWRmcm9udC5uZXQvYXNzZXRzL1Byb3hpbWFOb3ZhQm9sZC02MjJlYTQ4OWQyMGUxMmU2OTE2NjNmODMyMTcxMDVlOTU3ZTJkM2QwOTcwMzcwN2Q0MDE1NWEyOWMwNmNjOWQ5LmVvdD9ob3N0PXN0YXR1cy5iaXRidWNrZXQub3JnJyk7CiAgICBzcmM6IHVybCgnaHR0cHM6Ly9ka2E1NzVvZm00YW8wLmNsb3VkZnJvbnQubmV0L2Fzc2V0cy9Qcm94aW1hTm92YUJvbGQtNjIyZWE0ODlkMjBlMTJlNjkxNjYzZjgzMjE3MTA1ZTk1N2UyZDNkMDk3MDM3MDdkNDAxNTVhMjljMDZjYzlkOS5lb3Q/aG9zdD1zdGF0dXMuYml0YnVja2V0Lm9yZyNpZWZpeCcpIGZvcm1hdCgnZW1iZWRkZWQtb3BlbnR5cGUnKSwKICAgICAgICAgdXJsKCdodHRwczovL2RrYTU3NW9mbTRhbzAuY2xvdWRmcm9udC5uZXQvYXNzZXRzL1Byb3hpbWFOb3ZhQm9sZC1jOGRjNTc3ZmY3Zjc2ZDJmYzE5OTg0M2UzOGMwNGJiMmU5ZmQxNTg4OTQyMTM1OGQ5NjZhOWY4NDZjMmVkMWNkLndvZmY/aG9zdD1zdGF0dXMuYml0YnVja2V0Lm9yZycpIGZvcm1hdCgnd29mZicpLAogICAgICAgICB1cmwoJ2h0dHBzOi8vZGthNTc1b2ZtNGFvMC5jbG91ZGZyb250Lm5ldC9hc3NldHMvUHJveGltYU5vdmFCb2xkLTI3MTc3ZmU5MjQyYWNiZTA4OTI3NmVlNTg3ZmVlZjc4MTQ0NjY2N2ZmZTliNmZkYzViN2ZlMjFhZDczZTEyZjMudHRmP2hvc3Q9c3RhdHVzLmJpdGJ1Y2tldC5vcmcnKSBmb3JtYXQoJ3RydWV0eXBlJyk7CiAgICBmb250LXdlaWdodDo3MDA7CiAgICBmb250LXN0eWxlOm5vcm1hbDsKICB9Cjwvc3R5bGU+CgoKICAgIDxsaW5rIHJlbD0iYXBwbGUtdG91Y2gtaWNvbi1wcmVjb21wb3NlZCIgc2l6ZXM9IjE0NHgxNDQiIGhyZWY9Imh0dHBzOi8vZGthNTc1b2ZtNGFvMC5jbG91ZGZyb250Lm5ldC9hc3NldHMvYmFzZS9hcHBsZS10b3VjaC1pY29uLTE0NHgxNDQtcHJlY29tcG9zZWQtN2QzMDk3NzYzZmUxNTQwOTRhMDU4MzJhNzgxOTg0NzJjMTk5ODdjMjM3NTU5ZTg0MTczMzg3MTBiMGU4NTIzZC5wbmciIC8+CiAgICA8bGluayByZWw9ImFwcGxlLXRvdWNoLWljb24tcHJlY29tcG9zZWQiIHNpemVzPSIxMTR4MTE0IiBocmVmPSJodHRwczovL2RrYTU3NW9mbTRhbzAuY2xvdWRmcm9udC5uZXQvYXNzZXRzL2Jhc2UvYXBwbGUtdG91Y2gtaWNvbi0xMTR4MTE0LXByZWNvbXBvc2VkLTIyYzE2NmIzYzNmYWYxNzFmNGVkNDk3ZjlhY2MyZTE3OThkYTg1ZjJiZDZhZDQxOWNkYjM4YmM0OWNjZGIxN2YucG5nIiAvPgogICAgPGxpbmsgcmVsPSJhcHBsZS10b3VjaC1pY29uLXByZWNvbXBvc2VkIiBzaXplcz0iNzJ4NzIiIGhyZWY9Imh0dHBzOi8vZGthNTc1b2ZtNGFvMC5jbG91ZGZyb250Lm5ldC9hc3NldHMvYmFzZS9hcHBsZS10b3VjaC1pY29uLTcyeDcyLXByZWNvbXBvc2VkLTBhMDAwMjgwYjliMTUwMmZmMTQxYTU0ZjQyMTA3OTA2YTJjNGQ2NTU3ZjVjYWY5N2EwNGM2ZTZkMmY0NGUzYjYucG5nIiAvPgogICAgPGxpbmsgcmVsPSJhcHBsZS10b3VjaC1pY29uLXByZWNvbXBvc2VkIiBocmVmPSJodHRwczovL2RrYTU3NW9mbTRhbzAuY2xvdWRmcm9udC5uZXQvYXNzZXRzL2Jhc2UvYXBwbGUtdG91Y2gtaWNvbi01N3g1Ny1wcmVjb21wb3NlZC03YTM1MjU5MzMzNmRlMjRhOWFjMTljZWMxY2Q2MGFlNWVmNTBmYzhmODQzNjVjZWJiNjY1ZGI3MjIyZGI0NzZkLnBuZyIgLz4KCiAgICA8bGluayByZWw9InNob3J0Y3V0IGljb24iIGhyZWY9Jy8vZGthNTc1b2ZtNGFvMC5jbG91ZGZyb250Lm5ldC9wYWdlcy1mYXZpY29uX2xvZ29zL29yaWdpbmFsLzE3MjQvdTdTR0o2TVNvZXhjc2lnN01ZbFknPgoKICAgIDxsaW5rIHJlbD0iYWx0ZXJuYXRlIiB0eXBlPSJhcHBsaWNhdGlvbi9hdG9tK3htbCIgaHJlZj0iaHR0cHM6Ly9zdGF0dXMuYml0YnVja2V0Lm9yZy9oaXN0b3J5LmF0b20iIHRpdGxlPSJBdGxhc3NpYW4gQml0YnVja2V0IFN0YXR1cyBIaXN0b3J5IC0gQXRvbSBGZWVkIj4KICAgIDxsaW5rIHJlbD0iYWx0ZXJuYXRlIiB0eXBlPSJhcHBsaWNhdGlvbi9yc3MreG1sIiBocmVmPSJodHRwczovL3N0YXR1cy5iaXRidWNrZXQub3JnL2hpc3RvcnkucnNzIiB0aXRsZT0iQXRsYXNzaWFuIEJpdGJ1Y2tldCBTdGF0dXMgSGlzdG9yeSAtIFJTUyBGZWVkIj4KCiAgICA8bWV0YSBuYW1lPSJfZ2xvYmFsc2lnbi1kb21haW4tdmVyaWZpY2F0aW9uIiBjb250ZW50PSJ5X1Z6ZmNrTXk0aWVQbzVvREpOaXZ5WUlqaDhMZmZZYTRqelVuZG1fYloiLz4KCgogICAgPGxpbmsgcmVsPSJhbHRlcm5hdGUiIHR5cGU9ImFwcGxpY2F0aW9uL2F0b20reG1sIiB0aXRsZT0iQVRPTSIgaHJlZj0iaHR0cHM6Ly9zdGF0dXMuYml0YnVja2V0Lm9yZy9oaXN0b3J5LmF0b20iIC8+CgogICAgPG1ldGEgbmFtZT0iY3NyZi1wYXJhbSIgY29udGVudD0iYXV0aGVudGljaXR5X3Rva2VuIiAvPgo8bWV0YSBuYW1lPSJjc3JmLXRva2VuIiBjb250ZW50PSJnU0JST2J6R1FDY2QvalJoOVNVSDVJOGVUaWZ1Szg5a1lpWVZWRG1XZkw2b1ZrUEU4Qnd1M1NEZE83UGNsS3dLWnhkNXp3bFRJdGQzTWhkSXRiejFRUT09IiAvPgoKICAgIDwhLS0gTGUgc3R5bGVzIC0tPgogICAgCiAgICA8bGluayByZWw9InN0eWxlc2hlZXQiIG1lZGlhPSJhbGwiIGhyZWY9Imh0dHBzOi8vZGthNTc1b2ZtNGFvMC5jbG91ZGZyb250Lm5ldC9hc3NldHMvc3RhdHVzX21hbmlmZXN0LTlkMDZkNmJmZDM2YTQ2MGZmNjU3MGQ3ZGUyZmYwODgyYTAzZjFmNjdjNzZmMGI4ZGU1MmFiMzg3MzZjZWNkMTcuY3NzIiAvPgoKICAgICAgPHNjcmlwdCBzcmM9Ii8vYWpheC5nb29nbGVhcGlzLmNvbS9hamF4L2xpYnMvanF1ZXJ5LzEuOC4yL2pxdWVyeS5taW4uanMiPjwvc2NyaXB0PgoKICAgIDxzY3JpcHQ+CiAgICAgIHdpbmRvdy5wYWdlQ29sb3JEYXRhID0geyJibHVlIjoiIzM0OThEQiIsImJvcmRlciI6IiNjY2NjY2MiLCJib2R5X2JhY2tncm91bmQiOiIjZmZmZmZmIiwiZm9udCI6IiMzMzMzMzMiLCJncmFwaCI6IiMzYjczYWYiLCJncmVlbiI6IiMxNDg5MmMiLCJsaWdodF9mb250IjoiIzcwNzA3MCIsImxpbmsiOiIjM2I3M2FmIiwib3JhbmdlIjoiI2U2N2UyMiIsInJlZCI6IiNkMDQ0MzciLCJ5ZWxsb3ciOiIjZmZkMzUxIn07CiAgICA8L3NjcmlwdD4KICAgIDxzdHlsZT4KCgoKCiAgLyogQk9EWSBCQUNLR1JPVU5EICovIC8qIEJPRFkgQkFDS0dST1VORCAqLyAvKiBCT0RZIEJBQ0tHUk9VTkQgKi8gLyogQk9EWSBCQUNLR1JPVU5EICovIC8qIEJPRFkgQkFDS0dST1VORCAqLwogIGJvZHksCiAgLmxheW91dC1jb250ZW50LnN0YXR1cy5zdGF0dXMtYXBpIC5zZWN0aW9uIC5leGFtcGxlLWNvbnRhaW5lciAuZXhhbXBsZS1vcGVuZXIgLmNvbG9yLXNlY29uZGFyeSwKICAuZ3JvdXBlZC1pdGVtcy1zZWxlY3RvciwKICAubGF5b3V0LWNvbnRlbnQuc3RhdHVzLnN0YXR1cy1mdWxsLWhpc3RvcnkgLmhpc3RvcnktbmF2IGEuY3VycmVudCB7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiNmZmZmZmY7CiAgfQoKCgoKCiAgLyogUFJJTUFSWSBGT05UIENPTE9SICovIC8qIFBSSU1BUlkgRk9OVCBDT0xPUiAqLyAvKiBQUklNQVJZIEZPTlQgQ09MT1IgKi8gLyogUFJJTUFSWSBGT05UIENPTE9SICovCiAgYm9keS5zdGF0dXMsCiAgLmNvbG9yLXByaW1hcnksCiAgLmNvbG9yLXByaW1hcnk6aG92ZXIsCiAgLmxheW91dC1jb250ZW50LnN0YXR1cy1pbmRleCAuc3RhdHVzLWRheSAudXBkYXRlLXRpdGxlLmltcGFjdC1ub25lIGEsCiAgLmxheW91dC1jb250ZW50LnN0YXR1cy1pbmRleCAuc3RhdHVzLWRheSAudXBkYXRlLXRpdGxlLmltcGFjdC1ub25lIGE6aG92ZXIsCiAgLmxheW91dC1jb250ZW50LnN0YXR1cy1pbmRleCAudGltZWZyYW1lcy1jb250YWluZXIgLnRpbWVmcmFtZS5hY3RpdmUsCiAgLmxheW91dC1jb250ZW50LnN0YXR1cy1mdWxsLWhpc3RvcnkgLm1vbnRoIC5pbmNpZGVudC1jb250YWluZXIgLmltcGFjdC1ub25lLAogIC5sYXlvdXQtY29udGVudC5zdGF0dXMuc3RhdHVzLWluZGV4IC5pbmNpZGVudHMtbGlzdCAuaW5jaWRlbnQtdGl0bGUuaW1wYWN0LW5vbmUgYSwKICAuaW5jaWRlbnQtaGlzdG9yeSAuaW1wYWN0LW5vbmUsCiAgLmxheW91dC1jb250ZW50LnN0YXR1cyAuZ3JvdXBlZC1pdGVtcy1zZWxlY3Rvci5pbmxpbmUgLmdyb3VwZWQtaXRlbS5hY3RpdmUsCiAgLmxheW91dC1jb250ZW50LnN0YXR1cy5zdGF0dXMtZnVsbC1oaXN0b3J5IC5oaXN0b3J5LW5hdiBhLmN1cnJlbnQsCiAgLmxheW91dC1jb250ZW50LnN0YXR1cy5zdGF0dXMtZnVsbC1oaXN0b3J5IC5oaXN0b3J5LW5hdiBhOm5vdCguY3VycmVudCk6aG92ZXIgewogICAgY29sb3I6IzMzMzMzMzsKICB9CgogIC5sYXlvdXQtY29udGVudC5zdGF0dXMuc3RhdHVzLWluZGV4IC5jb21wb25lbnRzLXN0YXR1c2VzIC5jb21wb25lbnQtY29udGFpbmVyIC5uYW1lIHsKICAgIGNvbG9yOiMzMzMzMzM7CiAgICBjb2xvcjpyZ2JhKDUxLDUxLDUxLC44KTsKICB9CgoKCgoKCiAgLyogU0VDT05EQVJZIEZPTlQgQ09MT1IgKi8gLyogU0VDT05EQVJZIEZPTlQgQ09MT1IgKi8gLyogU0VDT05EQVJZIEZPTlQgQ09MT1IgKi8gLyogU0VDT05EQVJZIEZPTlQgQ09MT1IgKi8KICBzbWFsbCwKICAubGF5b3V0LWNvbnRlbnQuc3RhdHVzIC50YWJsZS1yb3cgLmRhdGUsCiAgLmNvbG9yLXNlY29uZGFyeSwKICAubGF5b3V0LWNvbnRlbnQuc3RhdHVzIC5ncm91cGVkLWl0ZW1zLXNlbGVjdG9yLmlubGluZSAuZ3JvdXBlZC1pdGVtLAogIC5sYXlvdXQtY29udGVudC5zdGF0dXMuc3RhdHVzLWZ1bGwtaGlzdG9yeSAuaGlzdG9yeS1mb290ZXIgLnBhZ2luYXRpb24gYS5kaXNhYmxlZCwKICAubGF5b3V0LWNvbnRlbnQuc3RhdHVzLnN0YXR1cy1mdWxsLWhpc3RvcnkgLmhpc3RvcnktbmF2IGEgewogICAgY29sb3I6IzcwNzA3MDsKICB9CgoKCgoKCgoKCiAgLyogQk9SREVSIENPTE9SICovICAvKiBCT1JERVIgQ09MT1IgKi8gIC8qIEJPUkRFUiBDT0xPUiAqLyAgLyogQk9SREVSIENPTE9SICovICAvKiBCT1JERVIgQ09MT1IgKi8gIC8qIEJPUkRFUiBDT0xPUiAqLwogIGJvZHkuc3RhdHVzIC5sYXlvdXQtY29udGVudC5zdGF0dXMgLmJvcmRlci1jb2xvciwgaHIsIC50b29sdGlwLWJhc2UsIC5tYXJrZG93bi1kaXNwbGF5IHRhYmxlIHsKICAgIGJvcmRlci1jb2xvcjojY2NjY2NjOwogIH0KCiAgLm1hcmtkb3duLWRpc3BsYXkgdGFibGUgdGQgewogICAgYm9yZGVyLXRvcC1jb2xvcjojY2NjY2NjOwogIH0KCiAgLm1hcmtkb3duLWRpc3BsYXkgdGFibGUgdGQgKyB0ZCwgLm1hcmtkb3duLWRpc3BsYXkgdGFibGUgdGggKyB0aCB7CiAgICBib3JkZXItbGVmdC1jb2xvcjojY2NjY2NjOwogIH0KCgoKCgoKICAvKiBDU1MgUkVEUyAqLyAvKiBDU1MgUkVEUyAqLyAvKiBDU1MgUkVEUyAqLyAvKiBDU1MgUkVEUyAqLyAvKiBDU1MgUkVEUyAqLyAvKiBDU1MgUkVEUyAqLyAvKiBDU1MgUkVEUyAqLwogIC5sYXlvdXQtY29udGVudC5zdGF0dXMuc3RhdHVzLWluZGV4IC5zdGF0dXMtZGF5IC51cGRhdGUtdGl0bGUuaW1wYWN0LWNyaXRpY2FsIGEsCiAgLmxheW91dC1jb250ZW50LnN0YXR1cy5zdGF0dXMtaW5kZXggLnN0YXR1cy1kYXkgLnVwZGF0ZS10aXRsZS5pbXBhY3QtY3JpdGljYWwgYTpob3ZlciwKICAubGF5b3V0LWNvbnRlbnQuc3RhdHVzLnN0YXR1cy1pbmRleCAucGFnZS1zdGF0dXMuc3RhdHVzLWNyaXRpY2FsLAogIC5sYXlvdXQtY29udGVudC5zdGF0dXMuc3RhdHVzLWluZGV4IC51bnJlc29sdmVkLWluY2lkZW50LmltcGFjdC1jcml0aWNhbCAuaW5jaWRlbnQtdGl0bGUsCiAgLmZsYXQtYnV0dG9uLmJhY2tncm91bmQtcmVkIHsKICAgIGJhY2tncm91bmQtY29sb3I6I2QwNDQzNzsKICB9CiAgLmxheW91dC1jb250ZW50LnN0YXR1cy1pbmRleCAuY29tcG9uZW50cy1zdGF0dXNlcyAuY29tcG9uZW50LWNvbnRhaW5lci5zdGF0dXMtcmVkOmFmdGVyLAogIC5sYXlvdXQtY29udGVudC5zdGF0dXMtZnVsbC1oaXN0b3J5IC5tb250aCAuaW5jaWRlbnQtY29udGFpbmVyIC5pbXBhY3QtY3JpdGljYWwsCiAgLmxheW91dC1jb250ZW50LnN0YXR1cy1pbmNpZGVudCAuaW5jaWRlbnQtbmFtZS5pbXBhY3QtY3JpdGljYWwsCiAgLmxheW91dC1jb250ZW50LnN0YXR1cy5zdGF0dXMtaW5kZXggLmluY2lkZW50cy1saXN0IC5pbmNpZGVudC10aXRsZS5pbXBhY3QtY3JpdGljYWwgYSwKICAuc3RhdHVzLXJlZCAuaWNvbi1pbmRpY2F0b3IsCiAgLmluY2lkZW50LWhpc3RvcnkgLmltcGFjdC1jcml0aWNhbCwKICAuY29tcG9uZW50cy1jb250YWluZXIgLmNvbXBvbmVudC1pbm5lci1jb250YWluZXIuc3RhdHVzLXJlZCAuY29tcG9uZW50LXN0YXR1cywKICAuY29tcG9uZW50cy1jb250YWluZXIgLmNvbXBvbmVudC1pbm5lci1jb250YWluZXIuc3RhdHVzLXJlZCAuaWNvbi1pbmRpY2F0b3IgewogICAgY29sb3I6I2QwNDQzNzsKICB9CgogIC5sYXlvdXQtY29udGVudC5zdGF0dXMuc3RhdHVzLWluZGV4IC51bnJlc29sdmVkLWluY2lkZW50LmltcGFjdC1jcml0aWNhbCAudXBkYXRlcyB7CiAgICBib3JkZXItY29sb3I6I2QwNDQzNzsKICB9CgoKCgoKCiAgLyogQ1NTIE9SQU5HRVMgKi8gLyogQ1NTIE9SQU5HRVMgKi8gLyogQ1NTIE9SQU5HRVMgKi8gLyogQ1NTIE9SQU5HRVMgKi8gLyogQ1NTIE9SQU5HRVMgKi8gLyogQ1NTIE9SQU5HRVMgKi8KICAubGF5b3V0LWNvbnRlbnQuc3RhdHVzLnN0YXR1cy1pbmRleCAuc3RhdHVzLWRheSAudXBkYXRlLXRpdGxlLmltcGFjdC1tYWpvciBhLAogIC5sYXlvdXQtY29udGVudC5zdGF0dXMuc3RhdHVzLWluZGV4IC5zdGF0dXMtZGF5IC51cGRhdGUtdGl0bGUuaW1wYWN0LW1ham9yIGE6aG92ZXIsCiAgLmxheW91dC1jb250ZW50LnN0YXR1cy5zdGF0dXMtaW5kZXggLnBhZ2Utc3RhdHVzLnN0YXR1cy1tYWpvciwKICAubGF5b3V0LWNvbnRlbnQuc3RhdHVzLnN0YXR1cy1pbmRleCAudW5yZXNvbHZlZC1pbmNpZGVudC5pbXBhY3QtbWFqb3IgLmluY2lkZW50LXRpdGxlIHsKICAgIGJhY2tncm91bmQtY29sb3I6I2U2N2UyMjsKICB9CiAgLmxheW91dC1jb250ZW50LnN0YXR1cy1pbmRleCAuY29tcG9uZW50cy1zdGF0dXNlcyAuY29tcG9uZW50LWNvbnRhaW5lci5zdGF0dXMtb3JhbmdlOmFmdGVyLAogIC5sYXlvdXQtY29udGVudC5zdGF0dXMtZnVsbC1oaXN0b3J5IC5tb250aCAuaW5jaWRlbnQtY29udGFpbmVyIC5pbXBhY3QtbWFqb3IsCiAgLmxheW91dC1jb250ZW50LnN0YXR1cy1pbmNpZGVudCAuaW5jaWRlbnQtbmFtZS5pbXBhY3QtbWFqb3IsCiAgLmxheW91dC1jb250ZW50LnN0YXR1cy5zdGF0dXMtaW5kZXggLmluY2lkZW50cy1saXN0IC5pbmNpZGVudC10aXRsZS5pbXBhY3QtbWFqb3IgYSwKICAuc3RhdHVzLW9yYW5nZSAuaWNvbi1pbmRpY2F0b3IsCiAgLmluY2lkZW50LWhpc3RvcnkgLmltcGFjdC1tYWpvciwKICAuY29tcG9uZW50cy1jb250YWluZXIgLmNvbXBvbmVudC1pbm5lci1jb250YWluZXIuc3RhdHVzLW9yYW5nZSAuY29tcG9uZW50LXN0YXR1cywKICAuY29tcG9uZW50cy1jb250YWluZXIgLmNvbXBvbmVudC1pbm5lci1jb250YWluZXIuc3RhdHVzLW9yYW5nZSAuaWNvbi1pbmRpY2F0b3IgewogICAgY29sb3I6I2U2N2UyMjsKICB9CgogIC5sYXlvdXQtY29udGVudC5zdGF0dXMuc3RhdHVzLWluZGV4IC51bnJlc29sdmVkLWluY2lkZW50LmltcGFjdC1tYWpvciAudXBkYXRlcyB7CiAgICBib3JkZXItY29sb3I6I2U2N2UyMjsKICB9CgoKCgoKCgovKiBDU1MgWUVMTE9XUyAqLyAvKiBDU1MgWUVMTE9XUyAqLyAvKiBDU1MgWUVMTE9XUyAqLyAvKiBDU1MgWUVMTE9XUyAqLyAvKiBDU1MgWUVMTE9XUyAqLyAvKiBDU1MgWUVMTE9XUyAqLwogIC5sYXlvdXQtY29udGVudC5zdGF0dXMuc3RhdHVzLWluZGV4IC5zdGF0dXMtZGF5IC51cGRhdGUtdGl0bGUuaW1wYWN0LW1pbm9yIGEsCiAgLmxheW91dC1jb250ZW50LnN0YXR1cy5zdGF0dXMtaW5kZXggLnN0YXR1cy1kYXkgLnVwZGF0ZS10aXRsZS5pbXBhY3QtbWlub3IgYTpob3ZlciwKICAubGF5b3V0LWNvbnRlbnQuc3RhdHVzLnN0YXR1cy1pbmRleCAucGFnZS1zdGF0dXMuc3RhdHVzLW1pbm9yLAogIC5sYXlvdXQtY29udGVudC5zdGF0dXMuc3RhdHVzLWluZGV4IC51bnJlc29sdmVkLWluY2lkZW50LmltcGFjdC1taW5vciAuaW5jaWRlbnQtdGl0bGUsCiAgLmxheW91dC1jb250ZW50LnN0YXR1cy5zdGF0dXMtaW5kZXggLnNjaGVkdWxlZC1pbmNpZGVudHMtY29udGFpbmVyIC50YWIgewogICAgYmFja2dyb3VuZC1jb2xvcjojZmZkMzUxOwogIH0KICAubGF5b3V0LWNvbnRlbnQuc3RhdHVzLWluZGV4IC5jb21wb25lbnRzLXN0YXR1c2VzIC5jb21wb25lbnQtY29udGFpbmVyLnN0YXR1cy15ZWxsb3c6YWZ0ZXIsCiAgLmxheW91dC1jb250ZW50LnN0YXR1cy1mdWxsLWhpc3RvcnkgLm1vbnRoIC5pbmNpZGVudC1jb250YWluZXIgLmltcGFjdC1taW5vciwKICAubGF5b3V0LWNvbnRlbnQuc3RhdHVzLWluY2lkZW50IC5pbmNpZGVudC1uYW1lLmltcGFjdC1taW5vciwKICAubGF5b3V0LWNvbnRlbnQuc3RhdHVzLnN0YXR1cy1pbmRleCAuaW5jaWRlbnRzLWxpc3QgLmluY2lkZW50LXRpdGxlLmltcGFjdC1taW5vciBhLAogIC5zdGF0dXMteWVsbG93IC5pY29uLWluZGljYXRvciwKICAuaW5jaWRlbnQtaGlzdG9yeSAuaW1wYWN0LW1pbm9yLAogIC5jb21wb25lbnRzLWNvbnRhaW5lciAuY29tcG9uZW50LWlubmVyLWNvbnRhaW5lci5zdGF0dXMteWVsbG93IC5jb21wb25lbnQtc3RhdHVzLAogIC5jb21wb25lbnRzLWNvbnRhaW5lciAuY29tcG9uZW50LWlubmVyLWNvbnRhaW5lci5zdGF0dXMteWVsbG93IC5pY29uLWluZGljYXRvciwKICAubGF5b3V0LWNvbnRlbnQuc3RhdHVzLm1hbmFnZS1zdWJzY3JpcHRpb25zIC5jb25maXJtYXRpb24taW5mb2JveCAuZmEgewogICAgY29sb3I6I2ZmZDM1MTsKICB9CgogIC5sYXlvdXQtY29udGVudC5zdGF0dXMuc3RhdHVzLWluZGV4IC51bnJlc29sdmVkLWluY2lkZW50LmltcGFjdC1taW5vciAudXBkYXRlcywKICAubGF5b3V0LWNvbnRlbnQuc3RhdHVzLnN0YXR1cy1pbmRleCAuc2NoZWR1bGVkLWluY2lkZW50cy1jb250YWluZXIgewogICAgYm9yZGVyLWNvbG9yOiNmZmQzNTE7CiAgfQoKCgoKCgovKiBDU1MgQkxVRVMgKi8gLyogQ1NTIEJMVUVTICovIC8qIENTUyBCTFVFUyAqLyAvKiBDU1MgQkxVRVMgKi8gLyogQ1NTIEJMVUVTICovIC8qIENTUyBCTFVFUyAqLwogIC5sYXlvdXQtY29udGVudC5zdGF0dXMuc3RhdHVzLWluZGV4IC5zdGF0dXMtZGF5IC51cGRhdGUtdGl0bGUuaW1wYWN0LW1haW50ZW5hbmNlIGEsCiAgLmxheW91dC1jb250ZW50LnN0YXR1cy5zdGF0dXMtaW5kZXggLnN0YXR1cy1kYXkgLnVwZGF0ZS10aXRsZS5pbXBhY3QtbWFpbnRlbmFuY2UgYTpob3ZlciwKICAubGF5b3V0LWNvbnRlbnQuc3RhdHVzLnN0YXR1cy1pbmRleCAucGFnZS1zdGF0dXMuc3RhdHVzLW1haW50ZW5hbmNlLAogIC5sYXlvdXQtY29udGVudC5zdGF0dXMuc3RhdHVzLWluZGV4IC51bnJlc29sdmVkLWluY2lkZW50LmltcGFjdC1tYWludGVuYW5jZSAuaW5jaWRlbnQtdGl0bGUsCiAgLmxheW91dC1jb250ZW50LnN0YXR1cy5zdGF0dXMtaW5kZXggLnNjaGVkdWxlZC1pbmNpZGVudHMtY29udGFpbmVyIC50YWIgewogICAgYmFja2dyb3VuZC1jb2xvcjojMzQ5OERCOwogIH0KCiAgLmxheW91dC1jb250ZW50LnN0YXR1cy1pbmRleCAuY29tcG9uZW50cy1zdGF0dXNlcyAuY29tcG9uZW50LWNvbnRhaW5lci5zdGF0dXMtYmx1ZTphZnRlciwKICAubGF5b3V0LWNvbnRlbnQuc3RhdHVzLWZ1bGwtaGlzdG9yeSAubW9udGggLmluY2lkZW50LWNvbnRhaW5lciAuaW1wYWN0LW1haW50ZW5hbmNlLAogIC5sYXlvdXQtY29udGVudC5zdGF0dXMtaW5jaWRlbnQgLmluY2lkZW50LW5hbWUuaW1wYWN0LW1haW50ZW5hbmNlLAogIC5sYXlvdXQtY29udGVudC5zdGF0dXMuc3RhdHVzLWluZGV4IC5pbmNpZGVudHMtbGlzdCAuaW5jaWRlbnQtdGl0bGUuaW1wYWN0LW1haW50ZW5hbmNlIGEsCiAgLnN0YXR1cy1ibHVlIC5pY29uLWluZGljYXRvciwKICAuaW5jaWRlbnQtaGlzdG9yeSAuaW1wYWN0LW1haW50ZW5hbmNlLAogIC5jb21wb25lbnRzLWNvbnRhaW5lciAuY29tcG9uZW50LWlubmVyLWNvbnRhaW5lci5zdGF0dXMtYmx1ZSAuY29tcG9uZW50LXN0YXR1cywKICAuY29tcG9uZW50cy1jb250YWluZXIgLmNvbXBvbmVudC1pbm5lci1jb250YWluZXIuc3RhdHVzLWJsdWUgLmljb24taW5kaWNhdG9yIHsKICAgIGNvbG9yOiMzNDk4REI7CiAgfQoKICAubGF5b3V0LWNvbnRlbnQuc3RhdHVzLnN0YXR1cy1pbmRleCAudW5yZXNvbHZlZC1pbmNpZGVudC5pbXBhY3QtbWFpbnRlbmFuY2UgLnVwZGF0ZXMsCiAgLmxheW91dC1jb250ZW50LnN0YXR1cy5zdGF0dXMtaW5kZXggLnNjaGVkdWxlZC1pbmNpZGVudHMtY29udGFpbmVyIHsKICAgIGJvcmRlci1jb2xvcjojMzQ5OERCOwogIH0KCgoKCgogIC8qIENTUyBHUkVFTlMgKi8gLyogQ1NTIEdSRUVOUyAqLyAvKiBDU1MgR1JFRU5TICovIC8qIENTUyBHUkVFTlMgKi8gLyogQ1NTIEdSRUVOUyAqLyAvKiBDU1MgR1JFRU5TICovIC8qIENTUyBHUkVFTlMgKi8KICAubGF5b3V0LWNvbnRlbnQuc3RhdHVzLnN0YXR1cy1pbmRleCAucGFnZS1zdGF0dXMuc3RhdHVzLW5vbmUgewogICAgYmFja2dyb3VuZC1jb2xvcjojMTQ4OTJjOwogIH0KICAubGF5b3V0LWNvbnRlbnQuc3RhdHVzLWluZGV4IC5jb21wb25lbnRzLXN0YXR1c2VzIC5jb21wb25lbnQtY29udGFpbmVyLnN0YXR1cy1ncmVlbjphZnRlciwKICAuc3RhdHVzLWdyZWVuIC5pY29uLWluZGljYXRvciwKICAuY29tcG9uZW50cy1jb250YWluZXIgLmNvbXBvbmVudC1pbm5lci1jb250YWluZXIuc3RhdHVzLWdyZWVuIC5jb21wb25lbnQtc3RhdHVzLAogIC5jb21wb25lbnRzLWNvbnRhaW5lciAuY29tcG9uZW50LWlubmVyLWNvbnRhaW5lci5zdGF0dXMtZ3JlZW4gLmljb24taW5kaWNhdG9yIHsKICAgIGNvbG9yOiMxNDg5MmM7CiAgfQoKCgoKICAvKiBDU1MgTElOSyBDT0xPUiAqLyAgLyogQ1NTIExJTksgQ09MT1IgKi8gIC8qIENTUyBMSU5LIENPTE9SICovICAvKiBDU1MgTElOSyBDT0xPUiAqLyAgLyogQ1NTIExJTksgQ09MT1IgKi8gIC8qIENTUyBMSU5LIENPTE9SICovCiAgYSwKICBhOmhvdmVyLAogIC5sYXlvdXQtY29udGVudC5zdGF0dXMtaW5kZXggLnBhZ2UtZm9vdGVyIHNwYW4gYTpob3ZlciwKICAubGF5b3V0LWNvbnRlbnQuc3RhdHVzLWluZGV4IC50aW1lZnJhbWVzLWNvbnRhaW5lciAudGltZWZyYW1lOm5vdCguYWN0aXZlKTpob3ZlciwKICAubGF5b3V0LWNvbnRlbnQuc3RhdHVzLWluY2lkZW50IC5zdWJoZWFkZXIgYTpob3ZlciB7CiAgICBjb2xvcjojM2I3M2FmOwogIH0KICAuZmxhdC1idXR0b24sCiAgLm1hc3RoZWFkIC51cGRhdGVzLWRyb3Bkb3duLWNvbnRhaW5lciAuc2hvdy11cGRhdGVzLWRyb3Bkb3duLAogIC5sYXlvdXQtY29udGVudC5zdGF0dXMtZnVsbC1oaXN0b3J5IC5zaG93LWZpbHRlci5vcGVuICB7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiMzYjczYWY7CiAgfQoKICAvKiBDVVNUT00gQ09MT1IgT1ZFUlJJREVTIEZPUiBVUFRJTUUgU0hPV0NBU0UgKi8KICAuY29tcG9uZW50cy1zZWN0aW9uIC5jb21wb25lbnRzLXVwdGltZS1saW5rIHsKICAgIGNvbG9yOiAjNzA3MDcwOwogIH0KCiAgLmxheW91dC1jb250ZW50LnN0YXR1cyAuc2hhcmVkLXBhcnRpYWwudXB0aW1lLTkwLWRheXMtd3JhcHBlciAubGVnZW5kIC5sZWdlbmQtaXRlbSB7CiAgICBjb2xvcjogIzcwNzA3MDsKICAgIG9wYWNpdHk6IDAuODsKICB9CiAgLmxheW91dC1jb250ZW50LnN0YXR1cyAuc2hhcmVkLXBhcnRpYWwudXB0aW1lLTkwLWRheXMtd3JhcHBlciAubGVnZW5kIC5sZWdlbmQtaXRlbS5saWdodCB7CiAgICBjb2xvcjogIzcwNzA3MDsKICAgIG9wYWNpdHk6IDAuNTsKICB9CiAgLmxheW91dC1jb250ZW50LnN0YXR1cyAuc2hhcmVkLXBhcnRpYWwudXB0aW1lLTkwLWRheXMtd3JhcHBlciAubGVnZW5kIC5zcGFjZXIgewogICAgYmFja2dyb3VuZDogIzcwNzA3MDsKICAgIG9wYWNpdHk6IDAuMzsKICB9Cjwvc3R5bGU+CgoKICAgIDwhLS0gY3VzdG9tIGNzcyAtLT4KICAgICAgICA8bGluayByZWw9InN0eWxlc2hlZXQiIHR5cGU9InRleHQvY3NzIiBocmVmPSIvL2RrYTU3NW9mbTRhbzAuY2xvdWRmcm9udC5uZXQvcGFnZV9kaXNwbGF5X2N1c3RvbWl6YXRpb25zLWN1c3RvbV9jc3NfZXh0ZXJuYWxzLzIyMTAvZXh0ZXJuYWwyMDE3MDkxMS0xNDEtdHZoa2dsLmNzcyI+CgoKICAgIDwhLS0gTGUgSFRNTDUgc2hpbSAtLT4KICAgIDwhLS1baWYgbHQgSUUgOV0+CiAgICAgIDxzY3JpcHQgc3JjPSIvL2h0bWw1c2hpbS5nb29nbGVjb2RlLmNvbS9zdm4vdHJ1bmsvaHRtbDUuanMiPjwvc2NyaXB0PgogICAgPCFbZW5kaWZdLS0+CgogICAgPCEtLSBpbmplY3Rpb24gZm9yIHN0YXRpYyAtLT4KCgogICAgCiAgPC9oZWFkPgoKCiAgPGJvZHkgY2xhc3M9InN0YXR1cyBpbmRleCBzdGF0dXMtbm9uZSI+CgogICAgCgoKICA8ZGl2IGNsYXNzPSJzdGF0dXMtcGFnZS10b3VyLWluZm8iIGRhdGEtanMtaG9vaz0ic3RhdHVzLXBhZ2UtdG91ci1pbmZvIiBzdHlsZT0iZGlzcGxheTpub25lIj4KICA8ZGl2IGNsYXNzPSJjb250YWluZXIgaW5uZXIiPgogICAgV2VsY29tZSB0byB0aGUgZGVtbyBzdGF0dXMgcGFnZS4gPGEgaHJlZj0iIyIgZGF0YS1qcy1ob29rPSJyZXN0YXJ0LXRvdXIiPlRha2UgdGhlIHRvdXI8L2E+LgogIDwvZGl2Pgo8L2Rpdj4KCgogIDxkaXYgY2xhc3M9ImxheW91dC1jb250ZW50IHN0YXR1cyBzdGF0dXMtaW5kZXggc3RhcnRlciI+CiAgICAgIDxkaXYgY2xhc3M9ImN1c3RvbS1oZWFkZXItY29udGFpbmVyIj4KICAgIDxoZWFkZXIgaWQ9ImhlYWRlciI+DQogIDxuYXYgY2xhc3M9ImF1aS1oZWFkZXIiIHJvbGU9Im5hdmlnYXRpb24iPg0KICAgIDxoMSBjbGFzcz0iYXVpLWhlYWRlci1sb2dvIGF1aS1oZWFkZXItbG9nby1iaXRidWNrZXQgIj4NCiAgICAgIDxhIGhyZWY9Imh0dHBzOi8vYml0YnVja2V0Lm9yZy8iIGNsYXNzPSJhdWktbmF2LWltYWdlbGluayIgaWQ9ImxvZ28tbGluayI+DQogICAgICAgIDxzcGFuIGNsYXNzPSJhdWktaGVhZGVyLWxvZ28tZGV2aWNlIj5CaXRidWNrZXQ8L3NwYW4+DQogICAgICA8L2E+DQogICAgPC9oMT4NCiAgICA8dWwgY2xhc3M9ImF1aS1uYXYiPg0KICAgICAgPGxpPjxhIGhyZWY9Imh0dHA6Ly9ibG9nLmJpdGJ1Y2tldC5vcmciPkJsb2c8L2E+PC9saT4NCiAgICAgIDxsaT48YSBocmVmPSJodHRwczovL2JpdGJ1Y2tldC5vcmcvcHJvZHVjdC9wcmljaW5nIj5QcmljaW5nPC9hPjwvbGk+DQogICAgICA8bGk+PGEgaHJlZj0iaHR0cHM6Ly9iaXRidWNrZXQub3JnL2FjY291bnQvc2lnbmluLyI+TG9naW48L2E+PC9saT4NCiAgICAgIDxsaT48YSBjbGFzcz0iYnV0dG9uIiBocmVmPSJodHRwczovL2JpdGJ1Y2tldC5vcmcvYWNjb3VudC9zaWdudXAvIj5TaWduIFVwPC9hPjwvbGk+DQogICAgPC91bD4NCiAgICA8ZGl2IGlkPSJyZXBsYWNlLXdpdGgtc3Vic2NyaWJlIj48L2Rpdj4NCiAgPC9uYXY+DQo8L2hlYWRlcj4KICAgIAoKPGRpdiBjbGFzcz0idXBkYXRlcy1kcm9wZG93bi1jb250YWluZXIiIGRhdGEtanMtaG9vaz0idXBkYXRlcy1kcm9wZG93bi1jb250YWluZXIiPgogIDxhIGhyZWY9IiMiIGRhdGEtanMtaG9vaz0ic2hvdy11cGRhdGVzLWRyb3Bkb3duIiBpZD0ic2hvdy11cGRhdGVzLWRyb3Bkb3duIiBjbGFzcz0ic2hvdy11cGRhdGVzLWRyb3Bkb3duIj4KCiAgPC9hPgogIDxkaXYgY2xhc3M9InVwZGF0ZXMtZHJvcGRvd24iIGRhdGEtanMtaG9vaz0idXBkYXRlcy1kcm9wZG93biIgc3R5bGU9ImRpc3BsYXk6bm9uZSI+CiAgICA8ZGl2IGNsYXNzPSJ1cGRhdGVzLWRyb3Bkb3duLW5hdiBuYXYtaXRlbXMtNyI+CiAgICAgICAgPGEgaHJlZj0iI3VwZGF0ZXMtZHJvcGRvd24tZW1haWwiIGlkPSJ1cGRhdGVzLWRyb3Bkb3duLWVtYWlsLWJ0biI+CiAgICAgICAgICA8c3BhbiBjbGFzcz0iaWNvbi1jb250YWluZXIgZW1haWwiPgogICAgICAgIDwvYT4KICAgICAgICA8YSBocmVmPSIjdXBkYXRlcy1kcm9wZG93bi1zbXMiIGlkPSJ1cGRhdGVzLWRyb3Bkb3duLXNtcy1idG4iPgogICAgICAgICAgPHNwYW4gY2xhc3M9Imljb24tY29udGFpbmVyIHNtcyI+CiAgICAgICAgPC9hPgogICAgICAgIDxhIGhyZWY9IiN1cGRhdGVzLWRyb3Bkb3duLXdlYmhvb2siIGlkPSJ1cGRhdGVzLWRyb3Bkb3duLXdlYmhvb2stYnRuIj4KICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLWNvbnRhaW5lciB3ZWJob29rIj4KICAgICAgICA8L2E+CiAgICAgICAgPGEgaHJlZj0iI3VwZGF0ZXMtZHJvcGRvd24tdHdpdHRlciIgaWQ9InVwZGF0ZXMtZHJvcGRvd24tdHdpdHRlci1idG4iPgogICAgICAgICAgPHNwYW4gY2xhc3M9Imljb24tY29udGFpbmVyIHR3aXR0ZXIiPgogICAgICAgIDwvYT4KICAgICAgICA8YSBocmVmPSIjdXBkYXRlcy1kcm9wZG93bi1zdXBwb3J0IiBpZD0idXBkYXRlcy1kcm9wZG93bi1zdXBwb3J0LWJ0biI+CiAgICAgICAgICA8c3BhbiBjbGFzcz0iaWNvbi1jb250YWluZXIgc3VwcG9ydCI+CiAgICAgICAgPC9hPgogICAgICA8YSBocmVmPSIjdXBkYXRlcy1kcm9wZG93bi1hdG9tIiBpZD0idXBkYXRlcy1kcm9wZG93bi1hdG9tLWJ0biI+CiAgICAgICAgPHNwYW4gY2xhc3M9Imljb24tY29udGFpbmVyIHJzcyI+CiAgICAgIDwvYT4KICAgICAgPGEgaHJlZj0iIyIgZGF0YS1qcy1ob29rPSJ1cGRhdGVzLWRyb3Bkb3duLWNsb3NlIiBpZD0idXBkYXRlcy1kcm9wZG93bi1jbG9zZS1idG4iPgogICAgICAgIHgKICAgICAgPC9hPgogICAgPC9kaXY+CiAgICA8ZGl2IGNsYXNzPSJ1cGRhdGVzLWRyb3Bkb3duLXNlY3Rpb25zLWNvbnRhaW5lciI+CgogICAgICAgIDxkaXYgY2xhc3M9InVwZGF0ZXMtZHJvcGRvd24tc2VjdGlvbiBlbWFpbCIgaWQ9InVwZGF0ZXMtZHJvcGRvd24tZW1haWwiIHN0eWxlPSJkaXNwbGF5Om5vbmUiPgogICAgICAgICAgPGRpdiBjbGFzcz0iZGlyZWN0aW9ucyI+CiAgICAgICAgICAgIEdldCBlbWFpbCBub3RpZmljYXRpb25zIHdoZW5ldmVyIEF0bGFzc2lhbiBCaXRidWNrZXQgY3JlYXRlcyBvciB1cGRhdGVzIGFuIGluY2lkZW50LgogICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8Zm9ybSBpZD0ic3Vic2NyaWJlLWZvcm0tZW1haWwiIGFjdGlvbj0iL3N1YnNjcmliZS5qc29uIiBhY2NlcHQtY2hhcnNldD0iVVRGLTgiIGRhdGEtcmVtb3RlPSJ0cnVlIiBtZXRob2Q9InBvc3QiPjxpbnB1dCBuYW1lPSJ1dGY4IiB0eXBlPSJoaWRkZW4iIHZhbHVlPSImI3gyNzEzOyIgLz4KICAgICAgICAgICAgICA8IS0tIG1ha2Ugc3VyZSBub3QgdG8gcHV0IGNvb2tpZSB2YWx1ZXMgaW4gaGVyZSBzaW5jZSB0aGlzIGdldHMgY2FjaGVkIC0tPgogICAgICAgICAgICAgIDxpbnB1dCBuYW1lPSJlbWFpbCIgaWQ9ImVtYWlsIiB0eXBlPSJ0ZXh0IiBwbGFjZWhvbGRlcj0iRW1haWwgQWRkcmVzcyIgY2xhc3M9ImZ1bGwtd2lkdGgiIGRhdGEtanMtaG9vaz0iZW1haWwtbm90aWZpY2F0aW9uLWZpZWxkIj4KICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0ic3VibWl0IiB2YWx1ZT0iU3Vic2NyaWJlIHZpYSBFbWFpbCIgY2xhc3M9ImZsYXQtYnV0dG9uIGZ1bGwtd2lkdGgiIGlkPSJzdWJzY3JpYmUtYnRuLWVtYWlsIiBkYXRhLWRpc2FibGVkLXRleHQ9IlN1YnNjcmliaW5nLi4uIiBkYXRhLXJldmVydC1vbi1zdWNjZXNzPSJ0cnVlIj4KICAgICAgICAgICAgICAKPC9mb3JtPiAgICAgICAgPC9kaXY+CgogICAgICAgIDxkaXYgY2xhc3M9InVwZGF0ZXMtZHJvcGRvd24tc2VjdGlvbiBwaG9uZSIgaWQ9InVwZGF0ZXMtZHJvcGRvd24tc21zIiBzdHlsZT0iZGlzcGxheTpub25lIj4KICAgICAgICAgIDxkaXYgY2xhc3M9ImRpcmVjdGlvbnMiPgogICAgICAgICAgICAgIEdldCB0ZXh0IG1lc3NhZ2Ugbm90aWZpY2F0aW9ucyB3aGVuZXZlciBBdGxhc3NpYW4gQml0YnVja2V0IDxzdHJvbmc+Y3JlYXRlczwvc3Ryb25nPiBvciA8c3Ryb25nPnJlc29sdmVzPC9zdHJvbmc+IGFuIGluY2lkZW50LgogICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8Zm9ybSBpZD0ic3Vic2NyaWJlLWZvcm0tc21zIiBhY3Rpb249Ii9zdWJzY3JpYmUuanNvbiIgYWNjZXB0LWNoYXJzZXQ9IlVURi04IiBkYXRhLXJlbW90ZT0idHJ1ZSIgbWV0aG9kPSJwb3N0Ij48aW5wdXQgbmFtZT0idXRmOCIgdHlwZT0iaGlkZGVuIiB2YWx1ZT0iJiN4MjcxMzsiIC8+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRyb2wtZ3JvdXAiPgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRyb2xzIGV4dGVybmFsaXRpZXMtc21zLWNvbnRhaW5lciI+CiAgICAgICAgICAgICAgICA8IS0tIG1ha2Ugc3VyZSBub3QgdG8gcHV0IGNvb2tpZSB2YWx1ZXMgaW4gaGVyZSBzaW5jZSB0aGlzIGdldHMgY2FjaGVkIC0tPgogICAgICAgICAgICAgICAgPHNlbGVjdCBuYW1lPSJwaG9uZV9jb3VudHJ5IiBpZD0icGhvbmUtY291bnRyeSIgZGF0YS1qcy1ob29rPSJwaG9uZS1jb3VudHJ5Ij48b3B0aW9uIHZhbHVlPSJhZiI+QWZnaGFuaXN0YW4gKCs5Myk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iYWwiPkFsYmFuaWEgKCszNTUpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9ImR6Ij5BbGdlcmlhICgrMjEzKTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSJhcyI+QW1lcmljYW4gU2Ftb2EgKCsxKTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSJhZCI+QW5kb3JyYSAoKzM3Nik8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iYW8iPkFuZ29sYSAoKzI0NCk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iYWkiPkFuZ3VpbGxhICgrMSk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iYWciPkFudGlndWEgYW5kIEJhcmJ1ZGEgKCsxKTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSJhciI+QXJnZW50aW5hICgrNTQpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9ImFtIj5Bcm1lbmlhICgrMzc0KTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSJhdyI+QXJ1YmEgKCsyOTcpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9ImF1Ij5BdXN0cmFsaWEvQ29jb3MvQ2hyaXN0bWFzIElzbGFuZCAoKzYxKTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSJhdCI+QXVzdHJpYSAoKzQzKTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSJheiI+QXplcmJhaWphbiAoKzk5NCk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iYnMiPkJhaGFtYXMgKCsxKTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSJiaCI+QmFocmFpbiAoKzk3Myk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iYmQiPkJhbmdsYWRlc2ggKCs4ODApPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9ImJiIj5CYXJiYWRvcyAoKzEpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9ImJ5Ij5CZWxhcnVzICgrMzc1KTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSJiZSI+QmVsZ2l1bSAoKzMyKTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSJieiI+QmVsaXplICgrNTAxKTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSJiaiI+QmVuaW4gKCsyMjkpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9ImJtIj5CZXJtdWRhICgrMSk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iYm8iPkJvbGl2aWEgKCs1OTEpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9ImJhIj5Cb3NuaWEgYW5kIEhlcnplZ292aW5hICgrMzg3KTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSJidyI+Qm90c3dhbmEgKCsyNjcpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9ImJyIj5CcmF6aWwgKCs1NSk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iYm4iPkJydW5laSAoKzY3Myk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iYmciPkJ1bGdhcmlhICgrMzU5KTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSJiZiI+QnVya2luYSBGYXNvICgrMjI2KTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSJiaSI+QnVydW5kaSAoKzI1Nyk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0ia2giPkNhbWJvZGlhICgrODU1KTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSJjbSI+Q2FtZXJvb24gKCsyMzcpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9ImNhIj5DYW5hZGEgKCsxKTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSJjdiI+Q2FwZSBWZXJkZSAoKzIzOCk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0ia3kiPkNheW1hbiBJc2xhbmRzICgrMSk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iY2YiPkNlbnRyYWwgQWZyaWNhICgrMjM2KTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSJ0ZCI+Q2hhZCAoKzIzNSk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iY2wiPkNoaWxlICgrNTYpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9ImNuIj5DaGluYSAoKzg2KTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSJjbyI+Q29sb21iaWEgKCs1Nyk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0ia20iPkNvbW9yb3MgKCsyNjkpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9ImNnIj5Db25nbyAoKzI0Mik8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iY2QiPkNvbmdvLCBEZW0gUmVwICgrMjQzKTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSJjciI+Q29zdGEgUmljYSAoKzUwNik8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iaHIiPkNyb2F0aWEgKCszODUpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9ImN5Ij5DeXBydXMgKCszNTcpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9ImN6Ij5DemVjaCBSZXB1YmxpYyAoKzQyMCk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iZGsiPkRlbm1hcmsgKCs0NSk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iZGoiPkRqaWJvdXRpICgrMjUzKTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSJkbSI+RG9taW5pY2EgKCsxKTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSJkbyI+RG9taW5pY2FuIFJlcHVibGljICgrMSk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iZWciPkVneXB0ICgrMjApPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9InN2Ij5FbCBTYWx2YWRvciAoKzUwMyk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iZ3EiPkVxdWF0b3JpYWwgR3VpbmVhICgrMjQwKTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSJlZSI+RXN0b25pYSAoKzM3Mik8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iZXQiPkV0aGlvcGlhICgrMjUxKTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSJmbyI+RmFyb2UgSXNsYW5kcyAoKzI5OCk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iZmoiPkZpamkgKCs2NzkpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9ImZpIj5GaW5sYW5kL0FsYW5kIElzbGFuZHMgKCszNTgpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9ImZyIj5GcmFuY2UgKCszMyk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iZ2YiPkZyZW5jaCBHdWlhbmEgKCs1OTQpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9InBmIj5GcmVuY2ggUG9seW5lc2lhICgrNjg5KTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSJnYSI+R2Fib24gKCsyNDEpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9ImdtIj5HYW1iaWEgKCsyMjApPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9ImdlIj5HZW9yZ2lhICgrOTk1KTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSJkZSI+R2VybWFueSAoKzQ5KTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSJnaCI+R2hhbmEgKCsyMzMpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9ImdpIj5HaWJyYWx0YXIgKCszNTApPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9ImdyIj5HcmVlY2UgKCszMCk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iZ2wiPkdyZWVubGFuZCAoKzI5OSk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iZ2QiPkdyZW5hZGEgKCsxKTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSJncCI+R3VhZGVsb3VwZSAoKzU5MCk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iZ3UiPkd1YW0gKCsxKTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSJndCI+R3VhdGVtYWxhICgrNTAyKTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSJnbiI+R3VpbmVhICgrMjI0KTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSJneSI+R3V5YW5hICgrNTkyKTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSJodCI+SGFpdGkgKCs1MDkpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9ImhuIj5Ib25kdXJhcyAoKzUwNCk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iaGsiPkhvbmcgS29uZyAoKzg1Mik8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iaHUiPkh1bmdhcnkgKCszNik8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iaXMiPkljZWxhbmQgKCszNTQpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9ImluIj5JbmRpYSAoKzkxKTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSJpZCI+SW5kb25lc2lhICgrNjIpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9ImlyIj5JcmFuICgrOTgpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9ImlxIj5JcmFxICgrOTY0KTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSJpZSI+SXJlbGFuZCAoKzM1Myk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iaWwiPklzcmFlbCAoKzk3Mik8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iaXQiPkl0YWx5ICgrMzkpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9ImptIj5KYW1haWNhICgrMSk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0ianAiPkphcGFuICgrODEpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9ImpvIj5Kb3JkYW4gKCs5NjIpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9ImtlIj5LZW55YSAoKzI1NCk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0ia3IiPktvcmVhLCBSZXB1YmxpYyBvZiAoKzgyKTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSJrdyI+S3V3YWl0ICgrOTY1KTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSJrZyI+S3lyZ3l6c3RhbiAoKzk5Nik8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0ibGEiPkxhb3MgKCs4NTYpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9Imx2Ij5MYXR2aWEgKCszNzEpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9ImxiIj5MZWJhbm9uICgrOTYxKTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSJscyI+TGVzb3RobyAoKzI2Nik8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0ibHIiPkxpYmVyaWEgKCsyMzEpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9Imx5Ij5MaWJ5YSAoKzIxOCk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0ibGkiPkxpZWNodGVuc3RlaW4gKCs0MjMpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9Imx0Ij5MaXRodWFuaWEgKCszNzApPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9Imx1Ij5MdXhlbWJvdXJnICgrMzUyKTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSJtbyI+TWFjYW8gKCs4NTMpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9Im1rIj5NYWNlZG9uaWEgKCszODkpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9Im1nIj5NYWRhZ2FzY2FyICgrMjYxKTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSJtdyI+TWFsYXdpICgrMjY1KTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSJteSI+TWFsYXlzaWEgKCs2MCk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0ibXYiPk1hbGRpdmVzICgrOTYwKTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSJtbCI+TWFsaSAoKzIyMyk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0ibXQiPk1hbHRhICgrMzU2KTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSJtcSI+TWFydGluaXF1ZSAoKzU5Nik8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0ibXIiPk1hdXJpdGFuaWEgKCsyMjIpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9Im11Ij5NYXVyaXRpdXMgKCsyMzApPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9Im14Ij5NZXhpY28gKCs1Mik8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0ibWMiPk1vbmFjbyAoKzM3Nyk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0ibW4iPk1vbmdvbGlhICgrOTc2KTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSJtZSI+TW9udGVuZWdybyAoKzM4Mik8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0ibXMiPk1vbnRzZXJyYXQgKCsxKTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSJtYSI+TW9yb2Njby9XZXN0ZXJuIFNhaGFyYSAoKzIxMik8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0ibXoiPk1vemFtYmlxdWUgKCsyNTgpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9Im5hIj5OYW1pYmlhICgrMjY0KTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSJucCI+TmVwYWwgKCs5NzcpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9Im5sIj5OZXRoZXJsYW5kcyAoKzMxKTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSJueiI+TmV3IFplYWxhbmQgKCs2NCk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0ibmkiPk5pY2FyYWd1YSAoKzUwNSk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0ibmUiPk5pZ2VyICgrMjI3KTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSJuZyI+TmlnZXJpYSAoKzIzNCk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0ibm8iPk5vcndheSAoKzQ3KTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSJvbSI+T21hbiAoKzk2OCk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0icGsiPlBha2lzdGFuICgrOTIpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9InBzIj5QYWxlc3RpbmlhbiBUZXJyaXRvcnkgKCs5NzApPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9InBhIj5QYW5hbWEgKCs1MDcpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9InB5Ij5QYXJhZ3VheSAoKzU5NSk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0icGUiPlBlcnUgKCs1MSk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0icGgiPlBoaWxpcHBpbmVzICgrNjMpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9InBsIj5Qb2xhbmQgKCs0OCk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0icHQiPlBvcnR1Z2FsICgrMzUxKTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSJwciI+UHVlcnRvIFJpY28gKCsxKTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSJxYSI+UWF0YXIgKCs5NzQpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9InJlIj5SZXVuaW9uL01heW90dGUgKCsyNjIpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9InJvIj5Sb21hbmlhICgrNDApPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9InJ1Ij5SdXNzaWEvS2F6YWtoc3RhbiAoKzcpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9InJ3Ij5Sd2FuZGEgKCsyNTApPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9IndzIj5TYW1vYSAoKzY4NSk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0ic20iPlNhbiBNYXJpbm8gKCszNzgpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9InNhIj5TYXVkaSBBcmFiaWEgKCs5NjYpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9InNuIj5TZW5lZ2FsICgrMjIxKTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSJycyI+U2VyYmlhICgrMzgxKTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSJzYyI+U2V5Y2hlbGxlcyAoKzI0OCk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0ic2wiPlNpZXJyYSBMZW9uZSAoKzIzMik8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0ic2ciPlNpbmdhcG9yZSAoKzY1KTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSJzayI+U2xvdmFraWEgKCs0MjEpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9InNpIj5TbG92ZW5pYSAoKzM4Nik8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iemEiPlNvdXRoIEFmcmljYSAoKzI3KTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSJlcyI+U3BhaW4gKCszNCk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0ibGsiPlNyaSBMYW5rYSAoKzk0KTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSJrbiI+U3QgS2l0dHMgYW5kIE5ldmlzICgrMSk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0ibGMiPlN0IEx1Y2lhICgrMSk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0idmMiPlN0IFZpbmNlbnQgR3JlbmFkaW5lcyAoKzEpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9InNkIj5TdWRhbiAoKzI0OSk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0ic3IiPlN1cmluYW1lICgrNTk3KTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSJzeiI+U3dhemlsYW5kICgrMjY4KTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSJzZSI+U3dlZGVuICgrNDYpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9ImNoIj5Td2l0emVybGFuZCAoKzQxKTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSJzeSI+U3lyaWEgKCs5NjMpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9InR3Ij5UYWl3YW4gKCs4ODYpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9InRqIj5UYWppa2lzdGFuICgrOTkyKTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSJ0eiI+VGFuemFuaWEgKCsyNTUpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9InRoIj5UaGFpbGFuZCAoKzY2KTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSJ0ZyI+VG9nbyAoKzIyOCk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0idG8iPlRvbmdhICgrNjc2KTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSJ0dCI+VHJpbmlkYWQgYW5kIFRvYmFnbyAoKzEpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9InRuIj5UdW5pc2lhICgrMjE2KTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSJ0ciI+VHVya2V5ICgrOTApPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9InRjIj5UdXJrcyBhbmQgQ2FpY29zIElzbGFuZHMgKCsxKTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSJ1ZyI+VWdhbmRhICgrMjU2KTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSJ1YSI+VWtyYWluZSAoKzM4MCk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iYWUiPlVuaXRlZCBBcmFiIEVtaXJhdGVzICgrOTcxKTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSJnYiI+VW5pdGVkIEtpbmdkb20gKCs0NCk8L29wdGlvbj4KPG9wdGlvbiBzZWxlY3RlZD0ic2VsZWN0ZWQiIHZhbHVlPSJ1cyI+VW5pdGVkIFN0YXRlcyAoKzEpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9InV5Ij5VcnVndWF5ICgrNTk4KTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSJ1eiI+VXpiZWtpc3RhbiAoKzk5OCk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0idmUiPlZlbmV6dWVsYSAoKzU4KTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSJ2biI+VmlldG5hbSAoKzg0KTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSJ2ZyI+VmlyZ2luIElzbGFuZHMsIEJyaXRpc2ggKCsxKTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSJ2aSI+VmlyZ2luIElzbGFuZHMsIFUuUy4gKCsxKTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSJ5ZSI+WWVtZW4gKCs5NjcpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9InptIj5aYW1iaWEgKCsyNjApPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9Inp3Ij5aaW1iYWJ3ZSAoKzI2Myk8L29wdGlvbj48L3NlbGVjdD4KICAgICAgICAgICAgICAgIDxpbnB1dCBuYW1lPSJwaG9uZV9udW1iZXIiIGlkPSJwaG9uZS1udW1iZXIiIHR5cGU9InRleHQiIHBsYWNlaG9sZGVyPSJleC4gNjUwNTU1MTIzNCIgY2xhc3M9InByZXBlbmQgZnVsbC13aWR0aCIgZGF0YS1qcy1ob29rPSJzbXMtbm90aWZpY2F0aW9uLWZpZWxkIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNsZWFyZml4Ij48L2Rpdj4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICA8aW5wdXQgdHlwZT0ic3VibWl0IiB2YWx1ZT0iU3Vic2NyaWJlIHZpYSBUZXh0IE1lc3NhZ2UiIGNsYXNzPSJmbGF0LWJ1dHRvbiBmdWxsLXdpZHRoIiBpZD0ic3Vic2NyaWJlLWJ0bi1zbXMiIGRhdGEtZGlzYWJsZWQtdGV4dD0iU3Vic2NyaWJpbmcuLi4iIGRhdGEtcmV2ZXJ0LW9uLXN1Y2Nlc3M9InRydWUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0ZXJtc19hbmRfcHJpdmFjeV9pbmZvcm1hdGlvbiBzbWFsbCI+TWVzc2FnZSBhbmQgZGF0YSByYXRlcyBtYXkgYXBwbHkuIEJ5IHN1YnNjcmliaW5nIHlvdSBhZ3JlZSB0byBvdXIgPGEgdGFyZ2V0PSJfYmxhbmsiIGhyZWY9Imh0dHBzOi8vd3d3LmF0bGFzc2lhbi5jb20vbGVnYWwvY3VzdG9tZXItYWdyZWVtZW50Ij5UZXJtcyBhbmQgQ29uZGl0aW9uczwvYT4uPC9kaXY+CjwvZm9ybT4gICAgICAgIDwvZGl2PgoKICAgICAgICA8ZGl2IGNsYXNzPSJ1cGRhdGVzLWRyb3Bkb3duLXNlY3Rpb24gd2ViaG9vayIgaWQ9InVwZGF0ZXMtZHJvcGRvd24td2ViaG9vayIgc3R5bGU9ImRpc3BsYXk6bm9uZSI+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJkaXJlY3Rpb25zIj4KICAgICAgICAgICAgR2V0IHdlYmhvb2sgbm90aWZpY2F0aW9ucyB3aGVuZXZlciBBdGxhc3NpYW4gQml0YnVja2V0IGNyZWF0ZXMgYW4gaW5jaWRlbnQsIHVwZGF0ZXMgYW4gaW5jaWRlbnQsIG9yIGNoYW5nZXMgYSBjb21wb25lbnQgc3RhdHVzLgogICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8Zm9ybSBpZD0ic3Vic2NyaWJlLWZvcm0td2ViaG9vayIgYWN0aW9uPSIvc3Vic2NyaWJlLmpzb24iIGFjY2VwdC1jaGFyc2V0PSJVVEYtOCIgZGF0YS1yZW1vdGU9InRydWUiIG1ldGhvZD0icG9zdCI+PGlucHV0IG5hbWU9InV0ZjgiIHR5cGU9ImhpZGRlbiIgdmFsdWU9IiYjeDI3MTM7IiAvPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb250cm9sLWdyb3VwIj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb250cm9scyI+CiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgbmFtZT0iZW5kcG9pbnQiIGlkPSJlbmRwb2ludC13ZWJob29rcyIgcGxhY2Vob2xkZXI9Imh0dHA6Ly93d3cueW91cmRvbWFpbi5jb20vZW5kcG9pbnQvaGVyZSIgZGF0YS1qcy1ob29rPSJlbmRwb2ludCIgY2xhc3M9ImZ1bGwtd2lkdGgiIC8+CiAgICAgICAgICAgICAgICA8cCBjbGFzcz0iaGVscC1ibG9jayI+VGhlIFVSTCB3ZSBzaG91bGQgc2VuZCB0aGUgd2ViaG9va3MgdG88L3A+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udHJvbC1ncm91cCI+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udHJvbHMiPgogICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIG5hbWU9ImVtYWlsIiBpZD0iZW1haWwtd2ViaG9va3MiIHBsYWNlaG9sZGVyPSJFbWFpbCBBZGRyZXNzIiBkYXRhLWpzLWhvb2s9ImVtYWlsIiBjbGFzcz0iZnVsbC13aWR0aCIgLz4KICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJoZWxwLWJsb2NrIj5XZSdsbCBzZW5kIHlvdSBlbWFpbCBpZiB5b3VyIGVuZHBvaW50IGZhaWxzPC9wPgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tYWN0aW9ucyI+CiAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InN1Ym1pdCIgdmFsdWU9IlN1YnNjcmliZSBUbyBOb3RpZmljYXRpb25zIiBjbGFzcz0iZmxhdC1idXR0b24gZnVsbC13aWR0aCIgaWQ9InN1YnNjcmliZS1idG4td2ViaG9vayIgZGF0YS1kaXNhYmxlZC10ZXh0PSJTdWJzY3JpYmluZy4uLiIgZGF0YS1yZXZlcnQtb24tc3VjY2Vzcz0idHJ1ZSI+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAKPC9mb3JtPiAgICAgICAgPC9kaXY+CgogICAgICAgIDxkaXYgY2xhc3M9InVwZGF0ZXMtZHJvcGRvd24tc2VjdGlvbiB0d2l0dGVyIiBpZD0idXBkYXRlcy1kcm9wZG93bi10d2l0dGVyIiBzdHlsZT0iZGlzcGxheTpub25lIj4KICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vdHdpdHRlci5jb20vQml0YnVja2V0U3RhdHVzIiBjbGFzcz0idHdpdHRlci1mb2xsb3ctYnV0dG9uIiBkYXRhLXNob3ctY291bnQ9ImZhbHNlIiBkYXRhLXNob3ctc2NyZWVuLW5hbWU9InRydWUiIGRhdGEtd2lkdGg9IjU5cHgiPkZvbGxvdyBAQml0YnVja2V0U3RhdHVzPC9hPgogICAgICAgICAgb3ImbmJzcDsKICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vdHdpdHRlci5jb20vQml0YnVja2V0U3RhdHVzIiB0YXJnZXQ9Il9ibGFuayI+dmlldyBvdXIgcHJvZmlsZTwvYT4uCiAgICAgICAgICA8c3R5bGU+CiAgICAgICAgICAgIC50d2l0dGVyLWZvbGxvdy1idXR0b24gewogICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IC02cHg7CiAgICAgICAgICAgIH0KICAgICAgICAgIDwvc3R5bGU+CgogICAgICAgICAgICA8c2NyaXB0PiFmdW5jdGlvbihkLHMsaWQpe3ZhciBqcyxmanM9ZC5nZXRFbGVtZW50c0J5VGFnTmFtZShzKVswXSxwPS9eaHR0cDovLnRlc3QoZC5sb2NhdGlvbik/J2h0dHAnOidodHRwcyc7aWYoIWQuZ2V0RWxlbWVudEJ5SWQoaWQpKXtqcz1kLmNyZWF0ZUVsZW1lbnQocyk7anMuaWQ9aWQ7anMuc3JjPXArJzovL3BsYXRmb3JtLnR3aXR0ZXIuY29tL3dpZGdldHMuanMnO2Zqcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZShqcyxmanMpO319KGRvY3VtZW50LCAnc2NyaXB0JywgJ3R3aXR0ZXItd2pzJyk7PC9zY3JpcHQ+CiAgICAgICAgPC9kaXY+CgogICAgICAgIDxkaXYgY2xhc3M9InVwZGF0ZXMtZHJvcGRvd24tc2VjdGlvbiBzdXBwb3J0IiBpZD0idXBkYXRlcy1kcm9wZG93bi1zdXBwb3J0IiBzdHlsZT0iZGlzcGxheTpub25lIj4KICAgICAgICAgIFZpc2l0IG91ciA8YSB0YXJnZXQ9Il9ibGFuayIgaHJlZj0iaHR0cHM6Ly9iaXRidWNrZXQub3JnL3N1cHBvcnQiPnN1cHBvcnQgc2l0ZTwvYT4uCiAgICAgICAgPC9kaXY+CgogICAgICA8ZGl2IGNsYXNzPSJ1cGRhdGVzLWRyb3Bkb3duLXNlY3Rpb24gYXRvbSIgaWQ9InVwZGF0ZXMtZHJvcGRvd24tYXRvbSI+CiAgICAgICAgR2V0IHRoZSA8YSBocmVmPSJodHRwczovL3N0YXR1cy5iaXRidWNrZXQub3JnL2hpc3RvcnkuYXRvbSIgdGFyZ2V0PSJfYmxhbmsiPkF0b20gRmVlZDwvYT4gb3IgPGEgaHJlZj0iaHR0cHM6Ly9zdGF0dXMuYml0YnVja2V0Lm9yZy9oaXN0b3J5LnJzcyIgdGFyZ2V0PSJfYmxhbmsiPlJTUyBGZWVkPC9hPi4KICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICA8L2Rpdj4KPC9kaXY+CgogIDwvZGl2PgoKCiAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPgogICAgICAgIDxkaXYgY2xhc3M9InBhZ2Utc3RhdHVzIHN0YXR1cy1ub25lIj4KICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdGF0dXMgZm9udC1sYXJnZSI+CiAgICAgICAgICAgIEFsbCBTeXN0ZW1zIE9wZXJhdGlvbmFsCiAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICA8c3BhbiBjbGFzcz0ibGFzdC11cGRhdGVkLXN0YW1wICBmb250LXNtYWxsIj48L3NwYW4+CiAgICAgICAgPC9kaXY+CgoKCiAgICAgICAgPGRpdiBjbGFzcz0iY29tcG9uZW50cy1zZWN0aW9uIGZvbnQtcmVndWxhciI+CiAgICA8ZGl2IGNsYXNzPSJjb21wb25lbnRzLWNvbnRhaW5lciBvbmUtY29sdW1uIj4KICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbXBvbmVudC1jb250YWluZXIgYm9yZGVyLWNvbG9yIj4KICAgICAgICAgICAgCjxkaXYgZGF0YS1jb21wb25lbnQtaWQ9ImcwbGZqNHN2MmZoZiIKICAgICBjbGFzcz0iY29tcG9uZW50LWlubmVyLWNvbnRhaW5lciBzdGF0dXMtZ3JlZW4gIgogICAgIGRhdGEtY29tcG9uZW50LXN0YXR1cz0ib3BlcmF0aW9uYWwiCiAgICAgZGF0YS1qcy1ob29rPSIiPgoKCiAgICA8c3BhbiBjbGFzcz0ibmFtZSI+CiAgICAgIFdlYnNpdGUKICAgICAgJm5ic3A7CiAgICA8L3NwYW4+CgogICAgICA8c3BhbiBjbGFzcz0idG9vbHRpcC1iYXNlIHRvb2wiIHRpdGxlPSJBY2Nlc3MgdG8gYml0YnVja2V0Lm9yZyI+Pzwvc3Bhbj4KICAgIDxzcGFuIGNsYXNzPSJjb21wb25lbnQtc3RhdHVzIj4KICAgICAgT3BlcmF0aW9uYWwKICAgIDwvc3Bhbj4KCiAgICA8c3BhbiBjbGFzcz0idG9vbCBpY29uLWluZGljYXRvciBmYSBmYS1jaGVjayIgdGl0bGU9Ik9wZXJhdGlvbmFsIj48L3NwYW4+CgoKPC9kaXY+CgogICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJjb21wb25lbnQtY29udGFpbmVyIGJvcmRlci1jb2xvciI+CiAgICAgICAgICAgIAo8ZGl2IGRhdGEtY29tcG9uZW50LWlkPSJrMHgyeXcxNDM1djciCiAgICAgY2xhc3M9ImNvbXBvbmVudC1pbm5lci1jb250YWluZXIgc3RhdHVzLWdyZWVuICIKICAgICBkYXRhLWNvbXBvbmVudC1zdGF0dXM9Im9wZXJhdGlvbmFsIgogICAgIGRhdGEtanMtaG9vaz0iIj4KCgogICAgPHNwYW4gY2xhc3M9Im5hbWUiPgogICAgICBBUEkKICAgICAgJm5ic3A7CiAgICA8L3NwYW4+CgogICAgICA8c3BhbiBjbGFzcz0idG9vbHRpcC1iYXNlIHRvb2wiIHRpdGxlPSJBY2Nlc3MgdG8gYXBpLmJpdGJ1Y2tldC5vcmciPj88L3NwYW4+CiAgICA8c3BhbiBjbGFzcz0iY29tcG9uZW50LXN0YXR1cyI+CiAgICAgIE9wZXJhdGlvbmFsCiAgICA8L3NwYW4+CgogICAgPHNwYW4gY2xhc3M9InRvb2wgaWNvbi1pbmRpY2F0b3IgZmEgZmEtY2hlY2siIHRpdGxlPSJPcGVyYXRpb25hbCI+PC9zcGFuPgoKCjwvZGl2PgoKICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPGRpdiBjbGFzcz0iY29tcG9uZW50LWNvbnRhaW5lciBib3JkZXItY29sb3IiPgogICAgICAgICAgICAKPGRpdiBkYXRhLWNvbXBvbmVudC1pZD0icW1oNHRqOGg1a2JuIgogICAgIGNsYXNzPSJjb21wb25lbnQtaW5uZXItY29udGFpbmVyIHN0YXR1cy1ncmVlbiAiCiAgICAgZGF0YS1jb21wb25lbnQtc3RhdHVzPSJvcGVyYXRpb25hbCIKICAgICBkYXRhLWpzLWhvb2s9IiI+CgoKICAgIDxzcGFuIGNsYXNzPSJuYW1lIj4KICAgICAgU1NICiAgICAgICZuYnNwOwogICAgPC9zcGFuPgoKICAgICAgPHNwYW4gY2xhc3M9InRvb2x0aXAtYmFzZSB0b29sIiB0aXRsZT0iQWNjZXNzIHRvIEdpdCBhbmQgTWVyY3VyaWFsIG92ZXIgU1NIIj4/PC9zcGFuPgogICAgPHNwYW4gY2xhc3M9ImNvbXBvbmVudC1zdGF0dXMiPgogICAgICBPcGVyYXRpb25hbAogICAgPC9zcGFuPgoKICAgIDxzcGFuIGNsYXNzPSJ0b29sIGljb24taW5kaWNhdG9yIGZhIGZhLWNoZWNrIiB0aXRsZT0iT3BlcmF0aW9uYWwiPjwvc3Bhbj4KCgo8L2Rpdj4KCiAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbXBvbmVudC1jb250YWluZXIgYm9yZGVyLWNvbG9yIj4KICAgICAgICAgICAgCjxkaXYgZGF0YS1jb21wb25lbnQtaWQ9ImMxcW1jcmNiYzV6eSIKICAgICBjbGFzcz0iY29tcG9uZW50LWlubmVyLWNvbnRhaW5lciBzdGF0dXMtZ3JlZW4gIgogICAgIGRhdGEtY29tcG9uZW50LXN0YXR1cz0ib3BlcmF0aW9uYWwiCiAgICAgZGF0YS1qcy1ob29rPSIiPgoKCiAgICA8c3BhbiBjbGFzcz0ibmFtZSI+CiAgICAgIEdpdCB2aWEgSFRUUFMKICAgICAgJm5ic3A7CiAgICA8L3NwYW4+CgogICAgICA8c3BhbiBjbGFzcz0idG9vbHRpcC1iYXNlIHRvb2wiIHRpdGxlPSJBY2Nlc3MgdG8gR2l0IHJlcG9zaXRvcmllcyB2aWEgSFRUUFMiPj88L3NwYW4+CiAgICA8c3BhbiBjbGFzcz0iY29tcG9uZW50LXN0YXR1cyI+CiAgICAgIE9wZXJhdGlvbmFsCiAgICA8L3NwYW4+CgogICAgPHNwYW4gY2xhc3M9InRvb2wgaWNvbi1pbmRpY2F0b3IgZmEgZmEtY2hlY2siIHRpdGxlPSJPcGVyYXRpb25hbCI+PC9zcGFuPgoKCjwvZGl2PgoKICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPGRpdiBjbGFzcz0iY29tcG9uZW50LWNvbnRhaW5lciBib3JkZXItY29sb3IiPgogICAgICAgICAgICAKPGRpdiBkYXRhLWNvbXBvbmVudC1pZD0idm1ienhiYmp6MDVqIgogICAgIGNsYXNzPSJjb21wb25lbnQtaW5uZXItY29udGFpbmVyIHN0YXR1cy1ncmVlbiAiCiAgICAgZGF0YS1jb21wb25lbnQtc3RhdHVzPSJvcGVyYXRpb25hbCIKICAgICBkYXRhLWpzLWhvb2s9IiI+CgoKICAgIDxzcGFuIGNsYXNzPSJuYW1lIj4KICAgICAgTWVyY3VyaWFsIHZpYSBIVFRQUwogICAgICAmbmJzcDsKICAgIDwvc3Bhbj4KCiAgICAgIDxzcGFuIGNsYXNzPSJ0b29sdGlwLWJhc2UgdG9vbCIgdGl0bGU9IkFjY2VzcyB0byBNZXJjdXJpYWwgKGhnKSByZXBvc2l0b3JpZXMgdmlhIEhUVFBTIj4/PC9zcGFuPgogICAgPHNwYW4gY2xhc3M9ImNvbXBvbmVudC1zdGF0dXMiPgogICAgICBPcGVyYXRpb25hbAogICAgPC9zcGFuPgoKICAgIDxzcGFuIGNsYXNzPSJ0b29sIGljb24taW5kaWNhdG9yIGZhIGZhLWNoZWNrIiB0aXRsZT0iT3BlcmF0aW9uYWwiPjwvc3Bhbj4KCgo8L2Rpdj4KCiAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbXBvbmVudC1jb250YWluZXIgYm9yZGVyLWNvbG9yIj4KICAgICAgICAgICAgCjxkaXYgZGF0YS1jb21wb25lbnQtaWQ9InJmemt5MHYxM2ZicCIKICAgICBjbGFzcz0iY29tcG9uZW50LWlubmVyLWNvbnRhaW5lciBzdGF0dXMtZ3JlZW4gIgogICAgIGRhdGEtY29tcG9uZW50LXN0YXR1cz0ib3BlcmF0aW9uYWwiCiAgICAgZGF0YS1qcy1ob29rPSIiPgoKCiAgICA8c3BhbiBjbGFzcz0ibmFtZSI+CiAgICAgIFdlYmhvb2tzCiAgICAgICZuYnNwOwogICAgPC9zcGFuPgoKICAgICAgPHNwYW4gY2xhc3M9InRvb2x0aXAtYmFzZSB0b29sIiB0aXRsZT0iVGhlIEJpdGJ1Y2tldCB3ZWJob29rcyBzZXJ2aWNlIj4/PC9zcGFuPgogICAgPHNwYW4gY2xhc3M9ImNvbXBvbmVudC1zdGF0dXMiPgogICAgICBPcGVyYXRpb25hbAogICAgPC9zcGFuPgoKICAgIDxzcGFuIGNsYXNzPSJ0b29sIGljb24taW5kaWNhdG9yIGZhIGZhLWNoZWNrIiB0aXRsZT0iT3BlcmF0aW9uYWwiPjwvc3Bhbj4KCgo8L2Rpdj4KCiAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbXBvbmVudC1jb250YWluZXIgYm9yZGVyLWNvbG9yIj4KICAgICAgICAgICAgCjxkaXYgZGF0YS1jb21wb25lbnQtaWQ9IjI4aDhkdnYycWZ6dyIKICAgICBjbGFzcz0iY29tcG9uZW50LWlubmVyLWNvbnRhaW5lciBzdGF0dXMtZ3JlZW4gIgogICAgIGRhdGEtY29tcG9uZW50LXN0YXR1cz0ib3BlcmF0aW9uYWwiCiAgICAgZGF0YS1qcy1ob29rPSIiPgoKCiAgICA8c3BhbiBjbGFzcz0ibmFtZSI+CiAgICAgIFNvdXJjZSBkb3dubG9hZHMKICAgICAgJm5ic3A7CiAgICA8L3NwYW4+CgogICAgICA8c3BhbiBjbGFzcz0idG9vbHRpcC1iYXNlIHRvb2wiIHRpdGxlPSJBcmNoaXZlICh6aXAsIHRhci5neiwgYnppcCkgZG93bmxvYWRzIG9mIHJlcG9zaXRvcmllcyI+Pzwvc3Bhbj4KICAgIDxzcGFuIGNsYXNzPSJjb21wb25lbnQtc3RhdHVzIj4KICAgICAgT3BlcmF0aW9uYWwKICAgIDwvc3Bhbj4KCiAgICA8c3BhbiBjbGFzcz0idG9vbCBpY29uLWluZGljYXRvciBmYSBmYS1jaGVjayIgdGl0bGU9Ik9wZXJhdGlvbmFsIj48L3NwYW4+CgoKPC9kaXY+CgogICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJjb21wb25lbnQtY29udGFpbmVyIGJvcmRlci1jb2xvciI+CiAgICAgICAgICAgIAo8ZGl2IGRhdGEtY29tcG9uZW50LWlkPSJyemgybjg1cTd2dHQiCiAgICAgY2xhc3M9ImNvbXBvbmVudC1pbm5lci1jb250YWluZXIgc3RhdHVzLWdyZWVuICIKICAgICBkYXRhLWNvbXBvbmVudC1zdGF0dXM9Im9wZXJhdGlvbmFsIgogICAgIGRhdGEtanMtaG9vaz0iIj4KCgogICAgPHNwYW4gY2xhc3M9Im5hbWUiPgogICAgICBQaXBlbGluZXMKICAgICAgJm5ic3A7CiAgICA8L3NwYW4+CgogICAgICA8c3BhbiBjbGFzcz0idG9vbHRpcC1iYXNlIHRvb2wiIHRpdGxlPSJDb250aW51b3VzIGludGVncmF0aW9uIGFuZCBkZWxpdmVyeSBmb3IgQml0YnVja2V0IHJlcG9zIj4/PC9zcGFuPgogICAgPHNwYW4gY2xhc3M9ImNvbXBvbmVudC1zdGF0dXMiPgogICAgICBPcGVyYXRpb25hbAogICAgPC9zcGFuPgoKICAgIDxzcGFuIGNsYXNzPSJ0b29sIGljb24taW5kaWNhdG9yIGZhIGZhLWNoZWNrIiB0aXRsZT0iT3BlcmF0aW9uYWwiPjwvc3Bhbj4KCgo8L2Rpdj4KCiAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbXBvbmVudC1jb250YWluZXIgYm9yZGVyLWNvbG9yIj4KICAgICAgICAgICAgCjxkaXYgZGF0YS1jb21wb25lbnQtaWQ9ImcwYzhsM25uMnZyMSIKICAgICBjbGFzcz0iY29tcG9uZW50LWlubmVyLWNvbnRhaW5lciBzdGF0dXMtZ3JlZW4gIgogICAgIGRhdGEtY29tcG9uZW50LXN0YXR1cz0ib3BlcmF0aW9uYWwiCiAgICAgZGF0YS1qcy1ob29rPSIiPgoKCiAgICA8c3BhbiBjbGFzcz0ibmFtZSI+CiAgICAgIEdpdCBMRlMKICAgICAgJm5ic3A7CiAgICA8L3NwYW4+CgogICAgICA8c3BhbiBjbGFzcz0idG9vbHRpcC1iYXNlIHRvb2wiIHRpdGxlPSJHaXQgTGFyZ2UgRmlsZSBTdG9yYWdlIj4/PC9zcGFuPgogICAgPHNwYW4gY2xhc3M9ImNvbXBvbmVudC1zdGF0dXMiPgogICAgICBPcGVyYXRpb25hbAogICAgPC9zcGFuPgoKICAgIDxzcGFuIGNsYXNzPSJ0b29sIGljb24taW5kaWNhdG9yIGZhIGZhLWNoZWNrIiB0aXRsZT0iT3BlcmF0aW9uYWwiPjwvc3Bhbj4KCgo8L2Rpdj4KCiAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbXBvbmVudC1jb250YWluZXIgYm9yZGVyLWNvbG9yIj4KICAgICAgICAgICAgCjxkaXYgZGF0YS1jb21wb25lbnQtaWQ9InZjN202bXRxbXhmOSIKICAgICBjbGFzcz0iY29tcG9uZW50LWlubmVyLWNvbnRhaW5lciBzdGF0dXMtZ3JlZW4gIgogICAgIGRhdGEtY29tcG9uZW50LXN0YXR1cz0ib3BlcmF0aW9uYWwiCiAgICAgZGF0YS1qcy1ob29rPSIiPgoKCiAgICA8c3BhbiBjbGFzcz0ibmFtZSI+CiAgICAgIEVtYWlsIGRlbGl2ZXJ5CiAgICAgICZuYnNwOwogICAgPC9zcGFuPgoKICAgIDxzcGFuIGNsYXNzPSJjb21wb25lbnQtc3RhdHVzIj4KICAgICAgT3BlcmF0aW9uYWwKICAgIDwvc3Bhbj4KCiAgICA8c3BhbiBjbGFzcz0idG9vbCBpY29uLWluZGljYXRvciBmYSBmYS1jaGVjayIgdGl0bGU9Ik9wZXJhdGlvbmFsIj48L3NwYW4+CgoKPC9kaXY+CgogICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJjb21wb25lbnQtY29udGFpbmVyIGJvcmRlci1jb2xvciI+CiAgICAgICAgICAgIAo8ZGl2IGRhdGEtY29tcG9uZW50LWlkPSJobjk3ejZrdzFzbnciCiAgICAgY2xhc3M9ImNvbXBvbmVudC1pbm5lci1jb250YWluZXIgc3RhdHVzLWdyZWVuICIKICAgICBkYXRhLWNvbXBvbmVudC1zdGF0dXM9Im9wZXJhdGlvbmFsIgogICAgIGRhdGEtanMtaG9vaz0iIj4KCgogICAgPHNwYW4gY2xhc3M9Im5hbWUiPgogICAgICBBdGxhc3NpYW4gYWNjb3VudCBzaWdudXAgYW5kIGxvZ2luCiAgICAgICZuYnNwOwogICAgPC9zcGFuPgoKICAgIDxzcGFuIGNsYXNzPSJjb21wb25lbnQtc3RhdHVzIj4KICAgICAgT3BlcmF0aW9uYWwKICAgIDwvc3Bhbj4KCiAgICA8c3BhbiBjbGFzcz0idG9vbCBpY29uLWluZGljYXRvciBmYSBmYS1jaGVjayIgdGl0bGU9Ik9wZXJhdGlvbmFsIj48L3NwYW4+CgoKPC9kaXY+CgogICAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICAgIDxkaXYgY2xhc3M9ImNvbXBvbmVudC1zdGF0dXNlcy1sZWdlbmQgZm9udC1zbWFsbCI+CiAgICAgIDxkaXYgY2xhc3M9ImxlZ2VuZC1pdGVtIHN0YXR1cy1ncmVlbiI+CiAgICAgICAgPHNwYW4gY2xhc3M9Imljb24taW5kaWNhdG9yIGZhIGZhLWNoZWNrIj48L3NwYW4+CiAgICAgICAgT3BlcmF0aW9uYWwKICAgICAgPC9kaXY+CiAgICAgIDxkaXYgY2xhc3M9ImxlZ2VuZC1pdGVtIHN0YXR1cy15ZWxsb3ciPgogICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLWluZGljYXRvciBmYSBmYS1taW51cy1zcXVhcmUiPjwvc3Bhbj4KICAgICAgICBEZWdyYWRlZCBQZXJmb3JtYW5jZQogICAgICA8L2Rpdj4KICAgICAgPGRpdiBjbGFzcz0ibGVnZW5kLWl0ZW0gc3RhdHVzLW9yYW5nZSI+CiAgICAgICAgPHNwYW4gY2xhc3M9Imljb24taW5kaWNhdG9yIGZhIGZhLWV4Y2xhbWF0aW9uLXRyaWFuZ2xlIj48L3NwYW4+CiAgICAgICAgUGFydGlhbCBPdXRhZ2UKICAgICAgPC9kaXY+CiAgICAgIDxkaXYgY2xhc3M9ImJyZWFrZXIiPjwvZGl2PgogICAgICA8ZGl2IGNsYXNzPSJsZWdlbmQtaXRlbSBzdGF0dXMtcmVkIj4KICAgICAgICA8c3BhbiBjbGFzcz0iaWNvbi1pbmRpY2F0b3IgZmEgZmEtdGltZXMiPjwvc3Bhbj4KICAgICAgICBNYWpvciBPdXRhZ2UKICAgICAgPC9kaXY+CiAgICAgIDxkaXYgY2xhc3M9ImxlZ2VuZC1pdGVtIHN0YXR1cy1ibHVlIj4KICAgICAgICA8c3BhbiBjbGFzcz0iaWNvbi1pbmRpY2F0b3IgZmEgZmEtd3JlbmNoIj48L3NwYW4+CiAgICAgICAgTWFpbnRlbmFuY2UKICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICA8L2Rpdj4KCgoKCiAgICAgICAgPGRpdiBjbGFzcz0iY3VzdG9tLW1ldHJpY3MtY29udGFpbmVyIiBpZD0iY3VzdG9tLW1ldHJpY3MtY29udGFpbmVyIj4KICAgICAgICAgIDxkaXYgY2xhc3M9InRpbWVmcmFtZXMtY29udGFpbmVyIj4KICAgICAgICAgICAgPGEgY2xhc3M9ImZvbnQtbGFyZ2VzdCBuby1saW5rIiBpZD0ic3lzdGVtLW1ldHJpY3MiIGhyZWY9IiNzeXN0ZW0tbWV0cmljcyI+U3lzdGVtIE1ldHJpY3M8L2E+CiAgICAgICAgICAgIDxhIGhyZWY9IiMiIGNsYXNzPSJ0aW1lZnJhbWUgY29sb3Itc2Vjb25kYXJ5IGZvbnQtcmVndWxhciBib3JkZXItY29sb3IiIGRhdGEtanMtaG9vaz0iZGF0YS10aW1lLXBlcmlvZC10b2dnbGUiIGRhdGEtdGltZS1wZXJpb2Q9Im1vbnRoIj5Nb250aDwvYT4KICAgICAgICAgICAgPGEgaHJlZj0iIyIgY2xhc3M9InRpbWVmcmFtZSBjb2xvci1zZWNvbmRhcnkgZm9udC1yZWd1bGFyIGJvcmRlci1jb2xvciIgZGF0YS1qcy1ob29rPSJkYXRhLXRpbWUtcGVyaW9kLXRvZ2dsZSIgZGF0YS10aW1lLXBlcmlvZD0id2VlayI+PHNwYW4gY2xhc3M9InRyYW5zbGF0aW9uX21pc3NpbmciIHRpdGxlPSJ0cmFuc2xhdGlvbiBtaXNzaW5nOiBlbi53ZWVrIj5XZWVrPC9zcGFuPjwvYT4KICAgICAgICAgICAgPGEgaHJlZj0iIyIgY2xhc3M9InRpbWVmcmFtZSBhY3RpdmUgY29sb3Itc2Vjb25kYXJ5IGZvbnQtcmVndWxhciBib3JkZXItY29sb3IiIGRhdGEtanMtaG9vaz0iZGF0YS10aW1lLXBlcmlvZC10b2dnbGUiIGRhdGEtdGltZS1wZXJpb2Q9ImRheSI+RGF5PC9hPgogICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJtZXRyaWNzLWNvbnRhaW5lciI+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWV0cmljIGJvcmRlci1jb2xvciI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZXRyaWMtbWV0YSBmb250LWxhcmdlIj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWV0cmljLW5hbWUgY29sb3ItcHJpbWFyeSI+CiAgICAgICAgICAgICAgICAgICAgV2Vic2l0ZSBhdmVyYWdlIHJlc3BvbnNlIHRpbWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgPGRpdiBkYXRhLWpzLWhvb2s9Im1ldHJpY3MtZGlzcGxheS1jdXJyZW50LXgyZnJ4NHk0ZGh5OCIgY2xhc3M9Im1ldHJpYy1hdmVyYWdlIGNvbG9yLXNlY29uZGFyeSI+PHNwYW4gY2xhc3M9InRyYW5zbGF0aW9uX21pc3NpbmciIHRpdGxlPSJ0cmFuc2xhdGlvbiBtaXNzaW5nOiBlbi5mZXRjaGluZyI+RmV0Y2hpbmc8L3NwYW4+PC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWV0cmljcy1kaXNwbGF5LWdyYXBoIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJncmFwaC1jb250YWluZXIiIGlkPSJtZXRyaWNzLWRpc3BsYXktZ3JhcGgtY29udGFpbmVyLXgyZnJ4NHk0ZGh5OCIgc3R5bGU9ImhlaWdodDogMTIwcHgiPjwvZGl2PgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZXRyaWMgYm9yZGVyLWNvbG9yIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1ldHJpYy1tZXRhIGZvbnQtbGFyZ2UiPgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZXRyaWMtbmFtZSBjb2xvci1wcmltYXJ5Ij4KICAgICAgICAgICAgICAgICAgICBBUEkgYXZlcmFnZSByZXNwb25zZSB0aW1lCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgIDxkaXYgZGF0YS1qcy1ob29rPSJtZXRyaWNzLWRpc3BsYXktY3VycmVudC1xY3I5N3BsY21ibGQiIGNsYXNzPSJtZXRyaWMtYXZlcmFnZSBjb2xvci1zZWNvbmRhcnkiPjxzcGFuIGNsYXNzPSJ0cmFuc2xhdGlvbl9taXNzaW5nIiB0aXRsZT0idHJhbnNsYXRpb24gbWlzc2luZzogZW4uZmV0Y2hpbmciPkZldGNoaW5nPC9zcGFuPjwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1ldHJpY3MtZGlzcGxheS1ncmFwaCI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZ3JhcGgtY29udGFpbmVyIiBpZD0ibWV0cmljcy1kaXNwbGF5LWdyYXBoLWNvbnRhaW5lci1xY3I5N3BsY21ibGQiIHN0eWxlPSJoZWlnaHQ6IDEyMHB4Ij48L2Rpdj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWV0cmljIGJvcmRlci1jb2xvciI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZXRyaWMtbWV0YSBmb250LWxhcmdlIj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWV0cmljLW5hbWUgY29sb3ItcHJpbWFyeSI+CiAgICAgICAgICAgICAgICAgICAgR2l0IGF2ZXJhZ2UgcmVzcG9uc2UgdGltZSAoSFRUUFMpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgIDxkaXYgZGF0YS1qcy1ob29rPSJtZXRyaWNzLWRpc3BsYXktY3VycmVudC1ycHF0OThzdjNwMnIiIGNsYXNzPSJtZXRyaWMtYXZlcmFnZSBjb2xvci1zZWNvbmRhcnkiPjxzcGFuIGNsYXNzPSJ0cmFuc2xhdGlvbl9taXNzaW5nIiB0aXRsZT0idHJhbnNsYXRpb24gbWlzc2luZzogZW4uZmV0Y2hpbmciPkZldGNoaW5nPC9zcGFuPjwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1ldHJpY3MtZGlzcGxheS1ncmFwaCI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZ3JhcGgtY29udGFpbmVyIiBpZD0ibWV0cmljcy1kaXNwbGF5LWdyYXBoLWNvbnRhaW5lci1ycHF0OThzdjNwMnIiIHN0eWxlPSJoZWlnaHQ6IDEyMHB4Ij48L2Rpdj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWV0cmljIGJvcmRlci1jb2xvciI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZXRyaWMtbWV0YSBmb250LWxhcmdlIj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWV0cmljLW5hbWUgY29sb3ItcHJpbWFyeSI+CiAgICAgICAgICAgICAgICAgICAgTWVyY3VyaWFsIGF2ZXJhZ2UgcmVzcG9uc2UgdGltZSAoSFRUUFMpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgIDxkaXYgZGF0YS1qcy1ob29rPSJtZXRyaWNzLWRpc3BsYXktY3VycmVudC1rcXI1N3B0MWw3djkiIGNsYXNzPSJtZXRyaWMtYXZlcmFnZSBjb2xvci1zZWNvbmRhcnkiPjxzcGFuIGNsYXNzPSJ0cmFuc2xhdGlvbl9taXNzaW5nIiB0aXRsZT0idHJhbnNsYXRpb24gbWlzc2luZzogZW4uZmV0Y2hpbmciPkZldGNoaW5nPC9zcGFuPjwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1ldHJpY3MtZGlzcGxheS1ncmFwaCI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZ3JhcGgtY29udGFpbmVyIiBpZD0ibWV0cmljcy1kaXNwbGF5LWdyYXBoLWNvbnRhaW5lci1rcXI1N3B0MWw3djkiIHN0eWxlPSJoZWlnaHQ6IDEyMHB4Ij48L2Rpdj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KCgogICAgICA8ZGl2IGNsYXNzPSJpbmNpZGVudHMtbGlzdCBmb3JtYXQtZXhwYW5kZWQiPgogICAgICAgIDxhIGNsYXNzPSJmb250LWxhcmdlc3Qgbm8tbGluayIgaWQ9InBhc3QtaW5jaWRlbnRzIiBocmVmPSIjcGFzdC1pbmNpZGVudHMiPlBhc3QgSW5jaWRlbnRzPC9hPgogICAgICAgICAgCiAgPGRpdiBjbGFzcz0ic3RhdHVzLWRheSBmb250LXJlZ3VsYXIgbm8taW5jaWRlbnRzIj4KICAgIDxkaXYgY2xhc3M9ImRhdGUgYm9yZGVyLWNvbG9yIGZvbnQtbGFyZ2UiPkp1biA8dmFyIGRhdGEtdmFyPSJkYXRlIj4yNDwvdmFyPiwgPHZhciBkYXRhLXZhcj0ieWVhciI+MjAxODwvdmFyPjwvZGl2PgogICAgICAgIDxwIGNsYXNzPSJjb2xvci1zZWNvbmRhcnkiPk5vIGluY2lkZW50cyByZXBvcnRlZCB0b2RheS48L3A+CiAgPC9kaXY+CgogICAgICAgICAgCiAgPGRpdiBjbGFzcz0ic3RhdHVzLWRheSBmb250LXJlZ3VsYXIgbm8taW5jaWRlbnRzIj4KICAgIDxkaXYgY2xhc3M9ImRhdGUgYm9yZGVyLWNvbG9yIGZvbnQtbGFyZ2UiPkp1biA8dmFyIGRhdGEtdmFyPSJkYXRlIj4yMzwvdmFyPiwgPHZhciBkYXRhLXZhcj0ieWVhciI+MjAxODwvdmFyPjwvZGl2PgogICAgICAgIDxwIGNsYXNzPSJjb2xvci1zZWNvbmRhcnkiPk5vIGluY2lkZW50cyByZXBvcnRlZC48L3A+CiAgPC9kaXY+CgogICAgICAgICAgCiAgPGRpdiBjbGFzcz0ic3RhdHVzLWRheSBmb250LXJlZ3VsYXIgbm8taW5jaWRlbnRzIj4KICAgIDxkaXYgY2xhc3M9ImRhdGUgYm9yZGVyLWNvbG9yIGZvbnQtbGFyZ2UiPkp1biA8dmFyIGRhdGEtdmFyPSJkYXRlIj4yMjwvdmFyPiwgPHZhciBkYXRhLXZhcj0ieWVhciI+MjAxODwvdmFyPjwvZGl2PgogICAgICAgIDxwIGNsYXNzPSJjb2xvci1zZWNvbmRhcnkiPk5vIGluY2lkZW50cyByZXBvcnRlZC48L3A+CiAgPC9kaXY+CgogICAgICAgICAgCiAgPGRpdiBjbGFzcz0ic3RhdHVzLWRheSBmb250LXJlZ3VsYXIgbm8taW5jaWRlbnRzIj4KICAgIDxkaXYgY2xhc3M9ImRhdGUgYm9yZGVyLWNvbG9yIGZvbnQtbGFyZ2UiPkp1biA8dmFyIGRhdGEtdmFyPSJkYXRlIj4yMTwvdmFyPiwgPHZhciBkYXRhLXZhcj0ieWVhciI+MjAxODwvdmFyPjwvZGl2PgogICAgICAgIDxwIGNsYXNzPSJjb2xvci1zZWNvbmRhcnkiPk5vIGluY2lkZW50cyByZXBvcnRlZC48L3A+CiAgPC9kaXY+CgogICAgICAgICAgCiAgPGRpdiBjbGFzcz0ic3RhdHVzLWRheSBmb250LXJlZ3VsYXIgbm8taW5jaWRlbnRzIj4KICAgIDxkaXYgY2xhc3M9ImRhdGUgYm9yZGVyLWNvbG9yIGZvbnQtbGFyZ2UiPkp1biA8dmFyIGRhdGEtdmFyPSJkYXRlIj4yMDwvdmFyPiwgPHZhciBkYXRhLXZhcj0ieWVhciI+MjAxODwvdmFyPjwvZGl2PgogICAgICAgIDxwIGNsYXNzPSJjb2xvci1zZWNvbmRhcnkiPk5vIGluY2lkZW50cyByZXBvcnRlZC48L3A+CiAgPC9kaXY+CgogICAgICAgICAgCiAgPGRpdiBjbGFzcz0ic3RhdHVzLWRheSBmb250LXJlZ3VsYXIgbm8taW5jaWRlbnRzIj4KICAgIDxkaXYgY2xhc3M9ImRhdGUgYm9yZGVyLWNvbG9yIGZvbnQtbGFyZ2UiPkp1biA8dmFyIGRhdGEtdmFyPSJkYXRlIj4xOTwvdmFyPiwgPHZhciBkYXRhLXZhcj0ieWVhciI+MjAxODwvdmFyPjwvZGl2PgogICAgICAgIDxwIGNsYXNzPSJjb2xvci1zZWNvbmRhcnkiPk5vIGluY2lkZW50cyByZXBvcnRlZC48L3A+CiAgPC9kaXY+CgogICAgICAgICAgCiAgPGRpdiBjbGFzcz0ic3RhdHVzLWRheSBmb250LXJlZ3VsYXIgbm8taW5jaWRlbnRzIj4KICAgIDxkaXYgY2xhc3M9ImRhdGUgYm9yZGVyLWNvbG9yIGZvbnQtbGFyZ2UiPkp1biA8dmFyIGRhdGEtdmFyPSJkYXRlIj4xODwvdmFyPiwgPHZhciBkYXRhLXZhcj0ieWVhciI+MjAxODwvdmFyPjwvZGl2PgogICAgICAgIDxwIGNsYXNzPSJjb2xvci1zZWNvbmRhcnkiPk5vIGluY2lkZW50cyByZXBvcnRlZC48L3A+CiAgPC9kaXY+CgogICAgICAgICAgCiAgPGRpdiBjbGFzcz0ic3RhdHVzLWRheSBmb250LXJlZ3VsYXIgbm8taW5jaWRlbnRzIj4KICAgIDxkaXYgY2xhc3M9ImRhdGUgYm9yZGVyLWNvbG9yIGZvbnQtbGFyZ2UiPkp1biA8dmFyIGRhdGEtdmFyPSJkYXRlIj4xNzwvdmFyPiwgPHZhciBkYXRhLXZhcj0ieWVhciI+MjAxODwvdmFyPjwvZGl2PgogICAgICAgIDxwIGNsYXNzPSJjb2xvci1zZWNvbmRhcnkiPk5vIGluY2lkZW50cyByZXBvcnRlZC48L3A+CiAgPC9kaXY+CgogICAgICAgICAgCiAgPGRpdiBjbGFzcz0ic3RhdHVzLWRheSBmb250LXJlZ3VsYXIgbm8taW5jaWRlbnRzIj4KICAgIDxkaXYgY2xhc3M9ImRhdGUgYm9yZGVyLWNvbG9yIGZvbnQtbGFyZ2UiPkp1biA8dmFyIGRhdGEtdmFyPSJkYXRlIj4xNjwvdmFyPiwgPHZhciBkYXRhLXZhcj0ieWVhciI+MjAxODwvdmFyPjwvZGl2PgogICAgICAgIDxwIGNsYXNzPSJjb2xvci1zZWNvbmRhcnkiPk5vIGluY2lkZW50cyByZXBvcnRlZC48L3A+CiAgPC9kaXY+CgogICAgICAgICAgCiAgPGRpdiBjbGFzcz0ic3RhdHVzLWRheSBmb250LXJlZ3VsYXIgbm8taW5jaWRlbnRzIj4KICAgIDxkaXYgY2xhc3M9ImRhdGUgYm9yZGVyLWNvbG9yIGZvbnQtbGFyZ2UiPkp1biA8dmFyIGRhdGEtdmFyPSJkYXRlIj4xNTwvdmFyPiwgPHZhciBkYXRhLXZhcj0ieWVhciI+MjAxODwvdmFyPjwvZGl2PgogICAgICAgIDxwIGNsYXNzPSJjb2xvci1zZWNvbmRhcnkiPk5vIGluY2lkZW50cyByZXBvcnRlZC48L3A+CiAgPC9kaXY+CgogICAgICAgICAgCiAgPGRpdiBjbGFzcz0ic3RhdHVzLWRheSBmb250LXJlZ3VsYXIgIj4KICAgIDxkaXYgY2xhc3M9ImRhdGUgYm9yZGVyLWNvbG9yIGZvbnQtbGFyZ2UiPkp1biA8dmFyIGRhdGEtdmFyPSJkYXRlIj4xNDwvdmFyPiwgPHZhciBkYXRhLXZhcj0ieWVhciI+MjAxODwvdmFyPjwvZGl2PgogICAgICAgICAgPGRpdiBjbGFzcz0iaW5jaWRlbnQtY29udGFpbmVyIj4KICA8ZGl2IGNsYXNzPSJpbmNpZGVudC10aXRsZSBpbXBhY3QtbWFpbnRlbmFuY2UgZm9udC1sYXJnZSI+CiAgICA8YSBocmVmPSIvaW5jaWRlbnRzLzAycndoajBwZGQzaCI+U3RvcmFnZSBtYWludGVuYW5jZTwvYT4KICA8L2Rpdj4KCiAgPGRpdiBjbGFzcz0idXBkYXRlcy1jb250YWluZXIiPgogICAgICA8ZGl2IGNsYXNzPSJ1cGRhdGUgZm9udC1yZWd1bGFyIGNvbXBsZXRlZCI+CiAgICAgICAgPHN0cm9uZz5Db21wbGV0ZWQ8L3N0cm9uZz4gLQogICAgICAgIAlUaGUgc2NoZWR1bGVkIG1haW50ZW5hbmNlIGhhcyBiZWVuIGNvbXBsZXRlZC4KICAgICAgICA8YnI+CiAgICAgICAgPHNtYWxsPgogICAgICAgICAgICBKdW4gPHZhciBkYXRhLXZhcj0nZGF0ZSc+MTQ8L3Zhcj4sIDx2YXIgZGF0YS12YXI9J3RpbWUnPjIxOjUyPC92YXI+IFVUQwogICAgICAgIDwvc21hbGw+CiAgICAgIDwvZGl2PgogICAgICA8ZGl2IGNsYXNzPSJ1cGRhdGUgZm9udC1yZWd1bGFyIGluIHByb2dyZXNzIj4KICAgICAgICA8c3Ryb25nPkluIHByb2dyZXNzPC9zdHJvbmc+IC0KICAgICAgICAJU2NoZWR1bGVkIG1haW50ZW5hbmNlIGlzIGN1cnJlbnRseSBpbiBwcm9ncmVzcy4gV2Ugd2lsbCBwcm92aWRlIHVwZGF0ZXMgYXMgbmVjZXNzYXJ5LgogICAgICAgIDxicj4KICAgICAgICA8c21hbGw+CiAgICAgICAgICAgIEp1biA8dmFyIGRhdGEtdmFyPSdkYXRlJz4xNDwvdmFyPiwgPHZhciBkYXRhLXZhcj0ndGltZSc+MjA6MDA8L3Zhcj4gVVRDCiAgICAgICAgPC9zbWFsbD4KICAgICAgPC9kaXY+CiAgICAgIDxkaXYgY2xhc3M9InVwZGF0ZSBmb250LXJlZ3VsYXIgc2NoZWR1bGVkIj4KICAgICAgICA8c3Ryb25nPlNjaGVkdWxlZDwvc3Ryb25nPiAtCiAgICAgICAgCVdlIHdpbGwgYmUgdXBncmFkaW5nIHRoZSBzeXN0ZW0gc29mdHdhcmUgb24gb3VyIHN0b3JhZ2UgbGF5ZXIuIFRoaXMgaXMgYSBwcm9hY3RpdmUgbWFpbnRlbmFuY2UgYXMgcmVjb21tZW5kZWQgYnkgdGhlIG1hbnVmYWN0dXJlci4gSXQgaXMgcGVyZm9ybWVkIGF1dG9tYXRpY2FsbHkgb24gYSByb2xsaW5nIGJhc2lzIGFuZCBpcyBub3QgZXhwZWN0ZWQgdG8gY2F1c2UgYW55IGRpc3J1cHRpb24uCiAgICAgICAgPGJyPgogICAgICAgIDxzbWFsbD4KICAgICAgICAgICAgSnVuIDx2YXIgZGF0YS12YXI9J2RhdGUnPjEyPC92YXI+LCA8dmFyIGRhdGEtdmFyPSd0aW1lJz4xODozMDwvdmFyPiBVVEMKICAgICAgICA8L3NtYWxsPgogICAgICA8L2Rpdj4KICA8L2Rpdj4KCjwvZGl2PgoKICA8L2Rpdj4KCiAgICAgICAgICAKICA8ZGl2IGNsYXNzPSJzdGF0dXMtZGF5IGZvbnQtcmVndWxhciBuby1pbmNpZGVudHMiPgogICAgPGRpdiBjbGFzcz0iZGF0ZSBib3JkZXItY29sb3IgZm9udC1sYXJnZSI+SnVuIDx2YXIgZGF0YS12YXI9ImRhdGUiPjEzPC92YXI+LCA8dmFyIGRhdGEtdmFyPSJ5ZWFyIj4yMDE4PC92YXI+PC9kaXY+CiAgICAgICAgPHAgY2xhc3M9ImNvbG9yLXNlY29uZGFyeSI+Tm8gaW5jaWRlbnRzIHJlcG9ydGVkLjwvcD4KICA8L2Rpdj4KCiAgICAgICAgICAKICA8ZGl2IGNsYXNzPSJzdGF0dXMtZGF5IGZvbnQtcmVndWxhciBuby1pbmNpZGVudHMiPgogICAgPGRpdiBjbGFzcz0iZGF0ZSBib3JkZXItY29sb3IgZm9udC1sYXJnZSI+SnVuIDx2YXIgZGF0YS12YXI9ImRhdGUiPjEyPC92YXI+LCA8dmFyIGRhdGEtdmFyPSJ5ZWFyIj4yMDE4PC92YXI+PC9kaXY+CiAgICAgICAgPHAgY2xhc3M9ImNvbG9yLXNlY29uZGFyeSI+Tm8gaW5jaWRlbnRzIHJlcG9ydGVkLjwvcD4KICA8L2Rpdj4KCiAgICAgICAgICAKICA8ZGl2IGNsYXNzPSJzdGF0dXMtZGF5IGZvbnQtcmVndWxhciBuby1pbmNpZGVudHMiPgogICAgPGRpdiBjbGFzcz0iZGF0ZSBib3JkZXItY29sb3IgZm9udC1sYXJnZSI+SnVuIDx2YXIgZGF0YS12YXI9ImRhdGUiPjExPC92YXI+LCA8dmFyIGRhdGEtdmFyPSJ5ZWFyIj4yMDE4PC92YXI+PC9kaXY+CiAgICAgICAgPHAgY2xhc3M9ImNvbG9yLXNlY29uZGFyeSI+Tm8gaW5jaWRlbnRzIHJlcG9ydGVkLjwvcD4KICA8L2Rpdj4KCiAgICAgICAgICAKICA8ZGl2IGNsYXNzPSJzdGF0dXMtZGF5IGZvbnQtcmVndWxhciBuby1pbmNpZGVudHMiPgogICAgPGRpdiBjbGFzcz0iZGF0ZSBib3JkZXItY29sb3IgZm9udC1sYXJnZSI+SnVuIDx2YXIgZGF0YS12YXI9ImRhdGUiPjEwPC92YXI+LCA8dmFyIGRhdGEtdmFyPSJ5ZWFyIj4yMDE4PC92YXI+PC9kaXY+CiAgICAgICAgPHAgY2xhc3M9ImNvbG9yLXNlY29uZGFyeSI+Tm8gaW5jaWRlbnRzIHJlcG9ydGVkLjwvcD4KICA8L2Rpdj4KCiAgICAgIDwvZGl2PgoKCiAgICAgIDxkaXYgY2xhc3M9InBhZ2UtZm9vdGVyIGJvcmRlci1jb2xvciBmb250LXNtYWxsIj4KICAgICAgICAgIDxhIGhyZWY9Ii9oaXN0b3J5IiBjbGFzcz0iaGlzdG9yeS1mb290ZXItbGluayI+PHNwYW4gc3R5bGU9ImZvbnQtZmFtaWx5OmFyaWFsIj4mbGFycjs8L3NwYW4+IEluY2lkZW50IEhpc3Rvcnk8L2E+CgogICAgICAgIDxzcGFuIGNsYXNzPSJjb2xvci1zZWNvbmRhcnkgcG93ZXJlZC1ieSI+UG93ZXJlZCBieQogICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cuc3RhdHVzcGFnZS5pby8/dXRtX3NvdXJjZT1pbmFwcCZ1dG1fbWVkaXVtPXBvd2VyZWQtYnkmdXRtX2NhbXBhaWduPXN0YXR1cy5iaXRidWNrZXQub3JnJnV0bV9jb250ZW50PXN0YXR1cy1wYWdlcyIgdGFyZ2V0PSJfYmxhbmsiIGNsYXNzPSJjb2xvci1zZWNvbmRhcnkiPlN0YXR1c3BhZ2U8L2E+CiAgICAgICAgPC9zcGFuPgogICAgICA8L2Rpdj4KICAgIDwvZGl2PgoKICAgICAgPGRpdiBjbGFzcz0iY3VzdG9tLWZvb3Rlci1jb250YWluZXIiPgogICAgPGZvb3RlciBpZD0iZm9vdGVyIiByb2xlPSJjb250ZW50aW5mbyI+DQogIDxzZWN0aW9uIGNsYXNzPSJmb290ZXItYm9keSI+DQogICAgPHVsPg0KICAgICAgPGxpPg0KICAgICAgICA8YSBvcmlnaW5hbC10aXRsZT0iIiBjbGFzcz0ic3VwcG9ydC1nYSIgdGFyZ2V0PSJfYmxhbmsiIGRhdGEtc3VwcG9ydC1nYXEtcGFnZT0iQmxvZyIgaHJlZj0iaHR0cDovL2Jsb2cuYml0YnVja2V0Lm9yZy8iPkJsb2c8L2E+DQogICAgICA8L2xpPg0KICAgICAgPGxpPg0KICAgICAgICA8YSBvcmlnaW5hbC10aXRsZT0iIiBjbGFzcz0ic3VwcG9ydC1nYSIgdGFyZ2V0PSJfYmxhbmsiIGRhdGEtc3VwcG9ydC1nYXEtcGFnZT0iRG9jdW1lbnRhdGlvbkhvbWUiIGhyZWY9Imh0dHBzOi8vY29uZmx1ZW5jZS5hdGxhc3NpYW4uY29tL2Rpc3BsYXkvQklUQlVDS0VUIj5Eb2N1bWVudGF0aW9uPC9hPg0KICAgICAgPC9saT4NCiAgICAgIDxsaT4NCiAgICAgICAgPGEgb3JpZ2luYWwtdGl0bGU9IiIgY2xhc3M9InN1cHBvcnQtZ2EiIHRhcmdldD0iX2JsYW5rIiBkYXRhLXN1cHBvcnQtZ2FxLXBhZ2U9IkRvY3VtZW50YXRpb25BUEkiIGhyZWY9Imh0dHBzOi8vY29uZmx1ZW5jZS5hdGxhc3NpYW4uY29tL3gvSVlCR0RRIj5BUEk8L2E+DQogICAgICA8L2xpPg0KICAgICAgPGxpPg0KICAgICAgICA8YSBvcmlnaW5hbC10aXRsZT0iIiBjbGFzcz0ic3VwcG9ydC1nYSIgdGFyZ2V0PSJfYmxhbmsiIGRhdGEtc3VwcG9ydC1nYXEtcGFnZT0iU2l0ZVN0YXR1cyIgaHJlZj0iaHR0cDovL3N0YXR1cy5iaXRidWNrZXQub3JnLyI+U2VydmVyIHN0YXR1czwvYT4NCiAgICAgIDwvbGk+DQogICAgICA8bGk+DQogICAgICAgIDxhIG9yaWdpbmFsLXRpdGxlPSIiIGNsYXNzPSJzdXBwb3J0LWdhIiB0YXJnZXQ9Il9ibGFuayIgZGF0YS1zdXBwb3J0LWdhcS1wYWdlPSJFbmRVc2VyQWdyZWVtZW50IiBocmVmPSJodHRwczovL3d3dy5hdGxhc3NpYW4uY29tL2VuZC11c2VyLWFncmVlbWVudD91dG1fc291cmNlPWJpdGJ1Y2tldCZhbXA7dXRtX21lZGl1bT1saW5rJmFtcDt1dG1fY2FtcGFpZ249Zm9vdGVyIj5UZXJtcyBvZiBzZXJ2aWNlPC9hPg0KICAgICAgPC9saT4NCiAgICAgIDxsaT4NCiAgICAgICAgPGEgb3JpZ2luYWwtdGl0bGU9IiIgY2xhc3M9InN1cHBvcnQtZ2EiIHRhcmdldD0iX2JsYW5rIiBkYXRhLXN1cHBvcnQtZ2FxLXBhZ2U9IlByaXZhY3lQb2xpY3kiIGhyZWY9Imh0dHBzOi8vd3d3LmF0bGFzc2lhbi5jb20vY29tcGFueS9wcml2YWN5P3V0bV9zb3VyY2U9Yml0YnVja2V0JmFtcDt1dG1fbWVkaXVtPWxpbmsmYW1wO3V0bV9jYW1wYWlnbj1mb290ZXIiPlByaXZhY3kgcG9saWN5PC9hPg0KICAgICAgPC9saT4NCiAgICA8L3VsPg0KICAgIDx1bCBjbGFzcz0iYXRsYXNzaWFuLWxpbmtzIj4NCiAgICAgIDxsaT4NCiAgICAgICAgPGEgb3JpZ2luYWwtdGl0bGU9IlRyYWNrIGV2ZXJ5dGhpbmcg4oCTIGJ1Z3MsIHRhc2tzLCBkZWFkbGluZXMsIANjb2RlIOKAkyBhbmQgcHVsbCByZXBvcnRzIHRvIHN0YXkgaW5mb3JtZWQuIiBpZD0iYXRsYXNzaWFuLWppcmEtbGluayIgdGFyZ2V0PSJfYmxhbmsiIGhyZWY9Imh0dHA6Ly93d3cuYXRsYXNzaWFuLmNvbS9zb2Z0d2FyZS9qaXJhP3V0bV9zb3VyY2U9Yml0YnVja2V0JmFtcDt1dG1fbWVkaXVtPWxpbmsmYW1wO3V0bV9jYW1wYWlnbj1iaXRidWNrZXRfZm9vdGVyIj5KSVJBPC9hPg0KICAgICAgPC9saT4NCiAgICAgIDxsaT4NCiAgICAgICAgPGEgb3JpZ2luYWwtdGl0bGU9IkNvbnRlbnQgQ3JlYXRpb24sIENvbGxhYm9yYXRpb24gJmFtcDsgS25vd2xlZGdlIFNoYXJpbmcgZm9yIFRlYW1zLiIgaWQ9ImF0bGFzc2lhbi1jb25mbHVlbmNlLWxpbmsiIHRhcmdldD0iX2JsYW5rIiBocmVmPSJodHRwOi8vd3d3LmF0bGFzc2lhbi5jb20vc29mdHdhcmUvY29uZmx1ZW5jZS9vdmVydmlldy90ZWFtLWNvbGxhYm9yYXRpb24tc29mdHdhcmU/dXRtX3NvdXJjZT1iaXRidWNrZXQmYW1wO3V0bV9tZWRpdW09bGluayZhbXA7dXRtX2NhbXBhaWduPWJpdGJ1Y2tldF9mb290ZXIiPkNvbmZsdWVuY2U8L2E+DQogICAgICA8L2xpPg0KICAgICAgPGxpPg0KICAgICAgICA8YSBvcmlnaW5hbC10aXRsZT0iQ29udGludW91cyBpbnRlZ3JhdGlvbiBhbmQgZGVwbG95bWVudCwgcmVsZWFzZSBtYW5hZ2VtZW50LiIgaWQ9ImF0bGFzc2lhbi1iYW1ib28tbGluayIgdGFyZ2V0PSJfYmxhbmsiIGhyZWY9Imh0dHA6Ly93d3cuYXRsYXNzaWFuLmNvbS9zb2Z0d2FyZS9iYW1ib28vb3ZlcnZpZXc/dXRtX3NvdXJjZT1iaXRidWNrZXQmYW1wO3V0bV9tZWRpdW09bGluayZhbXA7dXRtX2NhbXBhaWduPWJpdGJ1Y2tldF9mb290ZXIiPkJhbWJvbzwvYT4NCiAgICAgIDwvbGk+DQogICAgICA8bGk+DQogICAgICAgIDxhIG9yaWdpbmFsLXRpdGxlPSJHaXQgcmVwbyBtYW5hZ2VtZW50LCBiZWhpbmQgeW91ciBmaXJld2FsbCBhbmQgRW50ZXJwcmlzZS1yZWFkeS4iIGlkPSJhdGxhc3NpYW4tc3Rhc2gtbGluayIgdGFyZ2V0PSJfYmxhbmsiIGhyZWY9Imh0dHA6Ly93d3cuYXRsYXNzaWFuLmNvbS9zb2Z0d2FyZS9zdGFzaC9vdmVydmlldz91dG1fc291cmNlPWJpdGJ1Y2tldCZhbXA7dXRtX21lZGl1bT1saW5rJmFtcDt1dG1fY2FtcGFpZ249Yml0YnVja2V0X2Zvb3RlciI+U3Rhc2g8L2E+DQogICAgICA8L2xpPg0KICAgICAgPGxpPg0KICAgICAgICA8YSBvcmlnaW5hbC10aXRsZT0iQSBmcmVlIEdpdCBhbmQgTWVyY3VyaWFsIGRlc2t0b3AgY2xpZW50IGZvciBNYWMgb3IgV2luZG93cy4iIGlkPSJhdGxhc3NpYW4tc291cmNldHJlZS1saW5rIiB0YXJnZXQ9Il9ibGFuayIgaHJlZj0iaHR0cDovL3d3dy5zb3VyY2V0cmVlYXBwLmNvbS8/dXRtX3NvdXJjZT1iaXRidWNrZXQmYW1wO3V0bV9tZWRpdW09bGluayZhbXA7dXRtX2NhbXBhaWduPWJpdGJ1Y2tldF9mb290ZXIiPlNvdXJjZVRyZWU8L2E+DQogICAgICA8L2xpPg0KICAgIDwvdWw+DQogICAgPGRpdiBpZD0iZm9vdGVyLWxvZ28iPg0KICAgICAgPGEgb3JpZ2luYWwtdGl0bGU9IkJpdGJ1Y2tldCBpcyBkZXZlbG9wZWQgYnkgQXRsYXNzaWFuIGluIFNhbiBGcmFuY2lzY28uIiB0YXJnZXQ9Il9ibGFuayIgaHJlZj0iaHR0cDovL3d3dy5hdGxhc3NpYW4uY29tLz91dG1fc291cmNlPWJpdGJ1Y2tldCZhbXA7dXRtX21lZGl1bT1sb2dvJmFtcDt1dG1fY2FtcGFpZ249Yml0YnVja2V0X2Zvb3RlciI+QXRsYXNzaWFuPC9hPg0KICAgIDwvZGl2Pg0KICA8L3NlY3Rpb24+DQo8L2Zvb3Rlcj4KICA8L2Rpdj4KCgogIDwvZGl2PgoKCgo8IS0tIGN1c3RvbSBtZXRyaWNzIHN0dWZmIC0tPgogIAoKCgoKCiAgICA8c2NyaXB0IHNyYz0iaHR0cHM6Ly9ka2E1NzVvZm00YW8wLmNsb3VkZnJvbnQubmV0L2Fzc2V0cy9zdGF0dXNfbWFuaWZlc3QtNWVjZGJlYmVmMjI1NGQ5ZmM2MmJkOTE1ZGFjMWMwMWMzODFlNmNlMGU3MmU2NjYyYmFkNTczODI0ZmEyNzk2Ni5qcyI+PC9zY3JpcHQ+CiAgICAKCiAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgIChmdW5jdGlvbigpIHsKICAgICAgICB3aW5kb3cuX3BhID0gd2luZG93Ll9wYSB8fCB7fTsKICAgICAgICAvLyBfcGEub3JkZXJJZCA9ICJteUN1c3RvbWVyQGVtYWlsLmNvbSI7IC8vIE9QVElPTkFMOiBhdHRhY2ggdXNlciBlbWFpbCBvciBvcmRlciBJRCB0byBjb252ZXJzaW9ucwogICAgICAgIC8vIF9wYS5yZXZlbnVlID0gIjE5Ljk5IjsgLy8gT1BUSU9OQUw6IGF0dGFjaCBkeW5hbWljIHB1cmNoYXNlIHZhbHVlcyB0byBjb252ZXJzaW9ucwogICAgICAgIHZhciBwYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpOyBwYS50eXBlID0gJ3RleHQvamF2YXNjcmlwdCc7IHBhLmFzeW5jID0gdHJ1ZTsKICAgICAgICBwYS5zcmMgPSAoJ2h0dHBzOicgPT0gZG9jdW1lbnQubG9jYXRpb24ucHJvdG9jb2wgPyAnaHR0cHM6JyA6ICdodHRwOicpICsgIi8vdGFnLnBlcmZlY3RhdWRpZW5jZS5jb20vc2VydmUvNTE4NzM1N2QzZmMxMTUwMDAyMDAwM2IxLmpzIjsKICAgICAgICB2YXIgcyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzY3JpcHQnKVswXTsgcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZShwYSwgcyk7CiAgICAgIH0pKCk7CiAgICA8L3NjcmlwdD4KCgoKCgoKICAgIDwhLS0gYWxsIG9mIHRoZSBjb250ZW50X2ZvciBzdHVmZiAtLT4KICAgICAgPHNjcmlwdCBzcmM9Imh0dHBzOi8vZGthNTc1b2ZtNGFvMC5jbG91ZGZyb250Lm5ldC9hc3NldHMvcmVnaXN0ZXJfc3Vic2NyaXB0aW9uX2Zvcm0tM2ZkNzA0MTZhYzU2N2M5ZTgwZmI0ZTFjMGJmZGUwZGU3NzlkYjkwZTgwYmJmMjhmYWJjYWJhNjJjMDA0OTg0Yi5qcyI+PC9zY3JpcHQ+CgogIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgICAgJChmdW5jdGlvbigpIHsKICAgICAgICAgIFNQLmN1cnJlbnRQYWdlLnJlZ2lzdGVyU3Vic2NyaXB0aW9uRm9ybSgnZW1haWwnKTsKCiAgICAgICAgICBTUC5jdXJyZW50UGFnZS5yZWdpc3RlclN1YnNjcmlwdGlvbkZvcm0oJ3NtcycpOwoKICAgICAgICAgIFNQLmN1cnJlbnRQYWdlLnJlZ2lzdGVyU3Vic2NyaXB0aW9uRm9ybSgnd2ViaG9vaycpOwogICAgICB9KTsKCgoKICAgICAgICAkKGZ1bmN0aW9uKCkgewogICAgICAgIH0pOwoKCgogIDwvc2NyaXB0PgogIDxzY3JpcHQgc3JjPSJodHRwczovL2RrYTU3NW9mbTRhbzAuY2xvdWRmcm9udC5uZXQvYXNzZXRzL3N0YXR1c19jb21tb24tZjhiMzU1ODZkN2U2ODIwYzI3NjFlODIyYzk4NjBhOWFkNWYzNzA2NDY3YTBmMmVhNzkyOTkwZWQ3Njk1OGYyMC5qcyI+PC9zY3JpcHQ+CiAgPHNjcmlwdD4KICAgIFNQLnBvbGxGb3JDaGFuZ2VzKCcvaW5kZXguanNvbicpOwogIDwvc2NyaXB0PgoKICA8c2NyaXB0PgogICAgJChmdW5jdGlvbigpIHsKCiAgICAgICQoJy50b29sJykudG9vbHRpcHN0ZXIoewogICAgICAgIGFuaW1hdGlvbkR1cmF0aW9uOiAxMDAsCiAgICAgICAgY29udGVudEFzSFRNTDogdHJ1ZSwKICAgICAgICBkZWxheTogMTAwLAogICAgICAgIHRoZW1lOiAndG9vbHRpcHN0ZXItYm9yZGVybGVzcycsCiAgICAgICAgZnVuY3Rpb25Jbml0OiBmdW5jdGlvbiAoaW5zdGFuY2UsIGhlbHBlcikgewogICAgICAgICAgdmFyICRvcmlnaW4gPSAkKGhlbHBlci5vcmlnaW4pLAogICAgICAgICAgICAgIGRhdGFPcHRpb25zID0gJG9yaWdpbi5hdHRyKCdkYXRhLXRvb2x0aXAtY29uZmlnJyk7CiAgICAgICAgICBpZiAoZGF0YU9wdGlvbnMpewogICAgICAgICAgICBkYXRhT3B0aW9ucyA9IEpTT04ucGFyc2UoZGF0YU9wdGlvbnMpOwogICAgICAgICAgICAkLmVhY2goZGF0YU9wdGlvbnMsIGZ1bmN0aW9uKG5hbWUsIG9wdGlvbil7CiAgICAgICAgICAgICAgICBpbnN0YW5jZS5vcHRpb24obmFtZSwgb3B0aW9uKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9KTsKCiAgICAgIHZhciBOT05fT1BFUkFUSU9OQUxfU1RBVFVTRVMgPSBbJ21ham9yX291dGFnZScsICdwYXJ0aWFsX291dGFnZSddOwoKICAgICAgLy8gUmV0dXJucyBhbiBhcnJheSBvZiBjb21wb25lbnRzIGluIGEgbm9uLW9wZXJhdGlvbmFsIHN0YXRlCiAgICAgIGZ1bmN0aW9uIG5vbk9wZXJhdGlvbmFsQ29tcG9uZW50cyAoY29tcG9uZW50cykgewogICAgICAgIHZhciByZXN1bHQgPSBbXTsKICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvbXBvbmVudHMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgIHZhciBzdGF0dXMgPSBjb21wb25lbnRzW2ldLmdldEF0dHJpYnV0ZSgnZGF0YS1jb21wb25lbnQtc3RhdHVzJyk7CiAgICAgICAgICBpZiAofk5PTl9PUEVSQVRJT05BTF9TVEFUVVNFUy5pbmRleE9mKHN0YXR1cykpIHsKICAgICAgICAgICAgcmVzdWx0LnB1c2goY29tcG9uZW50c1tpXSk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH0KCiAgICAgIC8vIFVwZGF0ZSB0aGUgZ2l2ZW4gY29tcG9uZW50J3MgdG9vbHRpcHMgdG8gcmVwcmVzZW50IGFjY3VyYXRlIHVwZGF0ZSBkZWx0YXMKICAgICAgZnVuY3Rpb24gdXBkYXRlU2hvd2Nhc2VkQ29tcG9uZW50cyAoY29tcG9uZW50cykgewogICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29tcG9uZW50cy5sZW5ndGg7IGkrKykgewogICAgICAgICAgdXBkYXRlQ29tcG9uZW50VG9vbFRpcChjb21wb25lbnRzW2ldKQogICAgICAgIH0KICAgICAgfQoKICAgICAgLy8gUmV0dXJucyB0aGUgY2xpZW50J3MgY3VycmVudCBlcG9jaCB0aW1lCiAgICAgIGZ1bmN0aW9uIGN1cnJlbnRUaW1lICgpIHsKICAgICAgICByZXR1cm4gTWF0aC5mbG9vcigobmV3IERhdGUpLmdldFRpbWUoKSAvIDEwMDApOwogICAgICB9CgogICAgICAvLyBSZXR1cm5zIHRoZSBsYXN0ICh0b2RheSdzKSByZWN0IGZvciBhIGdpdmVuIGNvbXBvbmVudAogICAgICBmdW5jdGlvbiB0b2RheXNSZWN0IChjb21wb25lbnQpIHsKICAgICAgICB2YXIgcmVjdHMgPSBjb21wb25lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3JlY3QnKTsKICAgICAgICByZXR1cm4gcmVjdHNbcmVjdHMubGVuZ3RoIC0gMV07CiAgICAgIH0KCiAgICAgIC8vIFBhcnNlcyB0aGUgY29tcG9uZW50cyBjdXJyZW50IHN0YXR1cwogICAgICBmdW5jdGlvbiBjb21wb25lbnRTdGF0dXMgKGNvbXBvbmVudCkgewogICAgICAgIHJldHVybiBjb21wb25lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLWNvbXBvbmVudC1zdGF0dXMnKTsKICAgICAgfQoKICAgICAgLy8gUGFyc2VzIHRoZSBpc3N1ZWQgbWV0YSB0YWcgYW4gcmV0dXJucyB0aGUgZXBvY2ggdGltZSBzdGFtcAogICAgICBmdW5jdGlvbiBwYWdlVXBkYXRlZEF0ICgpIHsKICAgICAgICB2YXIgbWV0YXMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnbWV0YScpOwogICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWV0YXMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgIGlmIChtZXRhc1tpXS5nZXRBdHRyaWJ1dGUoJ25hbWUnKSA9PT0gJ2lzc3VlZCcpIHsKICAgICAgICAgICAgcmV0dXJuIHBhcnNlSW50KG1ldGFzW2ldLmdldEF0dHJpYnV0ZSgnY29udGVudCcpKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIGN1cnJlbnRUaW1lKCk7CiAgICAgIH0KCiAgICAgIC8vIFJldHVybnMgYSByZWN0J3MgdG9vbHRpcCBpbnN0YW5jZQogICAgICBmdW5jdGlvbiB0b29sdGlwSW5zdGFuY2UgKHJlY3QpIHsKICAgICAgICByZXR1cm4gJChyZWN0KS50b29sdGlwc3RlcignaW5zdGFuY2UnKTsKICAgICAgfQoKICAgICAgLy8gUmV0dXJucyBhIHRpbWUgb2JqZWN0IHJlcHJlc2VudGluZyB0aGUgdGltZSBzaW5jZSB0aGUgcGFnZSBoYXMgYmVlbiBjYWNoZWQsCiAgICAgIC8vIGFjY29yZGluZyB0byB0aGUgYnJvd3NlcgogICAgICBmdW5jdGlvbiB0aW1lU2luY2VVcGRhdGUgKCkgewogICAgICAgIHZhciBtaW51dGVzU2luY2VVcGRhdGUgPSBNYXRoLnJvdW5kKChjdXJyZW50VGltZSgpIC0gcGFnZVVwZGF0ZWRBdCgpKSAvIDYwKTsKCiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgIGhvdXJzOiBNYXRoLmZsb29yKG1pbnV0ZXNTaW5jZVVwZGF0ZSAvIDYwKSwKICAgICAgICAgIG1pbnV0ZXM6IG1pbnV0ZXNTaW5jZVVwZGF0ZSAlIDYwLAogICAgICAgIH07CiAgICAgIH0KCiAgICAgIC8vIFBhcnNlIGEgc3RhdHVzIHN1YnN0cmluZywgYW5kIHJldHVybiBhIHRpbWUgb2JqZWN0CiAgICAgIGZ1bmN0aW9uIHRpbWVGcm9tU3RyaW5nIChzdHJpbmcpIHsKICAgICAgICB2YXIgaG91ck1hdGNoID0gc3RyaW5nLm1hdGNoKC8oXGQrKWgvKTsKICAgICAgICB2YXIgbWludXRlTWF0Y2ggPSBzdHJpbmcubWF0Y2goLyhcZCspbS8pOwogICAgICAgIHZhciBob3VycyA9IGhvdXJNYXRjaCA/IHBhcnNlSW50KGhvdXJNYXRjaFsxXSkgOiAwOwogICAgICAgIHZhciBtaW51dGVzID0gbWludXRlTWF0Y2ggPyBwYXJzZUludChtaW51dGVNYXRjaFsxXSkgOiAwOwoKICAgICAgICByZXR1cm4gewogICAgICAgICAgaG91cnM6IGhvdXJzLAogICAgICAgICAgbWludXRlczogbWludXRlcywKICAgICAgICB9OwogICAgICB9CgogICAgICAvLyBNZXJnZSB0d28gdGltZSBvYmplY3RzCiAgICAgIGZ1bmN0aW9uIGluY3JlYXNlZFRpbWVCeSh0aW1lLCB1cGRhdGUpIHsKICAgICAgICB2YXIgbWludXRlcyA9ICh0aW1lLmhvdXJzICogNjApICsgdGltZS5taW51dGVzOwogICAgICAgIHZhciB1cGRhdGVkTWludXRlcyA9ICgodXBkYXRlLmhvdXJzICogNjApICsgdXBkYXRlLm1pbnV0ZXMpICsgbWludXRlczsKCiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgIGhvdXJzOiBNYXRoLmZsb29yKHVwZGF0ZWRNaW51dGVzIC8gNjApLAogICAgICAgICAgbWludXRlczogdXBkYXRlZE1pbnV0ZXMgJSA2MAogICAgICAgIH07CiAgICAgIH0KCiAgICAgIC8vIG91dHB1dHMgYSBzdGF0dXMgc3Vic3RyaW5nLCBnaXZlbiBhIHN0YXR1cyBhbmQgdGltZSBvYmplY3QKICAgICAgLy8gZXguICcyaCAzMW0gb2YgbWFqb3Igb3V0YWdlJwogICAgICBmdW5jdGlvbiBkdXJhdGlvbk9mU3RhdHVzKHN0YXR1cywgdGltZSkgewogICAgICAgIHZhciBvdXRwdXQgPSBbXTsKICAgICAgICBpZiAodGltZS5ob3VycyA+IDApIG91dHB1dC5wdXNoKHRpbWUuaG91cnMgKyAnaCcpCiAgICAgICAgaWYgKHRpbWUubWludXRlcyA+IDApIG91dHB1dC5wdXNoKHRpbWUubWludXRlcyArICdtJyk7CiAgICAgICAgb3V0cHV0LnB1c2goJ29mJyk7CiAgICAgICAgb3V0cHV0LnB1c2goc3RhdHVzLnJlcGxhY2UoJ18nLCAnICcpKTsKICAgICAgICByZXR1cm4gb3V0cHV0LmpvaW4oJyAnKTsKICAgICAgfQoKICAgICAgZnVuY3Rpb24gdXBkYXRlQ29tcG9uZW50VG9vbFRpcCAoY29tcG9uZW50KSB7CiAgICAgICAgLy8gR3JhYiB0aGUgY3VycmVudCBzdGF0dXMgd2UncmUgb3BlcmF0aW5nIG9uCiAgICAgICAgdmFyIGN1cnJlbnRTdGF0dXMgPSBjb21wb25lbnRTdGF0dXMoY29tcG9uZW50KTsKICAgICAgICAvLyBUaGUgbGFzdCByZWN0ICh0b2RheSkgaXMgdGhlIHRvb2x0aXAgd2UgbmVlZCB0byB1cGRhdGUKICAgICAgICB2YXIgbGFzdFJlY3QgPSB0b2RheXNSZWN0KGNvbXBvbmVudCk7CiAgICAgICAgdmFyIHRvb2x0aXAgPSB0b29sdGlwSW5zdGFuY2UobGFzdFJlY3QpOwogICAgICAgIHZhciB0aXRsZSA9IFN0cmluZyh0b29sdGlwLmNvbnRlbnQoKSk7CgogICAgICAgIC8vIFNpbmNlIHRoZSB0b29sdGlwIGNvbnRlbnQgaXMgeG1sLCB3ZSBuZWVkIHRvIGNyZWF0ZSBhIGRvY3VtZW50IHNvIHdlIGNhbiBvcGVyYXRlIG9uIHdoYXQgd2UgbmVlZAogICAgICAgIHZhciBwYXJzZXIgPSBuZXcgRE9NUGFyc2VyKCk7CiAgICAgICAgdmFyIHhtbCA9IHBhcnNlci5wYXJzZUZyb21TdHJpbmcodGl0bGUsICd0ZXh0L3htbCcpOwoKICAgICAgICAvLyBHcmFiIHRoZSBzdGF0dXMgc3Vic3RyaW5nCiAgICAgICAgdmFyIGN1cnJlbnRTdGF0dXNOb2RlID0gJCh4bWwpLmZpbmQoJ3NwYW5bZGF0YS1zdGF0dXM9IicgKyBjdXJyZW50U3RhdHVzICsgJyJdJyk7CiAgICAgICAgdmFyIG5ld1RpdGxlID0gY3VycmVudFN0YXR1c05vZGUudGV4dCgpOwoKICAgICAgICAvLyBXaGF0IHRpbWUgZG9lcyB0aGUgc3RhdHVzIHN1YnN0cmluZyBzaG93IHJpZ2h0IG5vdz8KICAgICAgICB2YXIgaW5pdGlhbFRpbWUgPSB0aW1lRnJvbVN0cmluZyhuZXdUaXRsZSk7CiAgICAgICAgLy8gSG93IGxvbmcgaGFzIGl0IGJlZW4gc2luY2UgdGhlIGFwcCBjYWNoZWQgdGhpcyBwYWdlPwogICAgICAgIHZhciB0aW1lU2luY2VQYWdlVXBkYXRlID10aW1lU2luY2VVcGRhdGUoKTsKCiAgICAgICAgLy8gSWYgd2UgaGF2ZSBhIGRlbHRhIHNpbmNlIGNhY2hpbmcsIHdlIHVwZGF0ZSB0aGUgdG9vbHRpcCB0ZXh0IHRvIHNob3cgYW4gYWNjdXJhdGUgZGVsdGEKICAgICAgICBpZiAodGltZVNpbmNlUGFnZVVwZGF0ZS5taW51dGVzID4gMCB8fCB0aW1lU2luY2VQYWdlVXBkYXRlLmhvdXJzID4gMCkgewogICAgICAgICAgdmFyIG5ld1RpbWUgPSBpbmNyZWFzZWRUaW1lQnkoaW5pdGlhbFRpbWUsIHRpbWVTaW5jZVBhZ2VVcGRhdGUpOwogICAgICAgICAgY3VycmVudFN0YXR1c05vZGUudGV4dChkdXJhdGlvbk9mU3RhdHVzKGN1cnJlbnRTdGF0dXMsIG5ld1RpbWUpKTsKICAgICAgICB9CgogICAgICAgIC8vIFNlcmlhbGl6ZSBvdXIgZG9jdW1lbnQgYW5kIHVwZGF0ZSB0aGUgdG9vbHRpcAogICAgICAgIHZhciBvU2VyaWFsaXplciA9IG5ldyBYTUxTZXJpYWxpemVyKCk7CiAgICAgICAgdmFyIHNYTUwgPSBvU2VyaWFsaXplci5zZXJpYWxpemVUb1N0cmluZyh4bWwpOwogICAgICAgIHRvb2x0aXAuY29udGVudChzWE1MKTsKICAgICAgfQoKICAgICAgdmFyIHNob3djYXNlZENvbXBvbmVudHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdjb21wb25lbnQtaW5uZXItY29udGFpbmVyIHNob3djYXNlZCcpOwogICAgICB2YXIgYWZmZWN0ZWRDb21wb25lbnRzID0gbm9uT3BlcmF0aW9uYWxDb21wb25lbnRzKHNob3djYXNlZENvbXBvbmVudHMpOwoKICAgICAgdXBkYXRlU2hvd2Nhc2VkQ29tcG9uZW50cyhhZmZlY3RlZENvbXBvbmVudHMpOwoKCiAgICAgIC8vIGNsaWNrcyBvbiBmaXJzdCB0YWIgaW4gc3Vic2NyaWJlIHBvcG91dCBzaW5jZSB3ZSB3b24ndCBrbm93IHdoaWNoIGlzIGZpcnN0CiAgICAgIC8vIHVwb24gY29uc3RydWN0aW9uIGluIHRoZSBydWJ5IGNvZGUKICAgICAgJCgnLnVwZGF0ZXMtZHJvcGRvd24tbmF2ID4gYScpLmVxKDApLmNsaWNrKCk7CgogICAgICAvLyB0d2l0dGVyIGZvbGxvdyBidXR0b24gbmVlZHMgc29tZSBtYXJnaW4KICAgICAgJCgnLnR3aXR0ZXItZm9sbG93LWJ1dHRvbicpLmNzcygnbWFyZ2luLXJpZ2h0JywgJzZweCcpOwogICAgfSk7CgogICAgJChmdW5jdGlvbigpIHsKICAgICAgLy8gb3Blbi9jbG9zZSBjb21wb25lbnQgZ3JvdXBzCiAgICAgIEhSQi51dGlscy5kanNob29rKCdjb21wb25lbnQtZ3JvdXAtb3BlbmVyJykub24oJ2NsaWNrJywgZnVuY3Rpb24oKSB7CiAgICAgICAgJCh0aGlzKS5maW5kKCcuZ3JvdXAtcGFyZW50LWluZGljYXRvcicpLnRvZ2dsZUNsYXNzKCdmYS1wbHVzLXNxdWFyZS1vJykudG9nZ2xlQ2xhc3MoJ2ZhLW1pbnVzLXNxdWFyZS1vJykuZW5kKCkucGFyZW50KCkudG9nZ2xlQ2xhc3MoJ29wZW4nKTsKICAgICAgfSk7CiAgICB9KTsKCiAgPC9zY3JpcHQ+CiAgPHNjcmlwdCBzcmM9Imh0dHBzOi8vZGthNTc1b2ZtNGFvMC5jbG91ZGZyb250Lm5ldC9hc3NldHMvdmVuZG9yL2hpZ2hzdG9jay5taW4tYjNiZGNjMjM5ODdjNTg2MzZkNzVmMTdhZDJlMmQ3MjE5M2VmNGRiYzFlYzZmMGQyOTQwMmJiZjU5NzI4Y2Q5MS5qcyI+PC9zY3JpcHQ+CgogIDxzY3JpcHQ+CiAgICBTdHJpbmcucHJvdG90eXBlLmNvbW1hZnkgPSBmdW5jdGlvbiAoKSB7CiAgICAgIHJldHVybiB0aGlzLnJlcGxhY2UoLyhefFteXHcuXSkoXGR7NCx9KS9nLCBmdW5jdGlvbigkMCwgJDEsICQyKSB7CiAgICAgICAgcmV0dXJuICQxICsgJDIucmVwbGFjZSgvXGQoPz0oPzpcZFxkXGQpKyg/IVxkKSkvZywgIiQmLCIpOwogICAgICB9KTsKICAgIH0KCiAgICBOdW1iZXIucHJvdG90eXBlLmNvbW1hZnkgPSBmdW5jdGlvbiAoKSB7CiAgICAgIHJldHVybiBTdHJpbmcodGhpcykuY29tbWFmeSgpOwogICAgfQoKICAgICQoZnVuY3Rpb24oKSB7CiAgICAgIFNQLmN1cnJlbnRQYWdlLm51bWJlclRvRGVjaW1hbFBsYWNlcyA9IGZ1bmN0aW9uKG51bSwgZGVjKSB7CiAgICAgICAgaWYgKGRlYyA9PSAwKSB7CiAgICAgICAgICByZXR1cm4gTWF0aC5yb3VuZChudW0pLmNvbW1hZnkoKTsKICAgICAgICB9CgogICAgICAgIG5ld251bSA9IG51bS50b0ZpeGVkKGRlYykKICAgICAgICB2YXIgZmluYWxWYWx1ZTsKCiAgICAgICAgLy8gdGhpcyBnZXRzIHJpZCBvZiB0aGUgMTAwLjAwMCUgdGhpbmcKICAgICAgICBpZiAobnVtID09IHBhcnNlSW50KG5ld251bSkpCiAgICAgICAgICBmaW5hbFZhbHVlID0gTWF0aC5yb3VuZChudW0pOwogICAgICAgIGVsc2UKICAgICAgICAgIGZpbmFsVmFsdWUgPSBuZXdudW07CgogICAgICAgIHJldHVybiBmaW5hbFZhbHVlLmNvbW1hZnkoKTsKICAgICAgfQoKICAgICAgU1AuY3VycmVudFBhZ2UuZ2V0RGF0YUZvclRpbWVQZXJpb2QgPSBmdW5jdGlvbihwZXJpb2QpIHsKICAgICAgICAgICQuYWpheCh7CiAgICAgICAgICAgIHR5cGU6ICJHRVQiLAogICAgICAgICAgICAvLyB0aGlzIGxpbmUgbXVzdCBiZSBlbmQgdXAgd2l0aCAiLy9zdGF0dXMuKiIgdHlwZSBvZiBVUkxzIChubyBwcm90b2NvbCwganVzdCBsZWFkaW5nIHNsYXNoZXMpLiBjdXN0b21lcnMgdXNlIFNTTCB0aHJvdWdoIHVzIG9yIGJ5IG9mZmxvYWRpbmcgd2l0aAogICAgICAgICAgICAvLyBjbG91ZGZsYXJlIG9yIHNvbWV0aGluZyBsaWtlIGl0IGFuZCB0aGUgcmVxdWVzdC5wcm90b2NvbCB0aGUgc2VydmVyIHNlZXMgaXMgZGlmZmVyZW50IHRoYW4gd2hhdCB0aGUgYnJvd3NlciBzZWVzCiAgICAgICAgICAgIHVybDogIi8vc3RhdHVzLmJpdGJ1Y2tldC5vcmcvbWV0cmljcy1kaXNwbGF5L3gyZnJ4NHk0ZGh5OC9fLmpzb24iLnJlcGxhY2UoJ18nLCBwZXJpb2QpCiAgICAgICAgICB9KS5zdWNjZXNzKGZ1bmN0aW9uKG1ldHJpY3NEaXNwbGF5LCB0ZXh0U3RhdHVzLCB4aHIpIHsKICAgICAgICAgICAgdmFyIHN1bW1hcnkgPSBtZXRyaWNzRGlzcGxheS5zdW1tYXJ5CiAgICAgICAgICAgICAgLCAkbWV0cmljU3VtbWFyeUxhYmVsID0gSFJCLnV0aWxzLmRqc2hvb2soJ21ldHJpY3MtZGlzcGxheS1jdXJyZW50LXgyZnJ4NHk0ZGh5OCcpOwoKICAgICAgICAgICAgdmFyIGVycm9yTXNnID0gbnVsbDsKCiAgICAgICAgICAgIGlmKHN1bW1hcnkgPT09ICJ1bmF2YWlsYWJsZSIpIHsKICAgICAgICAgICAgICBlcnJvck1zZyA9ICdXZVwncmUgaGF2aW5nIGlzc3VlcyByZXRyaWV2aW5nIGRhdGEgZm9yIDxzdHJvbmc+V2Vic2l0ZSBhdmVyYWdlIHJlc3BvbnNlIHRpbWU8L3N0cm9uZz4uPC9kaXY+JzsKICAgICAgICAgICAgfSBlbHNlIGlmKHN1bW1hcnkpIHsKICAgICAgICAgICAgICAvLyB3ZSBuZWVkIHRvIGRvIGEgYmFzaWMgY2hlY2sgdG8gbWFrZSBzdXJlIHdlIGhhdmUgYW55IGRhdGEgYXQgYWxsCiAgICAgICAgICAgICAgdmFyIGhhc0RhdGFSb2xsdXBzQXZhaWxhYmxlID0gZmFsc2U7CiAgICAgICAgICAgICAgZm9yKHZhciBoID0gMDsgaCA8IG1ldHJpY3NEaXNwbGF5Lm1ldHJpY3MubGVuZ3RoOyBoKyspIHsKICAgICAgICAgICAgICAgIGlmKG1ldHJpY3NEaXNwbGF5Lm1ldHJpY3NbaF0uZGF0YS5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgICAgICAgIGhhc0RhdGFSb2xsdXBzQXZhaWxhYmxlID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGlmKCFoYXNEYXRhUm9sbHVwc0F2YWlsYWJsZSkgewogICAgICAgICAgICAgICAgZXJyb3JNc2cgPSAiT29wcyEgTm8gZGF0YSBoYXMgYmVlbiBpbmRleGVkIGZvciA8c3Ryb25nPldlYnNpdGUgYXZlcmFnZSByZXNwb25zZSB0aW1lPC9zdHJvbmc+IGZvciB0aGlzIHRpbWUgcGVyaW9kIHlldC4iOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBlcnJvck1zZyA9ICJGYWlsZWQgdG8gbG9hZC4gPHN0cm9uZz5XZWJzaXRlIGF2ZXJhZ2UgcmVzcG9uc2UgdGltZTwvc3Ryb25nPiI7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmKGVycm9yTXNnICE9PSBudWxsKSB7CiAgICAgICAgICAgICAgJGdyYXBoQ29udGFpbmVyID0gJG1ldHJpY1N1bW1hcnlMYWJlbC5wYXJlbnQoKS5uZXh0KCk7CiAgICAgICAgICAgICAgJGdyYXBoQ29udGFpbmVyLmh0bWwoJzxkaXYgY2xhc3M9InNtYWxsIiAgc3R5bGU9InRleHQtYWxpZ246Y2VudGVyOyI+JyArIGVycm9yTXNnICsgJzwvZGl2PicpLnBhcmVudCgpLmZpbmQoJy5tZXRyaWMtbWV0YScpLnJlbW92ZSgpOwogICAgICAgICAgICAgICRncmFwaENvbnRhaW5lci5yZW1vdmVBdHRyKCJzdHlsZSIpOwogICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgJG1ldHJpY1N1bW1hcnlMYWJlbC5wYXJlbnQoKS5uZXh0KCkuc2hvdygpOwoKICAgICAgICAgICAgLy8gcHJvY2VlZCBzaW5jZSB3ZSBoYXZlIGRhdGEKICAgICAgICAgICAgJG1ldHJpY1N1bW1hcnlMYWJlbC50ZXh0KFNQLmN1cnJlbnRQYWdlLm51bWJlclRvRGVjaW1hbFBsYWNlcyhzdW1tYXJ5WydtZWFuJ10sIDAgKSArICdtcycpOwoKICAgICAgICAgICAgdmFyIG1ldHJpY0RhdGFQb2ludHMgPSB7fQogICAgICAgICAgICAgICwgaW50ZXJ2YWxNc2VjID0gbWV0cmljc0Rpc3BsYXkucGVyaW9kLmludGVydmFsICogMTAwMDsKCiAgICAgICAgICAgIHZhciBzdGFydGluZ0J1Y2tldE1zZWMgPSBwYXJzZUludCgobmV3IERhdGUoKSkuZ2V0VGltZSgpIC8gaW50ZXJ2YWxNc2VjKSAqIGludGVydmFsTXNlYzsKCiAgICAgICAgICAgIGZvcih2YXIgaCA9IDA7IGggPCBtZXRyaWNzRGlzcGxheS5tZXRyaWNzLmxlbmd0aDsgaCsrKSB7CiAgICAgICAgICAgICAgbWV0cmljRGF0YVBvaW50c1ttZXRyaWNzRGlzcGxheS5tZXRyaWNzW2hdLm1ldHJpYy5pZF0gPSBbXQogICAgICAgICAgICAgIHZhciBkYXRhID0gbWV0cmljc0Rpc3BsYXkubWV0cmljc1toXS5kYXRhCiAgICAgICAgICAgICAgICAsIGN1cnJlbnRCdWNrZXRNc2VjID0gc3RhcnRpbmdCdWNrZXRNc2VjOwoKICAgICAgICAgICAgICBmb3IodmFyIGkgPSBtZXRyaWNzRGlzcGxheS5wZXJpb2QuY291bnQ7IGkgPiAwOyBpLS0pIHsKICAgICAgICAgICAgICAgIC8vIGxvb3Agb3ZlciB0aGUgZGF0YSBhbmQgcHVsbCBvdXQgdGhlIGRhdGEgcG9pbnQgd2l0aCB0aGUgZm9sbG93aW5nIGNoYXJhY3RlcmlzdGljcwogICAgICAgICAgICAgICAgLy8gIC0+IGNsb3Nlc3QgdG8gY3VycmVudEJ1Y2tldE1zZWMKICAgICAgICAgICAgICAgIC8vICAtPiB3aXRob3V0IGJlaW5nIGdyZWF0ZXIgdGhhbiBjdXJyZW50TXNlY0J1Y2tldAogICAgICAgICAgICAgICAgLy8gIC0+IHdpdGhvdXQgYmVpbmcgbW9yZSB0aGFuIDEgaW50ZXJ2YWxNc2VjIGJ1Y2tldCBhd2F5CiAgICAgICAgICAgICAgICB2YXIgdmFsdWVUb1VzZSA9IG51bGw7CiAgICAgICAgICAgICAgICBmb3IodmFyIGogPSBkYXRhLmxlbmd0aCAtIDE7IGogPj0gMDsgai0tKSB7CiAgICAgICAgICAgICAgICAgIHZhciBjdXJyZW50VGltZXN0YW1wTXNlYyA9IGRhdGFbal0udGltZXN0YW1wICogMTAwMDsKICAgICAgICAgICAgICAgICAgaWYoY3VycmVudFRpbWVzdGFtcE1zZWMgPD0gY3VycmVudEJ1Y2tldE1zZWMgJiYgY3VycmVudFRpbWVzdGFtcE1zZWMgPiAoY3VycmVudEJ1Y2tldE1zZWMgLSBpbnRlcnZhbE1zZWMpKSB7CiAgICAgICAgICAgICAgICAgICAgdmFsdWVUb1VzZSA9IGRhdGFbal0udmFsdWU7CiAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coIlVzaW5nIHRzOiIgKyBjdXJyZW50VGltZXN0YW1wTXNlYyArICIgd2l0aCB2YWx1ZToiICsgdmFsdWVUb1VzZSArICIgZm9yIGJ1Y2tldDoiICsgY3VycmVudEJ1Y2tldE1zZWMpOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgLy8gbG9jYWwgdGltZQogICAgICAgICAgICAgICAgdmFyIG9mZnNldCA9IC0xICogKG5ldyBEYXRlKCkpLmdldFRpbWV6b25lT2Zmc2V0KCkgKiA2MCAqIDEwMDA7CgogICAgICAgICAgICAgICAgbWV0cmljRGF0YVBvaW50c1ttZXRyaWNzRGlzcGxheS5tZXRyaWNzW2hdLm1ldHJpYy5pZF0ucHVzaChbY3VycmVudEJ1Y2tldE1zZWMgKyBvZmZzZXQsIHZhbHVlVG9Vc2VdKQogICAgICAgICAgICAgICAgICBjdXJyZW50QnVja2V0TXNlYyAtPSBpbnRlcnZhbE1zZWM7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBtZXRyaWNEYXRhUG9pbnRzW21ldHJpY3NEaXNwbGF5Lm1ldHJpY3NbaF0ubWV0cmljLmlkXS5yZXZlcnNlKCk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICQoJyNtZXRyaWNzLWRpc3BsYXktZ3JhcGgtY29udGFpbmVyLXgyZnJ4NHk0ZGh5OCcpLmhpZ2hjaGFydHMoJ1N0b2NrQ2hhcnQnLCB7CiAgICAgICAgcGxvdE9wdGlvbnMgOiB7CiAgICAgICAgICBzZXJpZXMgOiB7CiAgICAgICAgICAgIGFuaW1hdGlvbiA6IGZhbHNlLAogICAgICAgICAgICBjb2xvciA6ICcjM2I3M2FmJywKICAgICAgICAgICAgY29ubmVjdE51bGxzOiBmYWxzZQogICAgICAgICAgfSwKICAgICAgICB9LAoKICAgICAgICBjaGFydCA6IHsKICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJyNmZmZmZmYnCiAgICAgICAgfSwKCiAgICAgICAgdGl0bGUgOiB7CiAgICAgICAgICB0ZXh0OiAnJywKICAgICAgICAgIHN0eWxlOiB7CiAgICAgICAgICAgICAgICBkaXNwbGF5OiAnbm9uZScsCiAgICAgICAgICAgICB9CiAgICAgICAgfSwKCiAgICAgICAgY3JlZGl0cyA6IHsKICAgICAgICAgIGVuYWJsZWQgOiBmYWxzZQogICAgICAgIH0sCgogICAgICAgIGV4cG9ydGluZyA6IHsKICAgICAgICAgIGVuYWJsZWQgOiBmYWxzZQogICAgICAgIH0sCgogICAgICAgIHJhbmdlU2VsZWN0b3IgOiB7CiAgICAgICAgICBlbmFibGVkIDogZmFsc2UKICAgICAgICB9LAoKICAgICAgICBzY3JvbGxiYXIgOiB7CiAgICAgICAgICBlbmFibGVkIDogZmFsc2UKICAgICAgICB9LAoKICAgICAgICBuYXZpZ2F0b3IgOiB7CiAgICAgICAgICBlbmFibGVkIDogZmFsc2UKICAgICAgICB9LAoKICAgICAgICB4QXhpczogewogICAgICAgICAgZ3JpZExpbmVDb2xvciA6ICdyZ2JhKDIwNCwyMDQsMjA0LC44KScsCiAgICAgICAgICBsYWJlbHM6IHsKICAgICAgICAgICAgc3R5bGUgOiB7CiAgICAgICAgICAgICAgY29sb3I6ICcjNzA3MDcwJwogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgbGluZUNvbG9yOiAnI2NjY2NjYycsCiAgICAgICAgfSwKCiAgICAgICAgeUF4aXM6IHsKICAgICAgICAgIGdyaWRMaW5lQ29sb3IgOiAncmdiYSgyMDQsMjA0LDIwNCwuNSknLAogICAgICAgICAgbGFiZWxzOiB7CiAgICAgICAgICAgIHN0eWxlIDogewogICAgICAgICAgICAgIGNvbG9yOiAnIzcwNzA3MCcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZW5hYmxlZCA6IHRydWUKICAgICAgICAgIH0sCiAgICAgICAgICBzaG93TGFzdExhYmVsOiB0cnVlLAogICAgICAgICAgICAgICAgICAgICAgICB0aWNrUG9zaXRpb25zOiBbMC4wLCAxNzUuMCwgMzUwLjBdLAogICAgICAgICAgICAgICBtaW46IDAuMCwKICAgICAgICAgICAgICAgc3RhcnRPblRpY2s6IGZhbHNlLAogICAgICAgICAgICAgICBtYXg6IDM1MC4wLAogICAgICAgICAgICAgICBlbmRPblRpY2s6IGZhbHNlLAoKICAgICAgICB9LAoKICAgICAgICBzZXJpZXMgOiBbCiAgICAgICAgICAgICAgewogICAgICBuYW1lIDogJ1dlYnNpdGUgYXZlcmFnZSByZXNwb25zZSB0aW1lJywKICAgICAgZGF0YSA6IG1ldHJpY0RhdGFQb2ludHNbJ3gyZnJ4NHk0ZGh5OCddLAogICAgICB0b29sdGlwOiB7CiAgICAgICAgdmFsdWVTdWZmaXg6ICdtcycKICAgICAgfSwKICAgICAgZW5hYmxlTW91c2VUcmFja2luZyA6ICgkKHdpbmRvdykub3V0ZXJXaWR0aCgpID4gNDgwKSAmJiB0cnVlCiAgICB9CgogICAgICAgIF0sCgogICAgICAgIHRvb2x0aXA6IHsKICAgICAgICAgIGVuYWJsZWQ6ICgkKHdpbmRvdykub3V0ZXJXaWR0aCgpID4gNDgwKSAmJiB0cnVlLAogICAgICAgICAgdmFsdWVEZWNpbWFsczogZnVuY3Rpb24odmFsdWUpIHsKICAgICAgICAgICAgdmFyIHYgPSBTUC5jdXJyZW50UGFnZS5udW1iZXJUb0RlY2ltYWxQbGFjZXModmFsdWUsIDApOwogICAgICAgICAgICBpZih2LmluZGV4T2YoJy4nKSA9PSAtMSkKICAgICAgICAgICAgICByZXR1cm4gMDsKICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgIHJldHVybiAwOwogICAgICAgICAgfSwKICAgICAgICB9CiAgICAgIH0pOwoKICAgICAgICAgIH0pOwogICAgICAgICAgJC5hamF4KHsKICAgICAgICAgICAgdHlwZTogIkdFVCIsCiAgICAgICAgICAgIC8vIHRoaXMgbGluZSBtdXN0IGJlIGVuZCB1cCB3aXRoICIvL3N0YXR1cy4qIiB0eXBlIG9mIFVSTHMgKG5vIHByb3RvY29sLCBqdXN0IGxlYWRpbmcgc2xhc2hlcykuIGN1c3RvbWVycyB1c2UgU1NMIHRocm91Z2ggdXMgb3IgYnkgb2ZmbG9hZGluZyB3aXRoCiAgICAgICAgICAgIC8vIGNsb3VkZmxhcmUgb3Igc29tZXRoaW5nIGxpa2UgaXQgYW5kIHRoZSByZXF1ZXN0LnByb3RvY29sIHRoZSBzZXJ2ZXIgc2VlcyBpcyBkaWZmZXJlbnQgdGhhbiB3aGF0IHRoZSBicm93c2VyIHNlZXMKICAgICAgICAgICAgdXJsOiAiLy9zdGF0dXMuYml0YnVja2V0Lm9yZy9tZXRyaWNzLWRpc3BsYXkvcWNyOTdwbGNtYmxkL18uanNvbiIucmVwbGFjZSgnXycsIHBlcmlvZCkKICAgICAgICAgIH0pLnN1Y2Nlc3MoZnVuY3Rpb24obWV0cmljc0Rpc3BsYXksIHRleHRTdGF0dXMsIHhocikgewogICAgICAgICAgICB2YXIgc3VtbWFyeSA9IG1ldHJpY3NEaXNwbGF5LnN1bW1hcnkKICAgICAgICAgICAgICAsICRtZXRyaWNTdW1tYXJ5TGFiZWwgPSBIUkIudXRpbHMuZGpzaG9vaygnbWV0cmljcy1kaXNwbGF5LWN1cnJlbnQtcWNyOTdwbGNtYmxkJyk7CgogICAgICAgICAgICB2YXIgZXJyb3JNc2cgPSBudWxsOwoKICAgICAgICAgICAgaWYoc3VtbWFyeSA9PT0gInVuYXZhaWxhYmxlIikgewogICAgICAgICAgICAgIGVycm9yTXNnID0gJ1dlXCdyZSBoYXZpbmcgaXNzdWVzIHJldHJpZXZpbmcgZGF0YSBmb3IgPHN0cm9uZz5BUEkgYXZlcmFnZSByZXNwb25zZSB0aW1lPC9zdHJvbmc+LjwvZGl2Pic7CiAgICAgICAgICAgIH0gZWxzZSBpZihzdW1tYXJ5KSB7CiAgICAgICAgICAgICAgLy8gd2UgbmVlZCB0byBkbyBhIGJhc2ljIGNoZWNrIHRvIG1ha2Ugc3VyZSB3ZSBoYXZlIGFueSBkYXRhIGF0IGFsbAogICAgICAgICAgICAgIHZhciBoYXNEYXRhUm9sbHVwc0F2YWlsYWJsZSA9IGZhbHNlOwogICAgICAgICAgICAgIGZvcih2YXIgaCA9IDA7IGggPCBtZXRyaWNzRGlzcGxheS5tZXRyaWNzLmxlbmd0aDsgaCsrKSB7CiAgICAgICAgICAgICAgICBpZihtZXRyaWNzRGlzcGxheS5tZXRyaWNzW2hdLmRhdGEubGVuZ3RoID4gMCkgewogICAgICAgICAgICAgICAgICBoYXNEYXRhUm9sbHVwc0F2YWlsYWJsZSA9IHRydWU7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBpZighaGFzRGF0YVJvbGx1cHNBdmFpbGFibGUpIHsKICAgICAgICAgICAgICAgIGVycm9yTXNnID0gIk9vcHMhIE5vIGRhdGEgaGFzIGJlZW4gaW5kZXhlZCBmb3IgPHN0cm9uZz5BUEkgYXZlcmFnZSByZXNwb25zZSB0aW1lPC9zdHJvbmc+IGZvciB0aGlzIHRpbWUgcGVyaW9kIHlldC4iOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBlcnJvck1zZyA9ICJGYWlsZWQgdG8gbG9hZC4gPHN0cm9uZz5BUEkgYXZlcmFnZSByZXNwb25zZSB0aW1lPC9zdHJvbmc+IjsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYoZXJyb3JNc2cgIT09IG51bGwpIHsKICAgICAgICAgICAgICAkZ3JhcGhDb250YWluZXIgPSAkbWV0cmljU3VtbWFyeUxhYmVsLnBhcmVudCgpLm5leHQoKTsKICAgICAgICAgICAgICAkZ3JhcGhDb250YWluZXIuaHRtbCgnPGRpdiBjbGFzcz0ic21hbGwiICBzdHlsZT0idGV4dC1hbGlnbjpjZW50ZXI7Ij4nICsgZXJyb3JNc2cgKyAnPC9kaXY+JykucGFyZW50KCkuZmluZCgnLm1ldHJpYy1tZXRhJykucmVtb3ZlKCk7CiAgICAgICAgICAgICAgJGdyYXBoQ29udGFpbmVyLnJlbW92ZUF0dHIoInN0eWxlIik7CiAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CgogICAgICAgICAgICAkbWV0cmljU3VtbWFyeUxhYmVsLnBhcmVudCgpLm5leHQoKS5zaG93KCk7CgogICAgICAgICAgICAvLyBwcm9jZWVkIHNpbmNlIHdlIGhhdmUgZGF0YQogICAgICAgICAgICAkbWV0cmljU3VtbWFyeUxhYmVsLnRleHQoU1AuY3VycmVudFBhZ2UubnVtYmVyVG9EZWNpbWFsUGxhY2VzKHN1bW1hcnlbJ21lYW4nXSwgMCApICsgJ21zJyk7CgogICAgICAgICAgICB2YXIgbWV0cmljRGF0YVBvaW50cyA9IHt9CiAgICAgICAgICAgICAgLCBpbnRlcnZhbE1zZWMgPSBtZXRyaWNzRGlzcGxheS5wZXJpb2QuaW50ZXJ2YWwgKiAxMDAwOwoKICAgICAgICAgICAgdmFyIHN0YXJ0aW5nQnVja2V0TXNlYyA9IHBhcnNlSW50KChuZXcgRGF0ZSgpKS5nZXRUaW1lKCkgLyBpbnRlcnZhbE1zZWMpICogaW50ZXJ2YWxNc2VjOwoKICAgICAgICAgICAgZm9yKHZhciBoID0gMDsgaCA8IG1ldHJpY3NEaXNwbGF5Lm1ldHJpY3MubGVuZ3RoOyBoKyspIHsKICAgICAgICAgICAgICBtZXRyaWNEYXRhUG9pbnRzW21ldHJpY3NEaXNwbGF5Lm1ldHJpY3NbaF0ubWV0cmljLmlkXSA9IFtdCiAgICAgICAgICAgICAgdmFyIGRhdGEgPSBtZXRyaWNzRGlzcGxheS5tZXRyaWNzW2hdLmRhdGEKICAgICAgICAgICAgICAgICwgY3VycmVudEJ1Y2tldE1zZWMgPSBzdGFydGluZ0J1Y2tldE1zZWM7CgogICAgICAgICAgICAgIGZvcih2YXIgaSA9IG1ldHJpY3NEaXNwbGF5LnBlcmlvZC5jb3VudDsgaSA+IDA7IGktLSkgewogICAgICAgICAgICAgICAgLy8gbG9vcCBvdmVyIHRoZSBkYXRhIGFuZCBwdWxsIG91dCB0aGUgZGF0YSBwb2ludCB3aXRoIHRoZSBmb2xsb3dpbmcgY2hhcmFjdGVyaXN0aWNzCiAgICAgICAgICAgICAgICAvLyAgLT4gY2xvc2VzdCB0byBjdXJyZW50QnVja2V0TXNlYwogICAgICAgICAgICAgICAgLy8gIC0+IHdpdGhvdXQgYmVpbmcgZ3JlYXRlciB0aGFuIGN1cnJlbnRNc2VjQnVja2V0CiAgICAgICAgICAgICAgICAvLyAgLT4gd2l0aG91dCBiZWluZyBtb3JlIHRoYW4gMSBpbnRlcnZhbE1zZWMgYnVja2V0IGF3YXkKICAgICAgICAgICAgICAgIHZhciB2YWx1ZVRvVXNlID0gbnVsbDsKICAgICAgICAgICAgICAgIGZvcih2YXIgaiA9IGRhdGEubGVuZ3RoIC0gMTsgaiA+PSAwOyBqLS0pIHsKICAgICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRUaW1lc3RhbXBNc2VjID0gZGF0YVtqXS50aW1lc3RhbXAgKiAxMDAwOwogICAgICAgICAgICAgICAgICBpZihjdXJyZW50VGltZXN0YW1wTXNlYyA8PSBjdXJyZW50QnVja2V0TXNlYyAmJiBjdXJyZW50VGltZXN0YW1wTXNlYyA+IChjdXJyZW50QnVja2V0TXNlYyAtIGludGVydmFsTXNlYykpIHsKICAgICAgICAgICAgICAgICAgICB2YWx1ZVRvVXNlID0gZGF0YVtqXS52YWx1ZTsKICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygiVXNpbmcgdHM6IiArIGN1cnJlbnRUaW1lc3RhbXBNc2VjICsgIiB3aXRoIHZhbHVlOiIgKyB2YWx1ZVRvVXNlICsgIiBmb3IgYnVja2V0OiIgKyBjdXJyZW50QnVja2V0TXNlYyk7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAvLyBsb2NhbCB0aW1lCiAgICAgICAgICAgICAgICB2YXIgb2Zmc2V0ID0gLTEgKiAobmV3IERhdGUoKSkuZ2V0VGltZXpvbmVPZmZzZXQoKSAqIDYwICogMTAwMDsKCiAgICAgICAgICAgICAgICBtZXRyaWNEYXRhUG9pbnRzW21ldHJpY3NEaXNwbGF5Lm1ldHJpY3NbaF0ubWV0cmljLmlkXS5wdXNoKFtjdXJyZW50QnVja2V0TXNlYyArIG9mZnNldCwgdmFsdWVUb1VzZV0pCiAgICAgICAgICAgICAgICAgIGN1cnJlbnRCdWNrZXRNc2VjIC09IGludGVydmFsTXNlYzsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIG1ldHJpY0RhdGFQb2ludHNbbWV0cmljc0Rpc3BsYXkubWV0cmljc1toXS5tZXRyaWMuaWRdLnJldmVyc2UoKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgJCgnI21ldHJpY3MtZGlzcGxheS1ncmFwaC1jb250YWluZXItcWNyOTdwbGNtYmxkJykuaGlnaGNoYXJ0cygnU3RvY2tDaGFydCcsIHsKICAgICAgICBwbG90T3B0aW9ucyA6IHsKICAgICAgICAgIHNlcmllcyA6IHsKICAgICAgICAgICAgYW5pbWF0aW9uIDogZmFsc2UsCiAgICAgICAgICAgIGNvbG9yIDogJyMzYjczYWYnLAogICAgICAgICAgICBjb25uZWN0TnVsbHM6IGZhbHNlCiAgICAgICAgICB9LAogICAgICAgIH0sCgogICAgICAgIGNoYXJ0IDogewogICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnI2ZmZmZmZicKICAgICAgICB9LAoKICAgICAgICB0aXRsZSA6IHsKICAgICAgICAgIHRleHQ6ICcnLAogICAgICAgICAgc3R5bGU6IHsKICAgICAgICAgICAgICAgIGRpc3BsYXk6ICdub25lJywKICAgICAgICAgICAgIH0KICAgICAgICB9LAoKICAgICAgICBjcmVkaXRzIDogewogICAgICAgICAgZW5hYmxlZCA6IGZhbHNlCiAgICAgICAgfSwKCiAgICAgICAgZXhwb3J0aW5nIDogewogICAgICAgICAgZW5hYmxlZCA6IGZhbHNlCiAgICAgICAgfSwKCiAgICAgICAgcmFuZ2VTZWxlY3RvciA6IHsKICAgICAgICAgIGVuYWJsZWQgOiBmYWxzZQogICAgICAgIH0sCgogICAgICAgIHNjcm9sbGJhciA6IHsKICAgICAgICAgIGVuYWJsZWQgOiBmYWxzZQogICAgICAgIH0sCgogICAgICAgIG5hdmlnYXRvciA6IHsKICAgICAgICAgIGVuYWJsZWQgOiBmYWxzZQogICAgICAgIH0sCgogICAgICAgIHhBeGlzOiB7CiAgICAgICAgICBncmlkTGluZUNvbG9yIDogJ3JnYmEoMjA0LDIwNCwyMDQsLjgpJywKICAgICAgICAgIGxhYmVsczogewogICAgICAgICAgICBzdHlsZSA6IHsKICAgICAgICAgICAgICBjb2xvcjogJyM3MDcwNzAnCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICBsaW5lQ29sb3I6ICcjY2NjY2NjJywKICAgICAgICB9LAoKICAgICAgICB5QXhpczogewogICAgICAgICAgZ3JpZExpbmVDb2xvciA6ICdyZ2JhKDIwNCwyMDQsMjA0LC41KScsCiAgICAgICAgICBsYWJlbHM6IHsKICAgICAgICAgICAgc3R5bGUgOiB7CiAgICAgICAgICAgICAgY29sb3I6ICcjNzA3MDcwJwogICAgICAgICAgICB9LAogICAgICAgICAgICBlbmFibGVkIDogdHJ1ZQogICAgICAgICAgfSwKICAgICAgICAgIHNob3dMYXN0TGFiZWw6IHRydWUsCiAgICAgICAgICAgICAgICAgICAgICAgIHRpY2tQb3NpdGlvbnM6IFswLjAsIDE1MC4wLCAzMDAuMF0sCiAgICAgICAgICAgICAgIG1pbjogMC4wLAogICAgICAgICAgICAgICBzdGFydE9uVGljazogZmFsc2UsCiAgICAgICAgICAgICAgIG1heDogMzAwLjAsCiAgICAgICAgICAgICAgIGVuZE9uVGljazogZmFsc2UsCgogICAgICAgIH0sCgogICAgICAgIHNlcmllcyA6IFsKICAgICAgICAgICAgICB7CiAgICAgIG5hbWUgOiAnQVBJIGF2ZXJhZ2UgcmVzcG9uc2UgdGltZScsCiAgICAgIGRhdGEgOiBtZXRyaWNEYXRhUG9pbnRzWydiaDdmcTdyanIwZnYnXSwKICAgICAgdG9vbHRpcDogewogICAgICAgIHZhbHVlU3VmZml4OiAnbXMnCiAgICAgIH0sCiAgICAgIGVuYWJsZU1vdXNlVHJhY2tpbmcgOiAoJCh3aW5kb3cpLm91dGVyV2lkdGgoKSA+IDQ4MCkgJiYgdHJ1ZQogICAgfQoKICAgICAgICBdLAoKICAgICAgICB0b29sdGlwOiB7CiAgICAgICAgICBlbmFibGVkOiAoJCh3aW5kb3cpLm91dGVyV2lkdGgoKSA+IDQ4MCkgJiYgdHJ1ZSwKICAgICAgICAgIHZhbHVlRGVjaW1hbHM6IGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgICAgICAgIHZhciB2ID0gU1AuY3VycmVudFBhZ2UubnVtYmVyVG9EZWNpbWFsUGxhY2VzKHZhbHVlLCAwKTsKICAgICAgICAgICAgaWYodi5pbmRleE9mKCcuJykgPT0gLTEpCiAgICAgICAgICAgICAgcmV0dXJuIDA7CiAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICByZXR1cm4gMDsKICAgICAgICAgIH0sCiAgICAgICAgfQogICAgICB9KTsKCiAgICAgICAgICB9KTsKICAgICAgICAgICQuYWpheCh7CiAgICAgICAgICAgIHR5cGU6ICJHRVQiLAogICAgICAgICAgICAvLyB0aGlzIGxpbmUgbXVzdCBiZSBlbmQgdXAgd2l0aCAiLy9zdGF0dXMuKiIgdHlwZSBvZiBVUkxzIChubyBwcm90b2NvbCwganVzdCBsZWFkaW5nIHNsYXNoZXMpLiBjdXN0b21lcnMgdXNlIFNTTCB0aHJvdWdoIHVzIG9yIGJ5IG9mZmxvYWRpbmcgd2l0aAogICAgICAgICAgICAvLyBjbG91ZGZsYXJlIG9yIHNvbWV0aGluZyBsaWtlIGl0IGFuZCB0aGUgcmVxdWVzdC5wcm90b2NvbCB0aGUgc2VydmVyIHNlZXMgaXMgZGlmZmVyZW50IHRoYW4gd2hhdCB0aGUgYnJvd3NlciBzZWVzCiAgICAgICAgICAgIHVybDogIi8vc3RhdHVzLmJpdGJ1Y2tldC5vcmcvbWV0cmljcy1kaXNwbGF5L3JwcXQ5OHN2M3Ayci9fLmpzb24iLnJlcGxhY2UoJ18nLCBwZXJpb2QpCiAgICAgICAgICB9KS5zdWNjZXNzKGZ1bmN0aW9uKG1ldHJpY3NEaXNwbGF5LCB0ZXh0U3RhdHVzLCB4aHIpIHsKICAgICAgICAgICAgdmFyIHN1bW1hcnkgPSBtZXRyaWNzRGlzcGxheS5zdW1tYXJ5CiAgICAgICAgICAgICAgLCAkbWV0cmljU3VtbWFyeUxhYmVsID0gSFJCLnV0aWxzLmRqc2hvb2soJ21ldHJpY3MtZGlzcGxheS1jdXJyZW50LXJwcXQ5OHN2M3AycicpOwoKICAgICAgICAgICAgdmFyIGVycm9yTXNnID0gbnVsbDsKCiAgICAgICAgICAgIGlmKHN1bW1hcnkgPT09ICJ1bmF2YWlsYWJsZSIpIHsKICAgICAgICAgICAgICBlcnJvck1zZyA9ICdXZVwncmUgaGF2aW5nIGlzc3VlcyByZXRyaWV2aW5nIGRhdGEgZm9yIDxzdHJvbmc+R2l0IGF2ZXJhZ2UgcmVzcG9uc2UgdGltZSAoSFRUUFMpPC9zdHJvbmc+LjwvZGl2Pic7CiAgICAgICAgICAgIH0gZWxzZSBpZihzdW1tYXJ5KSB7CiAgICAgICAgICAgICAgLy8gd2UgbmVlZCB0byBkbyBhIGJhc2ljIGNoZWNrIHRvIG1ha2Ugc3VyZSB3ZSBoYXZlIGFueSBkYXRhIGF0IGFsbAogICAgICAgICAgICAgIHZhciBoYXNEYXRhUm9sbHVwc0F2YWlsYWJsZSA9IGZhbHNlOwogICAgICAgICAgICAgIGZvcih2YXIgaCA9IDA7IGggPCBtZXRyaWNzRGlzcGxheS5tZXRyaWNzLmxlbmd0aDsgaCsrKSB7CiAgICAgICAgICAgICAgICBpZihtZXRyaWNzRGlzcGxheS5tZXRyaWNzW2hdLmRhdGEubGVuZ3RoID4gMCkgewogICAgICAgICAgICAgICAgICBoYXNEYXRhUm9sbHVwc0F2YWlsYWJsZSA9IHRydWU7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBpZighaGFzRGF0YVJvbGx1cHNBdmFpbGFibGUpIHsKICAgICAgICAgICAgICAgIGVycm9yTXNnID0gIk9vcHMhIE5vIGRhdGEgaGFzIGJlZW4gaW5kZXhlZCBmb3IgPHN0cm9uZz5HaXQgYXZlcmFnZSByZXNwb25zZSB0aW1lIChIVFRQUyk8L3N0cm9uZz4gZm9yIHRoaXMgdGltZSBwZXJpb2QgeWV0LiI7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIGVycm9yTXNnID0gIkZhaWxlZCB0byBsb2FkLiA8c3Ryb25nPkdpdCBhdmVyYWdlIHJlc3BvbnNlIHRpbWUgKEhUVFBTKTwvc3Ryb25nPiI7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmKGVycm9yTXNnICE9PSBudWxsKSB7CiAgICAgICAgICAgICAgJGdyYXBoQ29udGFpbmVyID0gJG1ldHJpY1N1bW1hcnlMYWJlbC5wYXJlbnQoKS5uZXh0KCk7CiAgICAgICAgICAgICAgJGdyYXBoQ29udGFpbmVyLmh0bWwoJzxkaXYgY2xhc3M9InNtYWxsIiAgc3R5bGU9InRleHQtYWxpZ246Y2VudGVyOyI+JyArIGVycm9yTXNnICsgJzwvZGl2PicpLnBhcmVudCgpLmZpbmQoJy5tZXRyaWMtbWV0YScpLnJlbW92ZSgpOwogICAgICAgICAgICAgICRncmFwaENvbnRhaW5lci5yZW1vdmVBdHRyKCJzdHlsZSIpOwogICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgJG1ldHJpY1N1bW1hcnlMYWJlbC5wYXJlbnQoKS5uZXh0KCkuc2hvdygpOwoKICAgICAgICAgICAgLy8gcHJvY2VlZCBzaW5jZSB3ZSBoYXZlIGRhdGEKICAgICAgICAgICAgJG1ldHJpY1N1bW1hcnlMYWJlbC50ZXh0KFNQLmN1cnJlbnRQYWdlLm51bWJlclRvRGVjaW1hbFBsYWNlcyhzdW1tYXJ5WydtZWFuJ10sIDAgKSArICdtcycpOwoKICAgICAgICAgICAgdmFyIG1ldHJpY0RhdGFQb2ludHMgPSB7fQogICAgICAgICAgICAgICwgaW50ZXJ2YWxNc2VjID0gbWV0cmljc0Rpc3BsYXkucGVyaW9kLmludGVydmFsICogMTAwMDsKCiAgICAgICAgICAgIHZhciBzdGFydGluZ0J1Y2tldE1zZWMgPSBwYXJzZUludCgobmV3IERhdGUoKSkuZ2V0VGltZSgpIC8gaW50ZXJ2YWxNc2VjKSAqIGludGVydmFsTXNlYzsKCiAgICAgICAgICAgIGZvcih2YXIgaCA9IDA7IGggPCBtZXRyaWNzRGlzcGxheS5tZXRyaWNzLmxlbmd0aDsgaCsrKSB7CiAgICAgICAgICAgICAgbWV0cmljRGF0YVBvaW50c1ttZXRyaWNzRGlzcGxheS5tZXRyaWNzW2hdLm1ldHJpYy5pZF0gPSBbXQogICAgICAgICAgICAgIHZhciBkYXRhID0gbWV0cmljc0Rpc3BsYXkubWV0cmljc1toXS5kYXRhCiAgICAgICAgICAgICAgICAsIGN1cnJlbnRCdWNrZXRNc2VjID0gc3RhcnRpbmdCdWNrZXRNc2VjOwoKICAgICAgICAgICAgICBmb3IodmFyIGkgPSBtZXRyaWNzRGlzcGxheS5wZXJpb2QuY291bnQ7IGkgPiAwOyBpLS0pIHsKICAgICAgICAgICAgICAgIC8vIGxvb3Agb3ZlciB0aGUgZGF0YSBhbmQgcHVsbCBvdXQgdGhlIGRhdGEgcG9pbnQgd2l0aCB0aGUgZm9sbG93aW5nIGNoYXJhY3RlcmlzdGljcwogICAgICAgICAgICAgICAgLy8gIC0+IGNsb3Nlc3QgdG8gY3VycmVudEJ1Y2tldE1zZWMKICAgICAgICAgICAgICAgIC8vICAtPiB3aXRob3V0IGJlaW5nIGdyZWF0ZXIgdGhhbiBjdXJyZW50TXNlY0J1Y2tldAogICAgICAgICAgICAgICAgLy8gIC0+IHdpdGhvdXQgYmVpbmcgbW9yZSB0aGFuIDEgaW50ZXJ2YWxNc2VjIGJ1Y2tldCBhd2F5CiAgICAgICAgICAgICAgICB2YXIgdmFsdWVUb1VzZSA9IG51bGw7CiAgICAgICAgICAgICAgICBmb3IodmFyIGogPSBkYXRhLmxlbmd0aCAtIDE7IGogPj0gMDsgai0tKSB7CiAgICAgICAgICAgICAgICAgIHZhciBjdXJyZW50VGltZXN0YW1wTXNlYyA9IGRhdGFbal0udGltZXN0YW1wICogMTAwMDsKICAgICAgICAgICAgICAgICAgaWYoY3VycmVudFRpbWVzdGFtcE1zZWMgPD0gY3VycmVudEJ1Y2tldE1zZWMgJiYgY3VycmVudFRpbWVzdGFtcE1zZWMgPiAoY3VycmVudEJ1Y2tldE1zZWMgLSBpbnRlcnZhbE1zZWMpKSB7CiAgICAgICAgICAgICAgICAgICAgdmFsdWVUb1VzZSA9IGRhdGFbal0udmFsdWU7CiAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coIlVzaW5nIHRzOiIgKyBjdXJyZW50VGltZXN0YW1wTXNlYyArICIgd2l0aCB2YWx1ZToiICsgdmFsdWVUb1VzZSArICIgZm9yIGJ1Y2tldDoiICsgY3VycmVudEJ1Y2tldE1zZWMpOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgLy8gbG9jYWwgdGltZQogICAgICAgICAgICAgICAgdmFyIG9mZnNldCA9IC0xICogKG5ldyBEYXRlKCkpLmdldFRpbWV6b25lT2Zmc2V0KCkgKiA2MCAqIDEwMDA7CgogICAgICAgICAgICAgICAgbWV0cmljRGF0YVBvaW50c1ttZXRyaWNzRGlzcGxheS5tZXRyaWNzW2hdLm1ldHJpYy5pZF0ucHVzaChbY3VycmVudEJ1Y2tldE1zZWMgKyBvZmZzZXQsIHZhbHVlVG9Vc2VdKQogICAgICAgICAgICAgICAgICBjdXJyZW50QnVja2V0TXNlYyAtPSBpbnRlcnZhbE1zZWM7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBtZXRyaWNEYXRhUG9pbnRzW21ldHJpY3NEaXNwbGF5Lm1ldHJpY3NbaF0ubWV0cmljLmlkXS5yZXZlcnNlKCk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICQoJyNtZXRyaWNzLWRpc3BsYXktZ3JhcGgtY29udGFpbmVyLXJwcXQ5OHN2M3AycicpLmhpZ2hjaGFydHMoJ1N0b2NrQ2hhcnQnLCB7CiAgICAgICAgcGxvdE9wdGlvbnMgOiB7CiAgICAgICAgICBzZXJpZXMgOiB7CiAgICAgICAgICAgIGFuaW1hdGlvbiA6IGZhbHNlLAogICAgICAgICAgICBjb2xvciA6ICcjM2I3M2FmJywKICAgICAgICAgICAgY29ubmVjdE51bGxzOiBmYWxzZQogICAgICAgICAgfSwKICAgICAgICB9LAoKICAgICAgICBjaGFydCA6IHsKICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJyNmZmZmZmYnCiAgICAgICAgfSwKCiAgICAgICAgdGl0bGUgOiB7CiAgICAgICAgICB0ZXh0OiAnJywKICAgICAgICAgIHN0eWxlOiB7CiAgICAgICAgICAgICAgICBkaXNwbGF5OiAnbm9uZScsCiAgICAgICAgICAgICB9CiAgICAgICAgfSwKCiAgICAgICAgY3JlZGl0cyA6IHsKICAgICAgICAgIGVuYWJsZWQgOiBmYWxzZQogICAgICAgIH0sCgogICAgICAgIGV4cG9ydGluZyA6IHsKICAgICAgICAgIGVuYWJsZWQgOiBmYWxzZQogICAgICAgIH0sCgogICAgICAgIHJhbmdlU2VsZWN0b3IgOiB7CiAgICAgICAgICBlbmFibGVkIDogZmFsc2UKICAgICAgICB9LAoKICAgICAgICBzY3JvbGxiYXIgOiB7CiAgICAgICAgICBlbmFibGVkIDogZmFsc2UKICAgICAgICB9LAoKICAgICAgICBuYXZpZ2F0b3IgOiB7CiAgICAgICAgICBlbmFibGVkIDogZmFsc2UKICAgICAgICB9LAoKICAgICAgICB4QXhpczogewogICAgICAgICAgZ3JpZExpbmVDb2xvciA6ICdyZ2JhKDIwNCwyMDQsMjA0LC44KScsCiAgICAgICAgICBsYWJlbHM6IHsKICAgICAgICAgICAgc3R5bGUgOiB7CiAgICAgICAgICAgICAgY29sb3I6ICcjNzA3MDcwJwogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgbGluZUNvbG9yOiAnI2NjY2NjYycsCiAgICAgICAgfSwKCiAgICAgICAgeUF4aXM6IHsKICAgICAgICAgIGdyaWRMaW5lQ29sb3IgOiAncmdiYSgyMDQsMjA0LDIwNCwuNSknLAogICAgICAgICAgbGFiZWxzOiB7CiAgICAgICAgICAgIHN0eWxlIDogewogICAgICAgICAgICAgIGNvbG9yOiAnIzcwNzA3MCcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZW5hYmxlZCA6IHRydWUKICAgICAgICAgIH0sCiAgICAgICAgICBzaG93TGFzdExhYmVsOiB0cnVlLAogICAgICAgICAgICAgICAgICAgICAgICB0aWNrUG9zaXRpb25zOiBbMC4wLCAxMjUuMCwgMjUwLjBdLAogICAgICAgICAgICAgICBtaW46IDAuMCwKICAgICAgICAgICAgICAgc3RhcnRPblRpY2s6IGZhbHNlLAogICAgICAgICAgICAgICBtYXg6IDI1MC4wLAogICAgICAgICAgICAgICBlbmRPblRpY2s6IGZhbHNlLAoKICAgICAgICB9LAoKICAgICAgICBzZXJpZXMgOiBbCiAgICAgICAgICAgICAgewogICAgICBuYW1lIDogJ0dpdCBhdmVyYWdlIHJlc3BvbnNlIHRpbWUgKEhUVFBTKScsCiAgICAgIGRhdGEgOiBtZXRyaWNEYXRhUG9pbnRzWydycHF0OThzdjNwMnInXSwKICAgICAgdG9vbHRpcDogewogICAgICAgIHZhbHVlU3VmZml4OiAnbXMnCiAgICAgIH0sCiAgICAgIGVuYWJsZU1vdXNlVHJhY2tpbmcgOiAoJCh3aW5kb3cpLm91dGVyV2lkdGgoKSA+IDQ4MCkgJiYgdHJ1ZQogICAgfQoKICAgICAgICBdLAoKICAgICAgICB0b29sdGlwOiB7CiAgICAgICAgICBlbmFibGVkOiAoJCh3aW5kb3cpLm91dGVyV2lkdGgoKSA+IDQ4MCkgJiYgdHJ1ZSwKICAgICAgICAgIHZhbHVlRGVjaW1hbHM6IGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgICAgICAgIHZhciB2ID0gU1AuY3VycmVudFBhZ2UubnVtYmVyVG9EZWNpbWFsUGxhY2VzKHZhbHVlLCAwKTsKICAgICAgICAgICAgaWYodi5pbmRleE9mKCcuJykgPT0gLTEpCiAgICAgICAgICAgICAgcmV0dXJuIDA7CiAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICByZXR1cm4gMDsKICAgICAgICAgIH0sCiAgICAgICAgfQogICAgICB9KTsKCiAgICAgICAgICB9KTsKICAgICAgICAgICQuYWpheCh7CiAgICAgICAgICAgIHR5cGU6ICJHRVQiLAogICAgICAgICAgICAvLyB0aGlzIGxpbmUgbXVzdCBiZSBlbmQgdXAgd2l0aCAiLy9zdGF0dXMuKiIgdHlwZSBvZiBVUkxzIChubyBwcm90b2NvbCwganVzdCBsZWFkaW5nIHNsYXNoZXMpLiBjdXN0b21lcnMgdXNlIFNTTCB0aHJvdWdoIHVzIG9yIGJ5IG9mZmxvYWRpbmcgd2l0aAogICAgICAgICAgICAvLyBjbG91ZGZsYXJlIG9yIHNvbWV0aGluZyBsaWtlIGl0IGFuZCB0aGUgcmVxdWVzdC5wcm90b2NvbCB0aGUgc2VydmVyIHNlZXMgaXMgZGlmZmVyZW50IHRoYW4gd2hhdCB0aGUgYnJvd3NlciBzZWVzCiAgICAgICAgICAgIHVybDogIi8vc3RhdHVzLmJpdGJ1Y2tldC5vcmcvbWV0cmljcy1kaXNwbGF5L2txcjU3cHQxbDd2OS9fLmpzb24iLnJlcGxhY2UoJ18nLCBwZXJpb2QpCiAgICAgICAgICB9KS5zdWNjZXNzKGZ1bmN0aW9uKG1ldHJpY3NEaXNwbGF5LCB0ZXh0U3RhdHVzLCB4aHIpIHsKICAgICAgICAgICAgdmFyIHN1bW1hcnkgPSBtZXRyaWNzRGlzcGxheS5zdW1tYXJ5CiAgICAgICAgICAgICAgLCAkbWV0cmljU3VtbWFyeUxhYmVsID0gSFJCLnV0aWxzLmRqc2hvb2soJ21ldHJpY3MtZGlzcGxheS1jdXJyZW50LWtxcjU3cHQxbDd2OScpOwoKICAgICAgICAgICAgdmFyIGVycm9yTXNnID0gbnVsbDsKCiAgICAgICAgICAgIGlmKHN1bW1hcnkgPT09ICJ1bmF2YWlsYWJsZSIpIHsKICAgICAgICAgICAgICBlcnJvck1zZyA9ICdXZVwncmUgaGF2aW5nIGlzc3VlcyByZXRyaWV2aW5nIGRhdGEgZm9yIDxzdHJvbmc+TWVyY3VyaWFsIGF2ZXJhZ2UgcmVzcG9uc2UgdGltZSAoSFRUUFMpPC9zdHJvbmc+LjwvZGl2Pic7CiAgICAgICAgICAgIH0gZWxzZSBpZihzdW1tYXJ5KSB7CiAgICAgICAgICAgICAgLy8gd2UgbmVlZCB0byBkbyBhIGJhc2ljIGNoZWNrIHRvIG1ha2Ugc3VyZSB3ZSBoYXZlIGFueSBkYXRhIGF0IGFsbAogICAgICAgICAgICAgIHZhciBoYXNEYXRhUm9sbHVwc0F2YWlsYWJsZSA9IGZhbHNlOwogICAgICAgICAgICAgIGZvcih2YXIgaCA9IDA7IGggPCBtZXRyaWNzRGlzcGxheS5tZXRyaWNzLmxlbmd0aDsgaCsrKSB7CiAgICAgICAgICAgICAgICBpZihtZXRyaWNzRGlzcGxheS5tZXRyaWNzW2hdLmRhdGEubGVuZ3RoID4gMCkgewogICAgICAgICAgICAgICAgICBoYXNEYXRhUm9sbHVwc0F2YWlsYWJsZSA9IHRydWU7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBpZighaGFzRGF0YVJvbGx1cHNBdmFpbGFibGUpIHsKICAgICAgICAgICAgICAgIGVycm9yTXNnID0gIk9vcHMhIE5vIGRhdGEgaGFzIGJlZW4gaW5kZXhlZCBmb3IgPHN0cm9uZz5NZXJjdXJpYWwgYXZlcmFnZSByZXNwb25zZSB0aW1lIChIVFRQUyk8L3N0cm9uZz4gZm9yIHRoaXMgdGltZSBwZXJpb2QgeWV0LiI7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIGVycm9yTXNnID0gIkZhaWxlZCB0byBsb2FkLiA8c3Ryb25nPk1lcmN1cmlhbCBhdmVyYWdlIHJlc3BvbnNlIHRpbWUgKEhUVFBTKTwvc3Ryb25nPiI7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmKGVycm9yTXNnICE9PSBudWxsKSB7CiAgICAgICAgICAgICAgJGdyYXBoQ29udGFpbmVyID0gJG1ldHJpY1N1bW1hcnlMYWJlbC5wYXJlbnQoKS5uZXh0KCk7CiAgICAgICAgICAgICAgJGdyYXBoQ29udGFpbmVyLmh0bWwoJzxkaXYgY2xhc3M9InNtYWxsIiAgc3R5bGU9InRleHQtYWxpZ246Y2VudGVyOyI+JyArIGVycm9yTXNnICsgJzwvZGl2PicpLnBhcmVudCgpLmZpbmQoJy5tZXRyaWMtbWV0YScpLnJlbW92ZSgpOwogICAgICAgICAgICAgICRncmFwaENvbnRhaW5lci5yZW1vdmVBdHRyKCJzdHlsZSIpOwogICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgJG1ldHJpY1N1bW1hcnlMYWJlbC5wYXJlbnQoKS5uZXh0KCkuc2hvdygpOwoKICAgICAgICAgICAgLy8gcHJvY2VlZCBzaW5jZSB3ZSBoYXZlIGRhdGEKICAgICAgICAgICAgJG1ldHJpY1N1bW1hcnlMYWJlbC50ZXh0KFNQLmN1cnJlbnRQYWdlLm51bWJlclRvRGVjaW1hbFBsYWNlcyhzdW1tYXJ5WydtZWFuJ10sIDAgKSArICdtcycpOwoKICAgICAgICAgICAgdmFyIG1ldHJpY0RhdGFQb2ludHMgPSB7fQogICAgICAgICAgICAgICwgaW50ZXJ2YWxNc2VjID0gbWV0cmljc0Rpc3BsYXkucGVyaW9kLmludGVydmFsICogMTAwMDsKCiAgICAgICAgICAgIHZhciBzdGFydGluZ0J1Y2tldE1zZWMgPSBwYXJzZUludCgobmV3IERhdGUoKSkuZ2V0VGltZSgpIC8gaW50ZXJ2YWxNc2VjKSAqIGludGVydmFsTXNlYzsKCiAgICAgICAgICAgIGZvcih2YXIgaCA9IDA7IGggPCBtZXRyaWNzRGlzcGxheS5tZXRyaWNzLmxlbmd0aDsgaCsrKSB7CiAgICAgICAgICAgICAgbWV0cmljRGF0YVBvaW50c1ttZXRyaWNzRGlzcGxheS5tZXRyaWNzW2hdLm1ldHJpYy5pZF0gPSBbXQogICAgICAgICAgICAgIHZhciBkYXRhID0gbWV0cmljc0Rpc3BsYXkubWV0cmljc1toXS5kYXRhCiAgICAgICAgICAgICAgICAsIGN1cnJlbnRCdWNrZXRNc2VjID0gc3RhcnRpbmdCdWNrZXRNc2VjOwoKICAgICAgICAgICAgICBmb3IodmFyIGkgPSBtZXRyaWNzRGlzcGxheS5wZXJpb2QuY291bnQ7IGkgPiAwOyBpLS0pIHsKICAgICAgICAgICAgICAgIC8vIGxvb3Agb3ZlciB0aGUgZGF0YSBhbmQgcHVsbCBvdXQgdGhlIGRhdGEgcG9pbnQgd2l0aCB0aGUgZm9sbG93aW5nIGNoYXJhY3RlcmlzdGljcwogICAgICAgICAgICAgICAgLy8gIC0+IGNsb3Nlc3QgdG8gY3VycmVudEJ1Y2tldE1zZWMKICAgICAgICAgICAgICAgIC8vICAtPiB3aXRob3V0IGJlaW5nIGdyZWF0ZXIgdGhhbiBjdXJyZW50TXNlY0J1Y2tldAogICAgICAgICAgICAgICAgLy8gIC0+IHdpdGhvdXQgYmVpbmcgbW9yZSB0aGFuIDEgaW50ZXJ2YWxNc2VjIGJ1Y2tldCBhd2F5CiAgICAgICAgICAgICAgICB2YXIgdmFsdWVUb1VzZSA9IG51bGw7CiAgICAgICAgICAgICAgICBmb3IodmFyIGogPSBkYXRhLmxlbmd0aCAtIDE7IGogPj0gMDsgai0tKSB7CiAgICAgICAgICAgICAgICAgIHZhciBjdXJyZW50VGltZXN0YW1wTXNlYyA9IGRhdGFbal0udGltZXN0YW1wICogMTAwMDsKICAgICAgICAgICAgICAgICAgaWYoY3VycmVudFRpbWVzdGFtcE1zZWMgPD0gY3VycmVudEJ1Y2tldE1zZWMgJiYgY3VycmVudFRpbWVzdGFtcE1zZWMgPiAoY3VycmVudEJ1Y2tldE1zZWMgLSBpbnRlcnZhbE1zZWMpKSB7CiAgICAgICAgICAgICAgICAgICAgdmFsdWVUb1VzZSA9IGRhdGFbal0udmFsdWU7CiAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coIlVzaW5nIHRzOiIgKyBjdXJyZW50VGltZXN0YW1wTXNlYyArICIgd2l0aCB2YWx1ZToiICsgdmFsdWVUb1VzZSArICIgZm9yIGJ1Y2tldDoiICsgY3VycmVudEJ1Y2tldE1zZWMpOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgLy8gbG9jYWwgdGltZQogICAgICAgICAgICAgICAgdmFyIG9mZnNldCA9IC0xICogKG5ldyBEYXRlKCkpLmdldFRpbWV6b25lT2Zmc2V0KCkgKiA2MCAqIDEwMDA7CgogICAgICAgICAgICAgICAgbWV0cmljRGF0YVBvaW50c1ttZXRyaWNzRGlzcGxheS5tZXRyaWNzW2hdLm1ldHJpYy5pZF0ucHVzaChbY3VycmVudEJ1Y2tldE1zZWMgKyBvZmZzZXQsIHZhbHVlVG9Vc2VdKQogICAgICAgICAgICAgICAgICBjdXJyZW50QnVja2V0TXNlYyAtPSBpbnRlcnZhbE1zZWM7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBtZXRyaWNEYXRhUG9pbnRzW21ldHJpY3NEaXNwbGF5Lm1ldHJpY3NbaF0ubWV0cmljLmlkXS5yZXZlcnNlKCk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICQoJyNtZXRyaWNzLWRpc3BsYXktZ3JhcGgtY29udGFpbmVyLWtxcjU3cHQxbDd2OScpLmhpZ2hjaGFydHMoJ1N0b2NrQ2hhcnQnLCB7CiAgICAgICAgcGxvdE9wdGlvbnMgOiB7CiAgICAgICAgICBzZXJpZXMgOiB7CiAgICAgICAgICAgIGFuaW1hdGlvbiA6IGZhbHNlLAogICAgICAgICAgICBjb2xvciA6ICcjM2I3M2FmJywKICAgICAgICAgICAgY29ubmVjdE51bGxzOiBmYWxzZQogICAgICAgICAgfSwKICAgICAgICB9LAoKICAgICAgICBjaGFydCA6IHsKICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJyNmZmZmZmYnCiAgICAgICAgfSwKCiAgICAgICAgdGl0bGUgOiB7CiAgICAgICAgICB0ZXh0OiAnJywKICAgICAgICAgIHN0eWxlOiB7CiAgICAgICAgICAgICAgICBkaXNwbGF5OiAnbm9uZScsCiAgICAgICAgICAgICB9CiAgICAgICAgfSwKCiAgICAgICAgY3JlZGl0cyA6IHsKICAgICAgICAgIGVuYWJsZWQgOiBmYWxzZQogICAgICAgIH0sCgogICAgICAgIGV4cG9ydGluZyA6IHsKICAgICAgICAgIGVuYWJsZWQgOiBmYWxzZQogICAgICAgIH0sCgogICAgICAgIHJhbmdlU2VsZWN0b3IgOiB7CiAgICAgICAgICBlbmFibGVkIDogZmFsc2UKICAgICAgICB9LAoKICAgICAgICBzY3JvbGxiYXIgOiB7CiAgICAgICAgICBlbmFibGVkIDogZmFsc2UKICAgICAgICB9LAoKICAgICAgICBuYXZpZ2F0b3IgOiB7CiAgICAgICAgICBlbmFibGVkIDogZmFsc2UKICAgICAgICB9LAoKICAgICAgICB4QXhpczogewogICAgICAgICAgZ3JpZExpbmVDb2xvciA6ICdyZ2JhKDIwNCwyMDQsMjA0LC44KScsCiAgICAgICAgICBsYWJlbHM6IHsKICAgICAgICAgICAgc3R5bGUgOiB7CiAgICAgICAgICAgICAgY29sb3I6ICcjNzA3MDcwJwogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgbGluZUNvbG9yOiAnI2NjY2NjYycsCiAgICAgICAgfSwKCiAgICAgICAgeUF4aXM6IHsKICAgICAgICAgIGdyaWRMaW5lQ29sb3IgOiAncmdiYSgyMDQsMjA0LDIwNCwuNSknLAogICAgICAgICAgbGFiZWxzOiB7CiAgICAgICAgICAgIHN0eWxlIDogewogICAgICAgICAgICAgIGNvbG9yOiAnIzcwNzA3MCcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZW5hYmxlZCA6IHRydWUKICAgICAgICAgIH0sCiAgICAgICAgICBzaG93TGFzdExhYmVsOiB0cnVlLAogICAgICAgICAgICAgICAgICAgICAgICB0aWNrUG9zaXRpb25zOiBbMC4wLCAxNTAuMCwgMzAwLjBdLAogICAgICAgICAgICAgICBtaW46IDAuMCwKICAgICAgICAgICAgICAgc3RhcnRPblRpY2s6IGZhbHNlLAogICAgICAgICAgICAgICBtYXg6IDMwMC4wLAogICAgICAgICAgICAgICBlbmRPblRpY2s6IGZhbHNlLAoKICAgICAgICB9LAoKICAgICAgICBzZXJpZXMgOiBbCiAgICAgICAgICAgICAgewogICAgICBuYW1lIDogJ01lcmN1cmlhbCBhdmVyYWdlIHJlc3BvbnNlIHRpbWUgKEhUVFBTKScsCiAgICAgIGRhdGEgOiBtZXRyaWNEYXRhUG9pbnRzWydrcXI1N3B0MWw3djknXSwKICAgICAgdG9vbHRpcDogewogICAgICAgIHZhbHVlU3VmZml4OiAnbXMnCiAgICAgIH0sCiAgICAgIGVuYWJsZU1vdXNlVHJhY2tpbmcgOiAoJCh3aW5kb3cpLm91dGVyV2lkdGgoKSA+IDQ4MCkgJiYgdHJ1ZQogICAgfQoKICAgICAgICBdLAoKICAgICAgICB0b29sdGlwOiB7CiAgICAgICAgICBlbmFibGVkOiAoJCh3aW5kb3cpLm91dGVyV2lkdGgoKSA+IDQ4MCkgJiYgdHJ1ZSwKICAgICAgICAgIHZhbHVlRGVjaW1hbHM6IGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgICAgICAgIHZhciB2ID0gU1AuY3VycmVudFBhZ2UubnVtYmVyVG9EZWNpbWFsUGxhY2VzKHZhbHVlLCAwKTsKICAgICAgICAgICAgaWYodi5pbmRleE9mKCcuJykgPT0gLTEpCiAgICAgICAgICAgICAgcmV0dXJuIDA7CiAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICByZXR1cm4gMDsKICAgICAgICAgIH0sCiAgICAgICAgfQogICAgICB9KTsKCiAgICAgICAgICB9KTsKICAgICAgfQoKICAgICAgdmFyICR0aW1lUGVyaW9kVG9nZ2xlcyA9IEhSQi51dGlscy5kanNob29rKCdkYXRhLXRpbWUtcGVyaW9kLXRvZ2dsZScpOwoKICAgICAgU1AuY3VycmVudFBhZ2UuYWN0aXZlVGltZVBlcmlvZFRvZ2dsZSA9IGZ1bmN0aW9uKHBlcmlvZCkgewogICAgICAgICR0aW1lUGVyaW9kVG9nZ2xlcy5yZW1vdmVDbGFzcygnYWN0aXZlJyk7CiAgICAgICAgJHRpbWVQZXJpb2RUb2dnbGVzLmZpbHRlcignW2RhdGEtdGltZS1wZXJpb2Q9IicgKyBwZXJpb2QgKyAnIl0nKS5hZGRDbGFzcygnYWN0aXZlJyk7CiAgICAgIH0KCiAgICAgIFNQLmN1cnJlbnRQYWdlLmdldEFuZERpc3BsYXlJbml0aWFsQ2hhcnREYXRhID0gZnVuY3Rpb24oKSB7CiAgICAgICAgaWYgKHdpbmRvdy5sb2NhdGlvbi5oYXNoID09ICcjd2VlaycpIHsKICAgICAgICAgIFNQLmN1cnJlbnRQYWdlLmdldERhdGFGb3JUaW1lUGVyaW9kKCd3ZWVrJyk7CiAgICAgICAgICBTUC5jdXJyZW50UGFnZS5hY3RpdmVUaW1lUGVyaW9kVG9nZ2xlKCd3ZWVrJyk7CiAgICAgICAgfSAKICAgICAgICBlbHNlIGlmICh3aW5kb3cubG9jYXRpb24uaGFzaCA9PSAnI21vbnRoJykgewogICAgICAgICAgU1AuY3VycmVudFBhZ2UuZ2V0RGF0YUZvclRpbWVQZXJpb2QoJ21vbnRoJyk7CiAgICAgICAgICBTUC5jdXJyZW50UGFnZS5hY3RpdmVUaW1lUGVyaW9kVG9nZ2xlKCdtb250aCcpOwogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgIFNQLmN1cnJlbnRQYWdlLmdldERhdGFGb3JUaW1lUGVyaW9kKCdkYXknKTsKICAgICAgICAgIFNQLmN1cnJlbnRQYWdlLmFjdGl2ZVRpbWVQZXJpb2RUb2dnbGUoJ2RheScpOwogICAgICAgIH0KICAgICAgfQoKICAgICAgJHRpbWVQZXJpb2RUb2dnbGVzLm9uKCdjbGljaycsIGZ1bmN0aW9uKCkgewogICAgICAgIHZhciBuZXdQZXJpb2QgPSAkKHRoaXMpLmF0dHIoJ2RhdGEtdGltZS1wZXJpb2QnKTsKCiAgICAgICAgU1AuY3VycmVudFBhZ2UuYWN0aXZlVGltZVBlcmlvZFRvZ2dsZShuZXdQZXJpb2QpOwogICAgICAgIFNQLmN1cnJlbnRQYWdlLmdldERhdGFGb3JUaW1lUGVyaW9kKG5ld1BlcmlvZCk7CiAgICAgICAgd2luZG93LmxvY2F0aW9uLmhhc2ggPSBuZXdQZXJpb2Q7CgogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfSk7CgogICAgICBTUC5jdXJyZW50UGFnZS5nZXRBbmREaXNwbGF5SW5pdGlhbENoYXJ0RGF0YSgpOwogICAgfSkKICA8L3NjcmlwdD4KCgoKICAgIAogIDxzY3JpcHQgc3JjPSJodHRwczovL2RrYTU3NW9mbTRhbzAuY2xvdWRmcm9udC5uZXQvcGFja3MvY29tbW9uLTUxNzM0ZDk1ODc3N2Q0YjJlNmE2LmpzIj48L3NjcmlwdD4KICA8c2NyaXB0IHNyYz0iaHR0cHM6Ly9ka2E1NzVvZm00YW8wLmNsb3VkZnJvbnQubmV0L3BhY2tzL2dsb2JhbHMtZWE5YjYxZTliMjQwNGNjYmRkOWUuanMiPjwvc2NyaXB0PgoKICAgIAogICAgCiAgPHNjcmlwdCBzcmM9Imh0dHBzOi8vZGthNTc1b2ZtNGFvMC5jbG91ZGZyb250Lm5ldC9hc3NldHMvcmVhY3RfdWpzLTAxYzBhYzA2ZDBlYzI3ZDZkMDg3Mjc0YWQ5MWFiMjkyYWNlYWVlZjUzNjI3MmMxYWNlZTc1YmUxNDlhMzUwZmQuanMiPjwvc2NyaXB0PgoKCiAgICAKCgo8IS0tIEZPUiBGTEFTSCBOT1RJQ0VTIC0tPgoKCgo8IS0tIEZPUiBFUlJPUiAtLT4KCgoKICAgIDxzY3JpcHQ+CiAgJChmdW5jdGlvbigpIHsKICAJdmFyICRsaW5rID0gJCgnPHNwYW4gY2xhc3M9ImNvbG9yLXNlY29uZGFyeSBwb3dlcmVkLWJ5Ij5Qb3dlcmVkIGJ5IDxhIGhyZWY9Imh0dHA6Ly93d3cuc3RhdHVzcGFnZS5pbyIgdGFyZ2V0PSJfYmxhbmsiIGNsYXNzPSJjb2xvci1zZWNvbmRhcnkiPlN0YXR1c3BhZ2U8L2E+PC9zcGFuPicpOwoKICAJdmFyIHNldFBvd2VyZWRCeVN0eWxlcyA9IGZ1bmN0aW9uKCkgewogIAkJaWYgKCEkKCcucG93ZXJlZC1ieScpLmxlbmd0aCkgewogIAkJCSRsaW5rLmFwcGVuZFRvKCQoJy5wYWdlLWZvb3RlcicpKQogIAkJfQogIAkJJCgnLnBvd2VyZWQtYnknKS5hdHRyKCdzdHlsZScsICdkaXNwbGF5OiBpbmxpbmUgIWltcG9ydGFudDsgdmlzaWJpbGl0eTp2aXNpYmxlICFpbXBvcnRhbnQ7IG9wYWNpdHk6IDEgIWltcG9ydGFudDsgcG9zaXRpb246c3RhdGljICFpbXBvcnRhbnQ7IHRleHQtaW5kZW50OjBweCAhaW1wb3J0YW50OyB0cmFuc2Zvcm06c2NhbGUoMSkgIWltcG9ydGFudCcpOwogIAl9CiAgCQogIAlzZXRJbnRlcnZhbChzZXRQb3dlcmVkQnlTdHlsZXMsIDEwMDApOwogIH0pOwo8L3NjcmlwdD4KCgoKCgogIDwvYm9keT4KPC9odG1sPgo=
    http_version: 
  recorded_at: Sun, 24 Jun 2018 15:52:54 GMT
recorded_with: VCR 4.0.0
